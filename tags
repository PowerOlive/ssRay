!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
A	backup/main.cc	302;"	d	file:
A	main.cc	302;"	d	file:
AABBOX_H	AABBox.h	2;"	d
AABBOX_H	backup/AABBox.h	2;"	d
AABBox	AABBox.h	/^        AABBox(Point p1, Point p2, Object *owner) : owner(owner),  P1(p1), P2(p2) {};$/;"	f	class:AABBox	access:public	signature:(Point p1, Point p2, Object *owner)
AABBox	AABBox.h	/^class AABBox$/;"	c
AABBox	backup/AABBox.h	/^        AABBox(Point p1, Point p2, Object *owner) : owner(owner),  P1(p1), P2(p2) {};$/;"	f	class:AABBox	access:public	signature:(Point p1, Point p2, Object *owner)
AABBox	backup/AABBox.h	/^class AABBox$/;"	c
AABBox::AABBox	AABBox.h	/^        AABBox(Point p1, Point p2, Object *owner) : owner(owner),  P1(p1), P2(p2) {};$/;"	f	class:AABBox	access:public	signature:(Point p1, Point p2, Object *owner)
AABBox::AABBox	backup/AABBox.h	/^        AABBox(Point p1, Point p2, Object *owner) : owner(owner),  P1(p1), P2(p2) {};$/;"	f	class:AABBox	access:public	signature:(Point p1, Point p2, Object *owner)
AABBox::P1	AABBox.h	/^        Point P1,P2;$/;"	m	class:AABBox	access:public
AABBox::P1	backup/AABBox.h	/^        Point P1,P2;$/;"	m	class:AABBox	access:public
AABBox::P2	AABBox.h	/^        Point P1,P2;$/;"	m	class:AABBox	access:public
AABBox::P2	backup/AABBox.h	/^        Point P1,P2;$/;"	m	class:AABBox	access:public
AABBox::intersect	AABBox.h	/^        bool intersect(Ray& ray, myFloat& a, myFloat& b) const$/;"	f	class:AABBox	access:public	signature:(Ray& ray, myFloat& a, myFloat& b) const
AABBox::intersect	backup/AABBox.h	/^        bool intersect(Ray& ray, myFloat& a, myFloat& b) const$/;"	f	class:AABBox	access:public	signature:(Ray& ray, myFloat& a, myFloat& b) const
AABBox::owner	AABBox.h	/^        Object *owner;$/;"	m	class:AABBox	access:public
AABBox::owner	backup/AABBox.h	/^        Object *owner;$/;"	m	class:AABBox	access:public
ABSO	World.cc	318;"	d	file:
ABSO	backup/World.cc	318;"	d	file:
Axes	KDNode.h	/^enum Axes {XAXIS, YAXIS, ZAXIS, LEAF};$/;"	g
Axes	backup/KDNode.h	/^enum Axes {XAXIS, YAXIS, ZAXIS, LEAF};$/;"	g
BOX_H	Box.h	2;"	d
BOX_H	backup/Box.h	2;"	d
BSPHERE_H	BSphere.h	2;"	d
BSPHERE_H	backup/BSphere.h	2;"	d
BSphere	BSphere.cc	/^BSphere::BSphere(Point position, myFloat radius) : position(position), radius(radius), radius2(radius*radius)$/;"	f	class:BSphere	signature:(Point position, myFloat radius)
BSphere	BSphere.h	/^        BSphere(Point, myFloat);$/;"	p	class:BSphere	access:public	signature:(Point, myFloat)
BSphere	BSphere.h	/^class BSphere$/;"	c
BSphere	backup/BSphere.cc	/^BSphere::BSphere(Point position, myFloat radius) : position(position), radius(radius), radius2(radius*radius)$/;"	f	class:BSphere	signature:(Point position, myFloat radius)
BSphere	backup/BSphere.h	/^        BSphere(Point, myFloat);$/;"	p	class:BSphere	access:public	signature:(Point, myFloat)
BSphere	backup/BSphere.h	/^class BSphere$/;"	c
BSphere::BSphere	BSphere.cc	/^BSphere::BSphere(Point position, myFloat radius) : position(position), radius(radius), radius2(radius*radius)$/;"	f	class:BSphere	signature:(Point position, myFloat radius)
BSphere::BSphere	BSphere.h	/^        BSphere(Point, myFloat);$/;"	p	class:BSphere	access:public	signature:(Point, myFloat)
BSphere::BSphere	backup/BSphere.cc	/^BSphere::BSphere(Point position, myFloat radius) : position(position), radius(radius), radius2(radius*radius)$/;"	f	class:BSphere	signature:(Point position, myFloat radius)
BSphere::BSphere	backup/BSphere.h	/^        BSphere(Point, myFloat);$/;"	p	class:BSphere	access:public	signature:(Point, myFloat)
BSphere::createRandomRay	BSphere.cc	/^Vector BSphere::createRandomRay(const Point& target, Random& rNG, myFloat y) const $/;"	f	class:BSphere	signature:(const Point& target, Random& rNG, myFloat y) const
BSphere::createRandomRay	BSphere.h	/^        Vector createRandomRay(const Point&, Random&, myFloat) const;$/;"	p	class:BSphere	access:public	signature:(const Point&, Random&, myFloat) const
BSphere::createRandomRay	backup/BSphere.cc	/^Vector BSphere::createRandomRay(const Point& target, Random& rNG, myFloat y) const $/;"	f	class:BSphere	signature:(const Point& target, Random& rNG, myFloat y) const
BSphere::createRandomRay	backup/BSphere.h	/^        Vector createRandomRay(const Point&, Random&, myFloat) const;$/;"	p	class:BSphere	access:public	signature:(const Point&, Random&, myFloat) const
BSphere::getSolidRatio	BSphere.cc	/^myFloat BSphere::getSolidRatio(Point& target) const$/;"	f	class:BSphere	signature:(Point& target) const
BSphere::getSolidRatio	BSphere.h	/^        myFloat getSolidRatio(Point&) const;$/;"	p	class:BSphere	access:public	signature:(Point&) const
BSphere::getSolidRatio	backup/BSphere.cc	/^myFloat BSphere::getSolidRatio(Point& target) const$/;"	f	class:BSphere	signature:(Point& target) const
BSphere::getSolidRatio	backup/BSphere.h	/^        myFloat getSolidRatio(Point&) const;$/;"	p	class:BSphere	access:public	signature:(Point&) const
BSphere::position	BSphere.h	/^        Point position;$/;"	m	class:BSphere	access:private
BSphere::position	backup/BSphere.h	/^        Point position;$/;"	m	class:BSphere	access:private
BSphere::radius	BSphere.h	/^        myFloat radius, radius2;$/;"	m	class:BSphere	access:private
BSphere::radius	backup/BSphere.h	/^        myFloat radius, radius2;$/;"	m	class:BSphere	access:private
BSphere::radius2	BSphere.h	/^        myFloat radius, radius2;$/;"	m	class:BSphere	access:private
BSphere::radius2	backup/BSphere.h	/^        myFloat radius, radius2;$/;"	m	class:BSphere	access:private
BoundByBSphere	Box.cc	/^void Box::BoundByBSphere()$/;"	f	class:Box	signature:()
BoundByBSphere	backup/Box.cc	/^void Box::BoundByBSphere()$/;"	f	class:Box	signature:()
Box	Box.cc	/^Box::Box(Material *material, Transformation * transformation) : Object(material), transformation(transformation)$/;"	f	class:Box	signature:(Material *material, Transformation * transformation)
Box	Box.cc	/^Box::Box(Point _P1, Point _P2, Material *material) : Object(material)$/;"	f	class:Box	signature:(Point _P1, Point _P2, Material *material)
Box	Box.h	/^        Box(Material *, Transformation *);$/;"	p	class:Box	access:public	signature:(Material *, Transformation *)
Box	Box.h	/^        Box(Point, Point, Material *, Transformation *);$/;"	p	class:Box	access:public	signature:(Point, Point, Material *, Transformation *)
Box	Box.h	/^class Box : public Object$/;"	c	inherits:Object
Box	backup/Box.cc	/^Box::Box(Material *material, Transformation * transformation) : Object(material), transformation(transformation)$/;"	f	class:Box	signature:(Material *material, Transformation * transformation)
Box	backup/Box.cc	/^Box::Box(Point _P1, Point _P2, Material *material) : Object(material)$/;"	f	class:Box	signature:(Point _P1, Point _P2, Material *material)
Box	backup/Box.h	/^        Box(Material *, Transformation *);$/;"	p	class:Box	access:public	signature:(Material *, Transformation *)
Box	backup/Box.h	/^        Box(Point, Point, Material *, Transformation *);$/;"	p	class:Box	access:public	signature:(Point, Point, Material *, Transformation *)
Box	backup/Box.h	/^class Box : public Object$/;"	c	inherits:Object
Box::BoundByBSphere	Box.cc	/^void Box::BoundByBSphere()$/;"	f	class:Box	signature:()
Box::BoundByBSphere	backup/Box.cc	/^void Box::BoundByBSphere()$/;"	f	class:Box	signature:()
Box::Box	Box.cc	/^Box::Box(Material *material, Transformation * transformation) : Object(material), transformation(transformation)$/;"	f	class:Box	signature:(Material *material, Transformation * transformation)
Box::Box	Box.cc	/^Box::Box(Point _P1, Point _P2, Material *material) : Object(material)$/;"	f	class:Box	signature:(Point _P1, Point _P2, Material *material)
Box::Box	Box.h	/^        Box(Material *, Transformation *);$/;"	p	class:Box	access:public	signature:(Material *, Transformation *)
Box::Box	Box.h	/^        Box(Point, Point, Material *, Transformation *);$/;"	p	class:Box	access:public	signature:(Point, Point, Material *, Transformation *)
Box::Box	backup/Box.cc	/^Box::Box(Material *material, Transformation * transformation) : Object(material), transformation(transformation)$/;"	f	class:Box	signature:(Material *material, Transformation * transformation)
Box::Box	backup/Box.cc	/^Box::Box(Point _P1, Point _P2, Material *material) : Object(material)$/;"	f	class:Box	signature:(Point _P1, Point _P2, Material *material)
Box::Box	backup/Box.h	/^        Box(Material *, Transformation *);$/;"	p	class:Box	access:public	signature:(Material *, Transformation *)
Box::Box	backup/Box.h	/^        Box(Point, Point, Material *, Transformation *);$/;"	p	class:Box	access:public	signature:(Point, Point, Material *, Transformation *)
Box::P1	Box.h	/^        Point P1, P2;$/;"	m	class:Box	access:private
Box::P1	backup/Box.h	/^        Point P1, P2;$/;"	m	class:Box	access:private
Box::P2	Box.h	/^        Point P1, P2;$/;"	m	class:Box	access:private
Box::P2	backup/Box.h	/^        Point P1, P2;$/;"	m	class:Box	access:private
Box::boundByBSphere	Box.cc	/^BSphere *Box::boundByBSphere()$/;"	f	class:Box	signature:()
Box::boundByBSphere	Box.h	/^        BSphere *boundByBSphere();$/;"	p	class:Box	access:public	signature:()
Box::boundByBSphere	backup/Box.cc	/^BSphere *Box::boundByBSphere()$/;"	f	class:Box	signature:()
Box::boundByBSphere	backup/Box.h	/^        BSphere *boundByBSphere();$/;"	p	class:Box	access:public	signature:()
Box::getINormal	backup/Box.cc	/^Vector Box::getINormal(Point worldPoint) const$/;"	f	class:Box	signature:(Point worldPoint) const
Box::getINormal	backup/Box.h	/^        Vector getINormal(Point) const;$/;"	p	class:Box	access:public	signature:(Point) const
Box::intersect	Box.cc	/^myFloat Box::intersect(Point worldOrigin, Vector worldDirection) const$/;"	f	class:Box	signature:(Point worldOrigin, Vector worldDirection) const
Box::intersect	Box.cc	/^myFloat Box::intersect(Ray& ray, Intersection& intersection) const$/;"	f	class:Box	signature:(Ray& ray, Intersection& intersection) const
Box::intersect	Box.h	/^        bool intersect(Ray&, Intersection&) const;$/;"	p	class:Box	access:public	signature:(Ray&, Intersection&) const
Box::intersect	backup/Box.cc	/^myFloat Box::intersect(Point worldOrigin, Vector worldDirection) const$/;"	f	class:Box	signature:(Point worldOrigin, Vector worldDirection) const
Box::intersect	backup/Box.h	/^        myFloat intersect(Point, Vector) const;$/;"	p	class:Box	access:public	signature:(Point, Vector) const
Box::transformation	Box.h	/^        Transformation *transformation;$/;"	m	class:Box	access:private
Box::transformation	backup/Box.h	/^        Transformation *transformation;$/;"	m	class:Box	access:private
Box::~Box	Box.cc	/^Box::~Box()$/;"	f	class:Box	signature:()
Box::~Box	Box.h	/^        ~Box();$/;"	p	class:Box	access:public	signature:()
Box::~Box	backup/Box.cc	/^Box::~Box()$/;"	f	class:Box	signature:()
Box::~Box	backup/Box.h	/^        ~Box();$/;"	p	class:Box	access:public	signature:()
CAMERA_H	Camera.h	2;"	d
CAMERA_H	backup/Camera.h	2;"	d
CHECKERS	Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon6
CHECKERS	backup/Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon3
CI	KDTree.cc	42;"	d	file:
CI	backup/KDTree.cc	42;"	d	file:
CT	KDTree.cc	43;"	d	file:
CT	backup/KDTree.cc	43;"	d	file:
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall -O2$/;"	m
CXXFLAGS	Makefile	/^debug: CXXFLAGS = $(DEBUG)$/;"	m
Camera	Camera.cc	/^Camera::Camera(Point position, Point target, myFloat ang, unsigned int width, unsigned int height, myFloat apertureRadius, myFloat fDistance) : film(width, height), position(position), sky(0, 1, 0), apertureRadius(apertureRadius)$/;"	f	class:Camera	signature:(Point position, Point target, myFloat ang, unsigned int width, unsigned int height, myFloat apertureRadius, myFloat fDistance)
Camera	Camera.h	/^        Camera(Point, Point, myFloat, unsigned int, unsigned int, myFloat = 0.0, myFloat = 0.0);$/;"	p	class:Camera	access:public	signature:(Point, Point, myFloat, unsigned int, unsigned int, myFloat = 0.0, myFloat = 0.0)
Camera	Camera.h	/^class Camera $/;"	c
Camera	backup/Camera.cc	/^Camera::Camera(Point position, Point target, myFloat ang, unsigned int width, unsigned int height, myFloat apertureRadius, myFloat fDistance) : film(width, height), position(position), sky(0, 1, 0), apertureRadius(apertureRadius)$/;"	f	class:Camera	signature:(Point position, Point target, myFloat ang, unsigned int width, unsigned int height, myFloat apertureRadius, myFloat fDistance)
Camera	backup/Camera.h	/^        Camera(Point, Point, myFloat, unsigned int, unsigned int, myFloat = 0.0, myFloat = 0.0);$/;"	p	class:Camera	access:public	signature:(Point, Point, myFloat, unsigned int, unsigned int, myFloat = 0.0, myFloat = 0.0)
Camera	backup/Camera.h	/^class Camera $/;"	c
Camera::Camera	Camera.cc	/^Camera::Camera(Point position, Point target, myFloat ang, unsigned int width, unsigned int height, myFloat apertureRadius, myFloat fDistance) : film(width, height), position(position), sky(0, 1, 0), apertureRadius(apertureRadius)$/;"	f	class:Camera	signature:(Point position, Point target, myFloat ang, unsigned int width, unsigned int height, myFloat apertureRadius, myFloat fDistance)
Camera::Camera	Camera.h	/^        Camera(Point, Point, myFloat, unsigned int, unsigned int, myFloat = 0.0, myFloat = 0.0);$/;"	p	class:Camera	access:public	signature:(Point, Point, myFloat, unsigned int, unsigned int, myFloat = 0.0, myFloat = 0.0)
Camera::Camera	backup/Camera.cc	/^Camera::Camera(Point position, Point target, myFloat ang, unsigned int width, unsigned int height, myFloat apertureRadius, myFloat fDistance) : film(width, height), position(position), sky(0, 1, 0), apertureRadius(apertureRadius)$/;"	f	class:Camera	signature:(Point position, Point target, myFloat ang, unsigned int width, unsigned int height, myFloat apertureRadius, myFloat fDistance)
Camera::Camera	backup/Camera.h	/^        Camera(Point, Point, myFloat, unsigned int, unsigned int, myFloat = 0.0, myFloat = 0.0);$/;"	p	class:Camera	access:public	signature:(Point, Point, myFloat, unsigned int, unsigned int, myFloat = 0.0, myFloat = 0.0)
Camera::angle	Camera.h	/^        myFloat angle;$/;"	m	class:Camera	access:private
Camera::angle	backup/Camera.h	/^        myFloat angle;$/;"	m	class:Camera	access:private
Camera::apertureRadius	Camera.h	/^        myFloat apertureRadius;$/;"	m	class:Camera	access:private
Camera::apertureRadius	backup/Camera.h	/^        myFloat apertureRadius;$/;"	m	class:Camera	access:private
Camera::createInitialRay	Camera.cc	/^Ray Camera::createInitialRay(unsigned int x, unsigned int y, Random &rNG) const $/;"	f	class:Camera	signature:(unsigned int x, unsigned int y, Random &rNG) const
Camera::createInitialRay	Camera.h	/^        Ray createInitialRay(unsigned int, unsigned int, Random&) const;$/;"	p	class:Camera	access:public	signature:(unsigned int, unsigned int, Random&) const
Camera::createInitialRay	backup/Camera.cc	/^Ray Camera::createInitialRay(unsigned int x, unsigned int y, Random &rNG) const $/;"	f	class:Camera	signature:(unsigned int x, unsigned int y, Random &rNG) const
Camera::createInitialRay	backup/Camera.h	/^        Ray createInitialRay(unsigned int, unsigned int, Random&) const;$/;"	p	class:Camera	access:public	signature:(unsigned int, unsigned int, Random&) const
Camera::direction	Camera.h	/^        Vector direction;$/;"	m	class:Camera	access:private
Camera::direction	backup/Camera.h	/^        Vector direction;$/;"	m	class:Camera	access:private
Camera::film	Camera.h	/^        Film film;$/;"	m	class:Camera	access:private
Camera::film	backup/Camera.h	/^        Film film;$/;"	m	class:Camera	access:private
Camera::focalDistance	Camera.h	/^        myFloat focalDistance;$/;"	m	class:Camera	access:private
Camera::focalDistance	backup/Camera.h	/^        myFloat focalDistance;$/;"	m	class:Camera	access:private
Camera::getFilm	Camera.cc	/^Film *Camera::getFilm(void)$/;"	f	class:Camera	signature:(void)
Camera::getFilm	Camera.h	/^        Film *getFilm(void);$/;"	p	class:Camera	access:public	signature:(void)
Camera::getFilm	backup/Camera.cc	/^Film *Camera::getFilm(void)$/;"	f	class:Camera	signature:(void)
Camera::getFilm	backup/Camera.h	/^        Film *getFilm(void);$/;"	p	class:Camera	access:public	signature:(void)
Camera::position	Camera.h	/^        Point position;$/;"	m	class:Camera	access:private
Camera::position	backup/Camera.h	/^        Point position;$/;"	m	class:Camera	access:private
Camera::right	Camera.h	/^        Vector right;$/;"	m	class:Camera	access:private
Camera::right	backup/Camera.h	/^        Vector right;$/;"	m	class:Camera	access:private
Camera::sky	Camera.h	/^        Vector sky;$/;"	m	class:Camera	access:private
Camera::sky	backup/Camera.h	/^        Vector sky;$/;"	m	class:Camera	access:private
Camera::up	Camera.h	/^        Vector up;$/;"	m	class:Camera	access:private
Camera::up	backup/Camera.h	/^        Vector up;$/;"	m	class:Camera	access:private
DEBUG	Makefile	/^DEBUG = -Wall -g$/;"	m
DIRECTLIGHTING	World.cc	14;"	d	file:
DIRECTLIGHTING	backup/World.cc	14;"	d	file:
EB	KDTree.cc	44;"	d	file:
EB	backup/KDTree.cc	44;"	d	file:
EPSILON	Vector.h	11;"	d
EPSILON	backup/Vector.h	11;"	d
FILM_H	Film.h	2;"	d
FILM_H	backup/Film.h	2;"	d
FLAGS	test/Makefile	/^FLAGS = -O2 -Wall$/;"	m
Film	Film.cc	/^Film::Film(unsigned int width, unsigned int height) : width(width), height(height), counter(0)$/;"	f	class:Film	signature:(unsigned int width, unsigned int height)
Film	Film.h	/^        Film(unsigned int, unsigned int);$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int)
Film	Film.h	/^class Film$/;"	c
Film	backup/Film.cc	/^Film::Film(unsigned int width, unsigned int height) : width(width), height(height), counter(0)$/;"	f	class:Film	signature:(unsigned int width, unsigned int height)
Film	backup/Film.h	/^        Film(unsigned int, unsigned int);$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int)
Film	backup/Film.h	/^class Film$/;"	c
Film::Film	Film.cc	/^Film::Film(unsigned int width, unsigned int height) : width(width), height(height), counter(0)$/;"	f	class:Film	signature:(unsigned int width, unsigned int height)
Film::Film	Film.h	/^        Film(unsigned int, unsigned int);$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int)
Film::Film	backup/Film.cc	/^Film::Film(unsigned int width, unsigned int height) : width(width), height(height), counter(0)$/;"	f	class:Film	signature:(unsigned int width, unsigned int height)
Film::Film	backup/Film.h	/^        Film(unsigned int, unsigned int);$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int)
Film::clear	Film.cc	/^void Film::clear(void)$/;"	f	class:Film	signature:(void)
Film::clear	Film.h	/^        void clear();$/;"	p	class:Film	access:public	signature:()
Film::clear	backup/Film.cc	/^void Film::clear(void)$/;"	f	class:Film	signature:(void)
Film::clear	backup/Film.h	/^        void clear();$/;"	p	class:Film	access:public	signature:()
Film::counter	Film.h	/^        unsigned int counter;$/;"	m	class:Film	access:private
Film::counter	backup/Film.h	/^        unsigned int counter;$/;"	m	class:Film	access:private
Film::getHeight	Film.cc	/^unsigned int Film::getHeight(void) const$/;"	f	class:Film	signature:(void) const
Film::getHeight	Film.h	/^        unsigned int getHeight() const;$/;"	p	class:Film	access:public	signature:() const
Film::getHeight	backup/Film.cc	/^unsigned int Film::getHeight(void) const$/;"	f	class:Film	signature:(void) const
Film::getHeight	backup/Film.h	/^        unsigned int getHeight() const;$/;"	p	class:Film	access:public	signature:() const
Film::getMaxSamples	Film.cc	/^unsigned int Film::getMaxSamples() const$/;"	f	class:Film	signature:() const
Film::getMaxSamples	Film.h	/^        unsigned int getMaxSamples() const; $/;"	p	class:Film	access:public	signature:() const
Film::getMaxSamples	backup/Film.cc	/^unsigned int Film::getMaxSamples() const$/;"	f	class:Film	signature:() const
Film::getMaxSamples	backup/Film.h	/^        unsigned int getMaxSamples() const; $/;"	p	class:Film	access:public	signature:() const
Film::getMinSamples	Film.cc	/^unsigned int Film::getMinSamples(RectangleInfo *area) const$/;"	f	class:Film	signature:(RectangleInfo *area) const
Film::getMinSamples	Film.h	/^        unsigned int getMinSamples(RectangleInfo *) const; $/;"	p	class:Film	access:public	signature:(RectangleInfo *) const
Film::getMinSamples	backup/Film.cc	/^unsigned int Film::getMinSamples(RectangleInfo *area) const$/;"	f	class:Film	signature:(RectangleInfo *area) const
Film::getMinSamples	backup/Film.h	/^        unsigned int getMinSamples(RectangleInfo *) const; $/;"	p	class:Film	access:public	signature:(RectangleInfo *) const
Film::getSamples	Film.cc	/^unsigned int Film::getSamples(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
Film::getSamples	Film.h	/^        unsigned int getSamples(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
Film::getSamples	backup/Film.cc	/^unsigned int Film::getSamples(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
Film::getSamples	backup/Film.h	/^        unsigned int getSamples(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
Film::getWidth	Film.cc	/^unsigned int Film::getWidth(void) const$/;"	f	class:Film	signature:(void) const
Film::getWidth	Film.h	/^        unsigned int getWidth() const;$/;"	p	class:Film	access:public	signature:() const
Film::getWidth	backup/Film.cc	/^unsigned int Film::getWidth(void) const$/;"	f	class:Film	signature:(void) const
Film::getWidth	backup/Film.h	/^        unsigned int getWidth() const;$/;"	p	class:Film	access:public	signature:() const
Film::height	Film.h	/^        unsigned int height;$/;"	m	class:Film	access:private
Film::height	backup/Film.h	/^        unsigned int height;$/;"	m	class:Film	access:private
Film::operator +=	Film.cc	/^Film& Film::operator+=(const Film& film)$/;"	f	class:Film	signature:(const Film& film)
Film::operator +=	Film.h	/^        Film& operator+=(const Film&);$/;"	p	class:Film	access:public	signature:(const Film&)
Film::operator +=	backup/Film.cc	/^Film& Film::operator+=(const Film& film)$/;"	f	class:Film	signature:(const Film& film)
Film::operator +=	backup/Film.h	/^        Film& operator+=(const Film&);$/;"	p	class:Film	access:public	signature:(const Film&)
Film::operator =	Film.cc	/^Film& Film::operator=(const Film& film)$/;"	f	class:Film	signature:(const Film& film)
Film::operator =	Film.h	/^        Film& operator=(const Film&);$/;"	p	class:Film	access:public	signature:(const Film&)
Film::operator =	backup/Film.cc	/^Film& Film::operator=(const Film& film)$/;"	f	class:Film	signature:(const Film& film)
Film::operator =	backup/Film.h	/^        Film& operator=(const Film&);$/;"	p	class:Film	access:public	signature:(const Film&)
Film::pixelValue	Film.cc	/^char Film::pixelValue(myFloat value) const$/;"	f	class:Film	signature:(myFloat value) const
Film::pixelValue	Film.h	/^        char pixelValue(myFloat) const;$/;"	p	class:Film	access:public	signature:(myFloat) const
Film::pixelValue	backup/Film.cc	/^char Film::pixelValue(myFloat value) const$/;"	f	class:Film	signature:(myFloat value) const
Film::pixelValue	backup/Film.h	/^        char pixelValue(myFloat) const;$/;"	p	class:Film	access:public	signature:(myFloat) const
Film::radianceSamples	Film.h	/^        unsigned int *radianceSamples;$/;"	m	class:Film	access:private
Film::radianceSamples	backup/Film.h	/^        unsigned int *radianceSamples;$/;"	m	class:Film	access:private
Film::radianceValues	Film.h	/^        Vector *radianceValues;$/;"	m	class:Film	access:private
Film::radianceValues	backup/Film.h	/^        Vector *radianceValues;$/;"	m	class:Film	access:private
Film::readBrightness	Film.cc	/^myFloat Film::readBrightness(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
Film::readBrightness	Film.h	/^        myFloat readBrightness(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
Film::readBrightness	backup/Film.cc	/^myFloat Film::readBrightness(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
Film::readBrightness	backup/Film.h	/^        myFloat readBrightness(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
Film::readRadiance	Film.cc	/^Vector Film::readRadiance(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
Film::readRadiance	Film.h	/^        Vector readRadiance(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
Film::readRadiance	backup/Film.cc	/^Vector Film::readRadiance(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
Film::readRadiance	backup/Film.h	/^        Vector readRadiance(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
Film::save	Film.cc	/^void Film::save(std::string fileName, char *pixelData)$/;"	f	class:Film	signature:(std::string fileName, char *pixelData)
Film::save	Film.h	/^        void save(std::string, char *);$/;"	p	class:Film	access:public	signature:(std::string, char *)
Film::save	backup/Film.cc	/^void Film::save(std::string fileName, char *pixelData)$/;"	f	class:Film	signature:(std::string fileName, char *pixelData)
Film::save	backup/Film.h	/^        void save(std::string, char *);$/;"	p	class:Film	access:public	signature:(std::string, char *)
Film::width	Film.h	/^        unsigned int width;$/;"	m	class:Film	access:private
Film::width	backup/Film.h	/^        unsigned int width;$/;"	m	class:Film	access:private
Film::writeRadiance	Film.cc	/^void Film::writeRadiance(unsigned int x, unsigned int y, Vector radiance)$/;"	f	class:Film	signature:(unsigned int x, unsigned int y, Vector radiance)
Film::writeRadiance	Film.h	/^        void writeRadiance(unsigned int, unsigned int, Vector);$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int, Vector)
Film::writeRadiance	backup/Film.cc	/^void Film::writeRadiance(unsigned int x, unsigned int y, Vector radiance)$/;"	f	class:Film	signature:(unsigned int x, unsigned int y, Vector radiance)
Film::writeRadiance	backup/Film.h	/^        void writeRadiance(unsigned int, unsigned int, Vector);$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int, Vector)
Film::~Film	Film.cc	/^Film::~Film(void)$/;"	f	class:Film	signature:(void)
Film::~Film	Film.h	/^        ~Film();$/;"	p	class:Film	access:public	signature:()
Film::~Film	backup/Film.cc	/^Film::~Film(void)$/;"	f	class:Film	signature:(void)
Film::~Film	backup/Film.h	/^        ~Film();$/;"	p	class:Film	access:public	signature:()
GAMMA	Vector.h	14;"	d
GAMMA	backup/Vector.h	14;"	d
GLOSSY	backup/main.cc	11;"	d	file:
GLOSSY	main.cc	11;"	d	file:
GRID	Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon6
GRID	backup/Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon3
INTERSECTION_H	Intersection.h	2;"	d
INTERSECTION_H	backup/Intersection.h	2;"	d
Intersection	Intersection.h	/^struct Intersection$/;"	s
Intersection	backup/Intersection.h	/^struct Intersection$/;"	s
Intersection::distance	Intersection.h	/^    myFloat distance;$/;"	m	struct:Intersection	access:public
Intersection::distance	backup/Intersection.h	/^    myFloat distance;$/;"	m	struct:Intersection	access:public
Intersection::normal	Intersection.h	/^    myFloat normal;$/;"	m	struct:Intersection	access:public
Intersection::normal	backup/Intersection.h	/^    myFloat normal;$/;"	m	struct:Intersection	access:public
Intersection::object	Intersection.h	/^    Object *object;$/;"	m	struct:Intersection	access:public
Intersection::object	backup/Intersection.h	/^    Object *object;$/;"	m	struct:Intersection	access:public
KDNODE_H	KDNode.h	2;"	d
KDNODE_H	backup/KDNode.h	2;"	d
KDNode	KDNode.h	/^struct KDNode$/;"	s
KDNode	backup/KDNode.h	/^struct KDNode$/;"	s
KDNode::__anon1::children	backup/KDNode.h	/^        struct KDNode *children; \/\/8bytes$/;"	m	union:KDNode::__anon1	typeref:struct:KDNode::__anon1::KDNode	access:public
KDNode::__anon1::objects	backup/KDNode.h	/^        std::vector<AABBox*> *objects ; \/\/8bytes$/;"	m	union:KDNode::__anon1	access:public
KDNode::__anon4::children	KDNode.h	/^        struct KDNode *children; \/\/8bytes$/;"	m	union:KDNode::__anon4	typeref:struct:KDNode::__anon4::KDNode	access:public
KDNode::__anon4::objects	KDNode.h	/^        std::vector<AABBox*> *objects ; \/\/8bytes$/;"	m	union:KDNode::__anon4	access:public
KDNode::axis	KDNode.h	/^    Axes axis; \/\/4 bytes$/;"	m	struct:KDNode	access:public
KDNode::axis	backup/KDNode.h	/^    Axes axis; \/\/4 bytes$/;"	m	struct:KDNode	access:public
KDNode::splitPosition	KDNode.h	/^    myFloat splitPosition; \/\/4 bytes $/;"	m	struct:KDNode	access:public
KDNode::splitPosition	backup/KDNode.h	/^    myFloat splitPosition; \/\/4 bytes $/;"	m	struct:KDNode	access:public
KDSPLITELEMENT	KDSplitElement.h	2;"	d
KDSPLITELEMENT	backup/KDSplitElement.h	2;"	d
KDSTACKELEMENT	KDStackElement.h	2;"	d
KDSTACKELEMENT	backup/KDStackElement.h	2;"	d
KDSplitElement	KDSplitElement.h	/^    KDSplitElement(myFloat position, AABBox *bBox, splitType type) : position(position), bBox(bBox), type(type)$/;"	f	struct:KDSplitElement	access:public	signature:(myFloat position, AABBox *bBox, splitType type)
KDSplitElement	KDSplitElement.h	/^struct KDSplitElement$/;"	s
KDSplitElement	backup/KDSplitElement.h	/^    KDSplitElement(myFloat position, AABBox *bBox, splitType type) : position(position), bBox(bBox), type(type)$/;"	f	struct:KDSplitElement	access:public	signature:(myFloat position, AABBox *bBox, splitType type)
KDSplitElement	backup/KDSplitElement.h	/^struct KDSplitElement$/;"	s
KDSplitElement::KDSplitElement	KDSplitElement.h	/^    KDSplitElement(myFloat position, AABBox *bBox, splitType type) : position(position), bBox(bBox), type(type)$/;"	f	struct:KDSplitElement	access:public	signature:(myFloat position, AABBox *bBox, splitType type)
KDSplitElement::KDSplitElement	backup/KDSplitElement.h	/^    KDSplitElement(myFloat position, AABBox *bBox, splitType type) : position(position), bBox(bBox), type(type)$/;"	f	struct:KDSplitElement	access:public	signature:(myFloat position, AABBox *bBox, splitType type)
KDSplitElement::bBox	KDSplitElement.h	/^    AABBox *bBox;$/;"	m	struct:KDSplitElement	access:public
KDSplitElement::bBox	backup/KDSplitElement.h	/^    AABBox *bBox;$/;"	m	struct:KDSplitElement	access:public
KDSplitElement::operator <	KDSplitElement.h	/^    bool operator<(const KDSplitElement &kDSplitElement) const$/;"	f	struct:KDSplitElement	access:public	signature:(const KDSplitElement &kDSplitElement) const
KDSplitElement::operator <	backup/KDSplitElement.h	/^    bool operator<(const KDSplitElement &kDSplitElement) const$/;"	f	struct:KDSplitElement	access:public	signature:(const KDSplitElement &kDSplitElement) const
KDSplitElement::position	KDSplitElement.h	/^    myFloat position;$/;"	m	struct:KDSplitElement	access:public
KDSplitElement::position	backup/KDSplitElement.h	/^    myFloat position;$/;"	m	struct:KDSplitElement	access:public
KDSplitElement::type	KDSplitElement.h	/^    splitType type;$/;"	m	struct:KDSplitElement	access:public
KDSplitElement::type	backup/KDSplitElement.h	/^    splitType type;$/;"	m	struct:KDSplitElement	access:public
KDStackElement	KDStackElement.h	/^struct KDStackElement$/;"	s
KDStackElement	backup/KDStackElement.h	/^struct KDStackElement$/;"	s
KDStackElement::distance	KDStackElement.h	/^    myFloat distance;$/;"	m	struct:KDStackElement	access:public
KDStackElement::distance	backup/KDStackElement.h	/^    myFloat distance;$/;"	m	struct:KDStackElement	access:public
KDStackElement::node	KDStackElement.h	/^    KDNode *node;$/;"	m	struct:KDStackElement	access:public
KDStackElement::node	backup/KDStackElement.h	/^    KDNode *node;$/;"	m	struct:KDStackElement	access:public
KDStackElement::point	KDStackElement.h	/^    Point point;$/;"	m	struct:KDStackElement	access:public
KDStackElement::point	backup/KDStackElement.h	/^    Point point;$/;"	m	struct:KDStackElement	access:public
KDStackElement::previousElement	KDStackElement.h	/^    unsigned int previousElement;$/;"	m	struct:KDStackElement	access:public
KDStackElement::previousElement	backup/KDStackElement.h	/^    unsigned int previousElement;$/;"	m	struct:KDStackElement	access:public
KDTREE_H	KDTree.h	2;"	d
KDTREE_H	backup/KDTree.h	2;"	d
KDTree	KDTree.cc	/^KDTree::KDTree(std::vector<AABBox*>& objects, std::vector<Object*>& nonBoundableObjects, AABBox& bounds) : nonBoundableObjects(nonBoundableObjects)$/;"	f	class:KDTree	signature:(std::vector<AABBox*>& objects, std::vector<Object*>& nonBoundableObjects, AABBox& bounds)
KDTree	KDTree.h	/^        KDTree(std::vector<AABBox*>&, std::vector<Object*>&, AABBox&);$/;"	p	class:KDTree	access:public	signature:(std::vector<AABBox*>&, std::vector<Object*>&, AABBox&)
KDTree	KDTree.h	/^class KDTree$/;"	c
KDTree	backup/KDTree.cc	/^KDTree::KDTree(std::vector<AABBox*>& objects, std::vector<Object*>& nonBoundableObjects, AABBox& bounds) : nonBoundableObjects(nonBoundableObjects)$/;"	f	class:KDTree	signature:(std::vector<AABBox*>& objects, std::vector<Object*>& nonBoundableObjects, AABBox& bounds)
KDTree	backup/KDTree.h	/^        KDTree(std::vector<AABBox*>&, std::vector<Object*>&, AABBox&);$/;"	p	class:KDTree	access:public	signature:(std::vector<AABBox*>&, std::vector<Object*>&, AABBox&)
KDTree	backup/KDTree.h	/^class KDTree$/;"	c
KDTree::KDTree	KDTree.cc	/^KDTree::KDTree(std::vector<AABBox*>& objects, std::vector<Object*>& nonBoundableObjects, AABBox& bounds) : nonBoundableObjects(nonBoundableObjects)$/;"	f	class:KDTree	signature:(std::vector<AABBox*>& objects, std::vector<Object*>& nonBoundableObjects, AABBox& bounds)
KDTree::KDTree	KDTree.h	/^        KDTree(std::vector<AABBox*>&, std::vector<Object*>&, AABBox&);$/;"	p	class:KDTree	access:public	signature:(std::vector<AABBox*>&, std::vector<Object*>&, AABBox&)
KDTree::KDTree	backup/KDTree.cc	/^KDTree::KDTree(std::vector<AABBox*>& objects, std::vector<Object*>& nonBoundableObjects, AABBox& bounds) : nonBoundableObjects(nonBoundableObjects)$/;"	f	class:KDTree	signature:(std::vector<AABBox*>& objects, std::vector<Object*>& nonBoundableObjects, AABBox& bounds)
KDTree::KDTree	backup/KDTree.h	/^        KDTree(std::vector<AABBox*>&, std::vector<Object*>&, AABBox&);$/;"	p	class:KDTree	access:public	signature:(std::vector<AABBox*>&, std::vector<Object*>&, AABBox&)
KDTree::destroy	KDTree.cc	/^void KDTree::destroy(KDNode *node)$/;"	f	class:KDTree	signature:(KDNode *node)
KDTree::destroy	KDTree.h	/^        void destroy(KDNode *);$/;"	p	class:KDTree	access:private	signature:(KDNode *)
KDTree::destroy	backup/KDTree.cc	/^void KDTree::destroy(KDNode *node)$/;"	f	class:KDTree	signature:(KDNode *node)
KDTree::destroy	backup/KDTree.h	/^        void destroy(KDNode *);$/;"	p	class:KDTree	access:private	signature:(KDNode *)
KDTree::intersect	KDTree.cc	/^bool KDTree::intersect(Ray& ray, const AABBox& bounds, Intersection& iInfo, myFloat minDistance) const$/;"	f	class:KDTree	signature:(Ray& ray, const AABBox& bounds, Intersection& iInfo, myFloat minDistance) const
KDTree::intersect	KDTree.h	/^        bool intersect(Ray&, const AABBox&, Intersection&, myFloat = MIN_FLOAT) const;$/;"	p	class:KDTree	access:public	signature:(Ray&, const AABBox&, Intersection&, myFloat = MIN_FLOAT) const
KDTree::intersect	backup/KDTree.cc	/^bool KDTree::intersect(Ray& ray, const AABBox& bounds, Intersection& iInfo, myFloat minDistance) const$/;"	f	class:KDTree	signature:(Ray& ray, const AABBox& bounds, Intersection& iInfo, myFloat minDistance) const
KDTree::intersect	backup/KDTree.h	/^        bool intersect(Ray&, const AABBox&, Intersection&, myFloat = MIN_FLOAT) const;$/;"	p	class:KDTree	access:public	signature:(Ray&, const AABBox&, Intersection&, myFloat = MIN_FLOAT) const
KDTree::leafCount	KDTree.cc	/^unsigned int KDTree::leafCount() const$/;"	f	class:KDTree	signature:() const
KDTree::leafCount	KDTree.cc	/^unsigned int KDTree::leafCount(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
KDTree::leafCount	KDTree.h	/^        unsigned int leafCount() const;$/;"	p	class:KDTree	access:public	signature:() const
KDTree::leafCount	KDTree.h	/^        unsigned int leafCount(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
KDTree::leafCount	backup/KDTree.cc	/^unsigned int KDTree::leafCount() const$/;"	f	class:KDTree	signature:() const
KDTree::leafCount	backup/KDTree.cc	/^unsigned int KDTree::leafCount(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
KDTree::leafCount	backup/KDTree.h	/^        unsigned int leafCount() const;$/;"	p	class:KDTree	access:public	signature:() const
KDTree::leafCount	backup/KDTree.h	/^        unsigned int leafCount(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
KDTree::maxDepth	KDTree.cc	/^unsigned int KDTree::maxDepth() const$/;"	f	class:KDTree	signature:() const
KDTree::maxDepth	KDTree.cc	/^unsigned int KDTree::maxDepth(KDNode *node, unsigned int depth) const$/;"	f	class:KDTree	signature:(KDNode *node, unsigned int depth) const
KDTree::maxDepth	KDTree.h	/^        unsigned int maxDepth() const;$/;"	p	class:KDTree	access:public	signature:() const
KDTree::maxDepth	KDTree.h	/^        unsigned int maxDepth(KDNode *, unsigned int) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *, unsigned int) const
KDTree::maxDepth	backup/KDTree.cc	/^unsigned int KDTree::maxDepth() const$/;"	f	class:KDTree	signature:() const
KDTree::maxDepth	backup/KDTree.cc	/^unsigned int KDTree::maxDepth(KDNode *node, unsigned int depth) const$/;"	f	class:KDTree	signature:(KDNode *node, unsigned int depth) const
KDTree::maxDepth	backup/KDTree.h	/^        unsigned int maxDepth() const;$/;"	p	class:KDTree	access:public	signature:() const
KDTree::maxDepth	backup/KDTree.h	/^        unsigned int maxDepth(KDNode *, unsigned int) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *, unsigned int) const
KDTree::maxLeafPopulation	KDTree.cc	/^unsigned int KDTree::maxLeafPopulation() const$/;"	f	class:KDTree	signature:() const
KDTree::maxLeafPopulation	KDTree.cc	/^unsigned int KDTree::maxLeafPopulation(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
KDTree::maxLeafPopulation	KDTree.h	/^        unsigned int maxLeafPopulation() const;$/;"	p	class:KDTree	access:public	signature:() const
KDTree::maxLeafPopulation	KDTree.h	/^        unsigned int maxLeafPopulation(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
KDTree::maxLeafPopulation	backup/KDTree.cc	/^unsigned int KDTree::maxLeafPopulation() const$/;"	f	class:KDTree	signature:() const
KDTree::maxLeafPopulation	backup/KDTree.cc	/^unsigned int KDTree::maxLeafPopulation(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
KDTree::maxLeafPopulation	backup/KDTree.h	/^        unsigned int maxLeafPopulation() const;$/;"	p	class:KDTree	access:public	signature:() const
KDTree::maxLeafPopulation	backup/KDTree.h	/^        unsigned int maxLeafPopulation(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
KDTree::nodeArea	KDTree.cc	/^myFloat KDTree::nodeArea(Point& P1, Point& P2) const$/;"	f	class:KDTree	signature:(Point& P1, Point& P2) const
KDTree::nodeArea	KDTree.h	/^        myFloat nodeArea(Point&, Point&) const;$/;"	p	class:KDTree	access:private	signature:(Point&, Point&) const
KDTree::nodeArea	backup/KDTree.cc	/^myFloat KDTree::nodeArea(Point& P1, Point& P2) const$/;"	f	class:KDTree	signature:(Point& P1, Point& P2) const
KDTree::nodeArea	backup/KDTree.h	/^        myFloat nodeArea(Point&, Point&) const;$/;"	p	class:KDTree	access:private	signature:(Point&, Point&) const
KDTree::nodeCount	KDTree.cc	/^unsigned int KDTree::nodeCount() const$/;"	f	class:KDTree	signature:() const
KDTree::nodeCount	KDTree.cc	/^unsigned int KDTree::nodeCount(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
KDTree::nodeCount	KDTree.h	/^        unsigned int nodeCount() const;$/;"	p	class:KDTree	access:public	signature:() const
KDTree::nodeCount	KDTree.h	/^        unsigned int nodeCount(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
KDTree::nodeCount	backup/KDTree.cc	/^unsigned int KDTree::nodeCount() const$/;"	f	class:KDTree	signature:() const
KDTree::nodeCount	backup/KDTree.cc	/^unsigned int KDTree::nodeCount(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
KDTree::nodeCount	backup/KDTree.h	/^        unsigned int nodeCount() const;$/;"	p	class:KDTree	access:public	signature:() const
KDTree::nodeCount	backup/KDTree.h	/^        unsigned int nodeCount(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
KDTree::nonBoundableObjects	KDTree.h	/^        std::vector<Object*> nonBoundableObjects;$/;"	m	class:KDTree	access:private
KDTree::nonBoundableObjects	backup/KDTree.h	/^        std::vector<Object*> nonBoundableObjects;$/;"	m	class:KDTree	access:private
KDTree::populate	KDTree.cc	/^void KDTree::populate(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& bBoxes, unsigned int depth)$/;"	f	class:KDTree	signature:(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& bBoxes, unsigned int depth)
KDTree::populate	KDTree.cc	/^void KDTree::populate(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& objects, unsigned int depth)$/;"	f	class:KDTree	signature:(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& objects, unsigned int depth)
KDTree::populate	KDTree.h	/^        void populate(KDNode *, Point& P1, Point& P2, std::vector<AABBox*>&, unsigned int);$/;"	p	class:KDTree	access:private	signature:(KDNode *, Point& P1, Point& P2, std::vector<AABBox*>&, unsigned int)
KDTree::populate	backup/KDTree.cc	/^void KDTree::populate(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& bBoxes, unsigned int depth)$/;"	f	class:KDTree	signature:(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& bBoxes, unsigned int depth)
KDTree::populate	backup/KDTree.cc	/^void KDTree::populate(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& objects, unsigned int depth)$/;"	f	class:KDTree	signature:(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& objects, unsigned int depth)
KDTree::populate	backup/KDTree.h	/^        void populate(KDNode *, Point& P1, Point& P2, std::vector<AABBox*>&, unsigned int);$/;"	p	class:KDTree	access:private	signature:(KDNode *, Point& P1, Point& P2, std::vector<AABBox*>&, unsigned int)
KDTree::root	KDTree.h	/^        KDNode *root;$/;"	m	class:KDTree	access:private
KDTree::root	backup/KDTree.h	/^        KDNode *root;$/;"	m	class:KDTree	access:private
KDTree::~KDTree	KDTree.cc	/^KDTree::~KDTree()$/;"	f	class:KDTree	signature:()
KDTree::~KDTree	KDTree.h	/^        ~KDTree();$/;"	p	class:KDTree	access:public	signature:()
KDTree::~KDTree	backup/KDTree.cc	/^KDTree::~KDTree()$/;"	f	class:KDTree	signature:()
KDTree::~KDTree	backup/KDTree.h	/^        ~KDTree();$/;"	p	class:KDTree	access:public	signature:()
LBOUND	SkyDome.cc	77;"	d	file:
LBOUND	backup/SkyDome.cc	77;"	d	file:
LEAF	KDNode.h	/^enum Axes {XAXIS, YAXIS, ZAXIS, LEAF};$/;"	e	enum:Axes
LEAF	backup/KDNode.h	/^enum Axes {XAXIS, YAXIS, ZAXIS, LEAF};$/;"	e	enum:Axes
LEFT	KDSplitElement.h	/^enum splitType {LEFT, RIGHT};$/;"	e	enum:splitType
LEFT	backup/KDSplitElement.h	/^enum splitType {LEFT, RIGHT};$/;"	e	enum:splitType
M3	World.cc	449;"	d	file:
M3	backup/World.cc	449;"	d	file:
MAKEFLAGS	Makefile	/^MAKEFLAGS = -j2$/;"	m
MATERIAL_H	Material.h	2;"	d
MATERIAL_H	backup/Material.h	2;"	d
MATRIX4x4_H	Matrix.h	2;"	d
MATRIX4x4_H	backup/Matrix.h	2;"	d
MAXDEPTH	KDTree.cc	9;"	d	file:
MAXDEPTH	backup/KDTree.cc	9;"	d	file:
MAXOBJECTS	KDTree.cc	8;"	d	file:
MAXOBJECTS	backup/KDTree.cc	8;"	d	file:
MAX_FLOAT	Vector.h	12;"	d
MAX_FLOAT	backup/Vector.h	12;"	d
MAX_HEIGHT	backup/main.cc	236;"	d	file:
MAX_HEIGHT	main.cc	236;"	d	file:
MB	World.cc	380;"	d	file:
MB	backup/World.cc	380;"	d	file:
MESH_H	Mesh.h	2;"	d
MESH_H	backup/Mesh.h	2;"	d
MIN_FLOAT	Vector.h	13;"	d
MIN_FLOAT	backup/Vector.h	13;"	d
MIN_HEIGHT	backup/main.cc	237;"	d	file:
MIN_HEIGHT	main.cc	237;"	d	file:
MT	Random.h	/^        unsigned int MT[624];$/;"	m	class:Random	access:private
MT	backup/Random.h	/^        unsigned int MT[624];$/;"	m	class:Random	access:private
MTIndex	Random.h	/^        int MTIndex;$/;"	m	class:Random	access:private
MTIndex	backup/Random.h	/^        int MTIndex;$/;"	m	class:Random	access:private
Material	Material.h	/^        Material() : pigmentScale(1.0), emitting(false), specularCoef(0.0), glossiness(1.0), refractiveCoef(0.0), refractiveIndex(1.0)$/;"	f	class:Material	access:public	signature:()
Material	Material.h	/^class Material$/;"	c
Material	backup/Material.h	/^        Material() : pigmentScale(1.0), emitting(false), specularCoef(0.0), glossiness(1.0), refractiveCoef(0.0), refractiveIndex(1.0)$/;"	f	class:Material	access:public	signature:()
Material	backup/Material.h	/^class Material$/;"	c
Material::CHECKERS	Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon6
Material::CHECKERS	backup/Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon3
Material::GRID	Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon6
Material::GRID	backup/Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon3
Material::Material	Material.h	/^        Material() : pigmentScale(1.0), emitting(false), specularCoef(0.0), glossiness(1.0), refractiveCoef(0.0), refractiveIndex(1.0)$/;"	f	class:Material	access:public	signature:()
Material::Material	backup/Material.h	/^        Material() : pigmentScale(1.0), emitting(false), specularCoef(0.0), glossiness(1.0), refractiveCoef(0.0), refractiveIndex(1.0)$/;"	f	class:Material	access:public	signature:()
Material::SOLID	Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon6
Material::SOLID	backup/Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon3
Material::colors	Material.h	/^        std::vector<Vector> colors;$/;"	m	class:Material	access:private
Material::colors	backup/Material.h	/^        std::vector<Vector> colors;$/;"	m	class:Material	access:private
Material::emitting	Material.h	/^        bool emitting;$/;"	m	class:Material	access:private
Material::emitting	backup/Material.h	/^        bool emitting;$/;"	m	class:Material	access:private
Material::getColor	Material.h	/^        Vector getColor(Point& p) const$/;"	f	class:Material	access:public	signature:(Point& p) const
Material::getColor	backup/Material.h	/^        Vector getColor(Point& p) const$/;"	f	class:Material	access:public	signature:(Point& p) const
Material::getGlossiness	Material.h	/^        myFloat getGlossiness(void) const$/;"	f	class:Material	access:public	signature:(void) const
Material::getGlossiness	backup/Material.h	/^        myFloat getGlossiness(void) const$/;"	f	class:Material	access:public	signature:(void) const
Material::getRefractiveCoef	Material.h	/^        myFloat getRefractiveCoef(void) const$/;"	f	class:Material	access:public	signature:(void) const
Material::getRefractiveCoef	backup/Material.h	/^        myFloat getRefractiveCoef(void) const$/;"	f	class:Material	access:public	signature:(void) const
Material::getRefractiveIndex	Material.h	/^        myFloat getRefractiveIndex(void) const$/;"	f	class:Material	access:public	signature:(void) const
Material::getRefractiveIndex	backup/Material.h	/^        myFloat getRefractiveIndex(void) const$/;"	f	class:Material	access:public	signature:(void) const
Material::getSpecularCoef	Material.h	/^        myFloat getSpecularCoef(void) const$/;"	f	class:Material	access:public	signature:(void) const
Material::getSpecularCoef	backup/Material.h	/^        myFloat getSpecularCoef(void) const$/;"	f	class:Material	access:public	signature:(void) const
Material::glossiness	Material.h	/^        myFloat glossiness;$/;"	m	class:Material	access:private
Material::glossiness	backup/Material.h	/^        myFloat glossiness;$/;"	m	class:Material	access:private
Material::isEmitting	Material.h	/^        bool isEmitting(void) const$/;"	f	class:Material	access:public	signature:(void) const
Material::isEmitting	backup/Material.h	/^        bool isEmitting(void) const$/;"	f	class:Material	access:public	signature:(void) const
Material::pigmentScale	Material.h	/^        myFloat pigmentScale;$/;"	m	class:Material	access:private
Material::pigmentScale	backup/Material.h	/^        myFloat pigmentScale;$/;"	m	class:Material	access:private
Material::pigmentType	Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	m	class:Material	typeref:enum:Material::__anon6	access:private
Material::pigmentType	backup/Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	m	class:Material	typeref:enum:Material::__anon3	access:private
Material::refractiveCoef	Material.h	/^        myFloat refractiveCoef;$/;"	m	class:Material	access:private
Material::refractiveCoef	backup/Material.h	/^        myFloat refractiveCoef;$/;"	m	class:Material	access:private
Material::refractiveIndex	Material.h	/^        myFloat refractiveIndex;$/;"	m	class:Material	access:private
Material::refractiveIndex	backup/Material.h	/^        myFloat refractiveIndex;$/;"	m	class:Material	access:private
Material::setEmitting	Material.h	/^        void setEmitting(bool emission)$/;"	f	class:Material	access:public	signature:(bool emission)
Material::setEmitting	backup/Material.h	/^        void setEmitting(bool emission)$/;"	f	class:Material	access:public	signature:(bool emission)
Material::setGlossiness	Material.h	/^        void setGlossiness(myFloat roughness)$/;"	f	class:Material	access:public	signature:(myFloat roughness)
Material::setGlossiness	backup/Material.h	/^        void setGlossiness(myFloat roughness)$/;"	f	class:Material	access:public	signature:(myFloat roughness)
Material::setPigmentCheckers	Material.h	/^        void setPigmentCheckers(Vector color1, Vector color2)$/;"	f	class:Material	access:public	signature:(Vector color1, Vector color2)
Material::setPigmentCheckers	backup/Material.h	/^        void setPigmentCheckers(Vector color1, Vector color2)$/;"	f	class:Material	access:public	signature:(Vector color1, Vector color2)
Material::setPigmentGrid	Material.h	/^        void setPigmentGrid(Vector color1, Vector color2)$/;"	f	class:Material	access:public	signature:(Vector color1, Vector color2)
Material::setPigmentGrid	backup/Material.h	/^        void setPigmentGrid(Vector color1, Vector color2)$/;"	f	class:Material	access:public	signature:(Vector color1, Vector color2)
Material::setPigmentScale	Material.h	/^        void setPigmentScale(myFloat scale)$/;"	f	class:Material	access:public	signature:(myFloat scale)
Material::setPigmentScale	backup/Material.h	/^        void setPigmentScale(myFloat scale)$/;"	f	class:Material	access:public	signature:(myFloat scale)
Material::setPigmentSolid	Material.h	/^        void setPigmentSolid(Vector color)$/;"	f	class:Material	access:public	signature:(Vector color)
Material::setPigmentSolid	backup/Material.h	/^        void setPigmentSolid(Vector color)$/;"	f	class:Material	access:public	signature:(Vector color)
Material::setRefractiveCoef	Material.h	/^        void setRefractiveCoef(myFloat coef)$/;"	f	class:Material	access:public	signature:(myFloat coef)
Material::setRefractiveCoef	backup/Material.h	/^        void setRefractiveCoef(myFloat coef)$/;"	f	class:Material	access:public	signature:(myFloat coef)
Material::setRefractiveIndex	Material.h	/^        void setRefractiveIndex(myFloat index)$/;"	f	class:Material	access:public	signature:(myFloat index)
Material::setRefractiveIndex	backup/Material.h	/^        void setRefractiveIndex(myFloat index)$/;"	f	class:Material	access:public	signature:(myFloat index)
Material::setSpecularCoef	Material.h	/^        void setSpecularCoef(myFloat coef)$/;"	f	class:Material	access:public	signature:(myFloat coef)
Material::setSpecularCoef	backup/Material.h	/^        void setSpecularCoef(myFloat coef)$/;"	f	class:Material	access:public	signature:(myFloat coef)
Material::specularCoef	Material.h	/^        myFloat specularCoef;$/;"	m	class:Material	access:private
Material::specularCoef	backup/Material.h	/^        myFloat specularCoef;$/;"	m	class:Material	access:private
Matrix4x4	Matrix.h	/^        Matrix4x4(const Matrix4x4& _matrix)$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix)
Matrix4x4	Matrix.h	/^        Matrix4x4(const myFloat data[][4])$/;"	f	class:Matrix4x4	access:public	signature:(const myFloat data[][4])
Matrix4x4	Matrix.h	/^        Matrix4x4(void)$/;"	f	class:Matrix4x4	access:public	signature:(void)
Matrix4x4	Matrix.h	/^class Matrix4x4$/;"	c
Matrix4x4	backup/Matrix.h	/^        Matrix4x4(const Matrix4x4& _matrix)$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix)
Matrix4x4	backup/Matrix.h	/^        Matrix4x4(const myFloat data[][4])$/;"	f	class:Matrix4x4	access:public	signature:(const myFloat data[][4])
Matrix4x4	backup/Matrix.h	/^        Matrix4x4(void)$/;"	f	class:Matrix4x4	access:public	signature:(void)
Matrix4x4	backup/Matrix.h	/^class Matrix4x4$/;"	c
Matrix4x4::Matrix4x4	Matrix.h	/^        Matrix4x4(const Matrix4x4& _matrix)$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix)
Matrix4x4::Matrix4x4	Matrix.h	/^        Matrix4x4(const myFloat data[][4])$/;"	f	class:Matrix4x4	access:public	signature:(const myFloat data[][4])
Matrix4x4::Matrix4x4	Matrix.h	/^        Matrix4x4(void)$/;"	f	class:Matrix4x4	access:public	signature:(void)
Matrix4x4::Matrix4x4	backup/Matrix.h	/^        Matrix4x4(const Matrix4x4& _matrix)$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix)
Matrix4x4::Matrix4x4	backup/Matrix.h	/^        Matrix4x4(const myFloat data[][4])$/;"	f	class:Matrix4x4	access:public	signature:(const myFloat data[][4])
Matrix4x4::Matrix4x4	backup/Matrix.h	/^        Matrix4x4(void)$/;"	f	class:Matrix4x4	access:public	signature:(void)
Matrix4x4::inverse	Matrix.h	/^        Matrix4x4 inverse(void) const$/;"	f	class:Matrix4x4	access:public	signature:(void) const
Matrix4x4::inverse	backup/Matrix.h	/^        Matrix4x4 inverse(void) const$/;"	f	class:Matrix4x4	access:public	signature:(void) const
Matrix4x4::matrix	Matrix.h	/^        myFloat matrix[4][4];$/;"	m	class:Matrix4x4	access:public
Matrix4x4::matrix	backup/Matrix.h	/^        myFloat matrix[4][4];$/;"	m	class:Matrix4x4	access:public
Matrix4x4::operator *	Matrix.h	/^        Matrix4x4 operator*(const Matrix4x4& _matrix) const$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix) const
Matrix4x4::operator *	Matrix.h	/^        Point operator*(const Point& point) const$/;"	f	class:Matrix4x4	access:public	signature:(const Point& point) const
Matrix4x4::operator *	Matrix.h	/^        Vector operator*(const Vector& vector) const$/;"	f	class:Matrix4x4	access:public	signature:(const Vector& vector) const
Matrix4x4::operator *	backup/Matrix.h	/^        Matrix4x4 operator*(const Matrix4x4& _matrix) const$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix) const
Matrix4x4::operator *	backup/Matrix.h	/^        Point operator*(const Point& point) const$/;"	f	class:Matrix4x4	access:public	signature:(const Point& point) const
Matrix4x4::operator *	backup/Matrix.h	/^        Vector operator*(const Vector& vector) const$/;"	f	class:Matrix4x4	access:public	signature:(const Vector& vector) const
Matrix4x4::operator =	Matrix.h	/^        Matrix4x4& operator=(const Matrix4x4& _matrix)$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix)
Matrix4x4::operator =	backup/Matrix.h	/^        Matrix4x4& operator=(const Matrix4x4& _matrix)$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix)
Matrix4x4::output	Matrix.h	/^        void output(void) const$/;"	f	class:Matrix4x4	access:public	signature:(void) const
Matrix4x4::output	backup/Matrix.h	/^        void output(void) const$/;"	f	class:Matrix4x4	access:public	signature:(void) const
Matrix4x4::rowMultiply	Matrix.h	/^        void rowMultiply(unsigned int row, myFloat scale)$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int row, myFloat scale)
Matrix4x4::rowMultiply	backup/Matrix.h	/^        void rowMultiply(unsigned int row, myFloat scale)$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int row, myFloat scale)
Matrix4x4::rowSubtract	Matrix.h	/^        void rowSubtract(unsigned int row, myFloat scale, myFloat rowData[4])$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int row, myFloat scale, myFloat rowData[4])
Matrix4x4::rowSubtract	backup/Matrix.h	/^        void rowSubtract(unsigned int row, myFloat scale, myFloat rowData[4])$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int row, myFloat scale, myFloat rowData[4])
Matrix4x4::swapRows	Matrix.h	/^        void swapRows(unsigned int rowA, unsigned int rowB)$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int rowA, unsigned int rowB)
Matrix4x4::swapRows	backup/Matrix.h	/^        void swapRows(unsigned int rowA, unsigned int rowB)$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int rowA, unsigned int rowB)
Mesh	Mesh.h	/^        Mesh();$/;"	p	class:Mesh	access:public	signature:()
Mesh	Mesh.h	/^class Mesh : public Object$/;"	c	inherits:Object
Mesh	backup/Mesh.h	/^        Mesh();$/;"	p	class:Mesh	access:public	signature:()
Mesh	backup/Mesh.h	/^class Mesh : public Object$/;"	c	inherits:Object
Mesh::Mesh	Mesh.h	/^        Mesh();$/;"	p	class:Mesh	access:public	signature:()
Mesh::Mesh	backup/Mesh.h	/^        Mesh();$/;"	p	class:Mesh	access:public	signature:()
Mesh::triangles	Mesh.h	/^        std::vector<Triangle*> triangles;$/;"	m	class:Mesh	access:private
Mesh::triangles	backup/Mesh.h	/^        std::vector<Triangle*> triangles;$/;"	m	class:Mesh	access:private
Mesh::~Mesh	Mesh.h	/^        ~Mesh();$/;"	p	class:Mesh	access:public	signature:()
Mesh::~Mesh	backup/Mesh.h	/^        ~Mesh();$/;"	p	class:Mesh	access:public	signature:()
NEW	KDTree.cc	51;"	d	file:
NEW	backup/KDTree.cc	51;"	d	file:
OBJECT_H	Object.h	2;"	d
OBJECT_H	backup/Object.h	2;"	d
Object	Object.h	/^        Object(Material *material) :  bSphere(NULL), aABBox(NULL), material(material)$/;"	f	class:Object	access:public	signature:(Material *material)
Object	Object.h	/^class Object$/;"	c
Object	backup/Object.h	/^        Object(Material *material) :  bSphere(NULL), aABBox(NULL), material(material)$/;"	f	class:Object	access:public	signature:(Material *material)
Object	backup/Object.h	/^class Object$/;"	c
Object::Object	Object.h	/^        Object(Material *material) :  bSphere(NULL), aABBox(NULL), material(material)$/;"	f	class:Object	access:public	signature:(Material *material)
Object::Object	backup/Object.h	/^        Object(Material *material) :  bSphere(NULL), aABBox(NULL), material(material)$/;"	f	class:Object	access:public	signature:(Material *material)
Object::aABBox	Object.h	/^        AABBox *aABBox;$/;"	m	class:Object	access:protected
Object::aABBox	backup/Object.h	/^        AABBox *aABBox;$/;"	m	class:Object	access:protected
Object::bSphere	Object.h	/^        BSphere *bSphere;$/;"	m	class:Object	access:protected
Object::bSphere	backup/Object.h	/^        BSphere *bSphere;$/;"	m	class:Object	access:protected
Object::boundByAABBox	Object.h	/^        virtual AABBox *boundByAABBox() { return NULL; }$/;"	f	class:Object	access:public	signature:()
Object::boundByAABBox	backup/Object.h	/^        virtual AABBox *boundByAABBox() { return NULL; }$/;"	f	class:Object	access:public	signature:()
Object::boundByBSphere	Object.h	/^        virtual BSphere *boundByBSphere() { return NULL; }$/;"	f	class:Object	access:public	signature:()
Object::boundByBSphere	backup/Object.h	/^        virtual BSphere *boundByBSphere() { return NULL; }$/;"	f	class:Object	access:public	signature:()
Object::getAABBox	Object.h	/^        AABBox *getAABBox() const$/;"	f	class:Object	access:public	signature:() const
Object::getAABBox	backup/Object.h	/^        AABBox *getAABBox() const$/;"	f	class:Object	access:public	signature:() const
Object::getBSphere	Object.h	/^        BSphere *getBSphere() const$/;"	f	class:Object	access:public	signature:() const
Object::getBSphere	backup/Object.h	/^        BSphere *getBSphere() const$/;"	f	class:Object	access:public	signature:() const
Object::getINormal	backup/Object.h	/^        virtual Vector getINormal(Point) const =0;$/;"	p	class:Object	access:public	signature:(Point) const
Object::getSolidRatio	Object.h	/^        virtual myFloat getSolidRatio(Point&) const {return 0.0;}$/;"	f	class:Object	access:public	signature:(Point&) const
Object::getSolidRatio	backup/Object.h	/^        virtual myFloat getSolidRatio(Point&) const {return 0.0;}$/;"	f	class:Object	access:public	signature:(Point&) const
Object::intersect	Object.h	/^        virtual bool intersect(Ray&, Intersection&) const =0;$/;"	p	class:Object	access:public	signature:(Ray&, Intersection&) const
Object::intersect	backup/Object.h	/^        virtual myFloat intersect(Point, Vector) const =0;$/;"	p	class:Object	access:public	signature:(Point, Vector) const
Object::material	Object.h	/^        Material *material;$/;"	m	class:Object	access:public
Object::material	backup/Object.h	/^        Material *material;$/;"	m	class:Object	access:public
Object::sampleLight	Object.h	/^        virtual Vector sampleLight(Point&, Random&) const {return Vector(0);}$/;"	f	class:Object	access:public	signature:(Point&, Random&) const
Object::sampleLight	backup/Object.h	/^        virtual Vector sampleLight(Point&, Random&) const {return Vector(0);}$/;"	f	class:Object	access:public	signature:(Point&, Random&) const
Object::~Object	Object.h	/^        virtual ~Object() $/;"	f	class:Object	access:public	signature:()
Object::~Object	backup/Object.h	/^        virtual ~Object() $/;"	f	class:Object	access:public	signature:()
P1	AABBox.h	/^        Point P1,P2;$/;"	m	class:AABBox	access:public
P1	Box.h	/^        Point P1, P2;$/;"	m	class:Box	access:private
P1	backup/AABBox.h	/^        Point P1,P2;$/;"	m	class:AABBox	access:public
P1	backup/Box.h	/^        Point P1, P2;$/;"	m	class:Box	access:private
P2	AABBox.h	/^        Point P1,P2;$/;"	m	class:AABBox	access:public
P2	Box.h	/^        Point P1, P2;$/;"	m	class:Box	access:private
P2	backup/AABBox.h	/^        Point P1,P2;$/;"	m	class:AABBox	access:public
P2	backup/Box.h	/^        Point P1, P2;$/;"	m	class:Box	access:private
PLANE_H	Plane.h	2;"	d
PLANE_H	backup/Plane.h	2;"	d
POINT_H	Point.h	2;"	d
POINT_H	backup/Point.h	2;"	d
Plane	Plane.cc	/^Plane::Plane(Material *material, Transformation *transformation) : Object(material), transformation(transformation)$/;"	f	class:Plane	signature:(Material *material, Transformation *transformation)
Plane	Plane.h	/^        Plane(Material *, Transformation *);$/;"	p	class:Plane	access:public	signature:(Material *, Transformation *)
Plane	Plane.h	/^class Plane : public Object$/;"	c	inherits:Object
Plane	backup/Plane.cc	/^Plane::Plane(Material *material, Transformation *transformation) : Object(material), transformation(transformation)$/;"	f	class:Plane	signature:(Material *material, Transformation *transformation)
Plane	backup/Plane.h	/^        Plane(Material *, Transformation *);$/;"	p	class:Plane	access:public	signature:(Material *, Transformation *)
Plane	backup/Plane.h	/^class Plane : public Object$/;"	c	inherits:Object
Plane::Plane	Plane.cc	/^Plane::Plane(Material *material, Transformation *transformation) : Object(material), transformation(transformation)$/;"	f	class:Plane	signature:(Material *material, Transformation *transformation)
Plane::Plane	Plane.h	/^        Plane(Material *, Transformation *);$/;"	p	class:Plane	access:public	signature:(Material *, Transformation *)
Plane::Plane	backup/Plane.cc	/^Plane::Plane(Material *material, Transformation *transformation) : Object(material), transformation(transformation)$/;"	f	class:Plane	signature:(Material *material, Transformation *transformation)
Plane::Plane	backup/Plane.h	/^        Plane(Material *, Transformation *);$/;"	p	class:Plane	access:public	signature:(Material *, Transformation *)
Plane::getINormal	backup/Plane.cc	/^Vector Plane::getINormal(Point worldPoint) const$/;"	f	class:Plane	signature:(Point worldPoint) const
Plane::getINormal	backup/Plane.h	/^        Vector getINormal(Point) const;$/;"	p	class:Plane	access:public	signature:(Point) const
Plane::intersect	Plane.cc	/^myFloat Plane::intersect(Ray& ray, Intersection& intersection) const$/;"	f	class:Plane	signature:(Ray& ray, Intersection& intersection) const
Plane::intersect	Plane.h	/^        bool intersect(Ray&, Intersection&) const;$/;"	p	class:Plane	access:public	signature:(Ray&, Intersection&) const
Plane::intersect	backup/Plane.cc	/^myFloat Plane::intersect(Point worldOrigin, Vector worldDirection) const$/;"	f	class:Plane	signature:(Point worldOrigin, Vector worldDirection) const
Plane::intersect	backup/Plane.h	/^        myFloat intersect(Point, Vector) const;$/;"	p	class:Plane	access:public	signature:(Point, Vector) const
Plane::transformation	Plane.h	/^        Transformation *transformation;$/;"	m	class:Plane	access:private
Plane::transformation	backup/Plane.h	/^        Transformation *transformation;$/;"	m	class:Plane	access:private
Plane::~Plane	Plane.cc	/^Plane::~Plane()$/;"	f	class:Plane	signature:()
Plane::~Plane	Plane.h	/^        ~Plane();$/;"	p	class:Plane	access:public	signature:()
Plane::~Plane	backup/Plane.cc	/^Plane::~Plane()$/;"	f	class:Plane	signature:()
Plane::~Plane	backup/Plane.h	/^        ~Plane();$/;"	p	class:Plane	access:public	signature:()
Point	Point.h	/^        Point(myFloat x, myFloat y, myFloat z) : x(x), y(y), z(z)$/;"	f	class:Point	access:public	signature:(myFloat x, myFloat y, myFloat z)
Point	Point.h	/^        Point(void) : x(0.0), y(0.0), z(0.0)$/;"	f	class:Point	access:public	signature:(void)
Point	Point.h	/^        explicit Point(const Vector& vector) : x(vector.x), y(vector.y), z(vector.z)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
Point	Point.h	/^class Point$/;"	c
Point	backup/Point.h	/^        Point(myFloat x, myFloat y, myFloat z) : x(x), y(y), z(z)$/;"	f	class:Point	access:public	signature:(myFloat x, myFloat y, myFloat z)
Point	backup/Point.h	/^        Point(void) : x(0.0), y(0.0), z(0.0)$/;"	f	class:Point	access:public	signature:(void)
Point	backup/Point.h	/^        explicit Point(const Vector& vector) : x(vector.x), y(vector.y), z(vector.z)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
Point	backup/Point.h	/^class Point$/;"	c
Point::Point	Point.h	/^        Point(myFloat x, myFloat y, myFloat z) : x(x), y(y), z(z)$/;"	f	class:Point	access:public	signature:(myFloat x, myFloat y, myFloat z)
Point::Point	Point.h	/^        Point(void) : x(0.0), y(0.0), z(0.0)$/;"	f	class:Point	access:public	signature:(void)
Point::Point	Point.h	/^        explicit Point(const Vector& vector) : x(vector.x), y(vector.y), z(vector.z)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
Point::Point	backup/Point.h	/^        Point(myFloat x, myFloat y, myFloat z) : x(x), y(y), z(z)$/;"	f	class:Point	access:public	signature:(myFloat x, myFloat y, myFloat z)
Point::Point	backup/Point.h	/^        Point(void) : x(0.0), y(0.0), z(0.0)$/;"	f	class:Point	access:public	signature:(void)
Point::Point	backup/Point.h	/^        explicit Point(const Vector& vector) : x(vector.x), y(vector.y), z(vector.z)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
Point::operator !=	Point.h	/^        bool operator!=(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
Point::operator !=	backup/Point.h	/^        bool operator!=(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
Point::operator *	Point.h	/^        Point operator*(myFloat scale) const$/;"	f	class:Point	access:public	signature:(myFloat scale) const
Point::operator *	Point.h	/^        friend const Point operator*(const myFloat scale, const Point& point)$/;"	f	class:Point	access:friend	signature:(const myFloat scale, const Point& point)
Point::operator *	backup/Point.h	/^        Point operator*(myFloat scale) const$/;"	f	class:Point	access:public	signature:(myFloat scale) const
Point::operator *	backup/Point.h	/^        friend const Point operator*(const myFloat scale, const Point& point)$/;"	f	class:Point	access:friend	signature:(const myFloat scale, const Point& point)
Point::operator *=	Point.h	/^        Point& operator*=(const myFloat divider)$/;"	f	class:Point	access:public	signature:(const myFloat divider)
Point::operator *=	backup/Point.h	/^        Point& operator*=(const myFloat divider)$/;"	f	class:Point	access:public	signature:(const myFloat divider)
Point::operator +	Point.h	/^        Point operator+(const Vector& vector) const$/;"	f	class:Point	access:public	signature:(const Vector& vector) const
Point::operator +	backup/Point.h	/^        Point operator+(const Vector& vector) const$/;"	f	class:Point	access:public	signature:(const Vector& vector) const
Point::operator +=	Point.h	/^        Point& operator+=(const Vector& vector)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
Point::operator +=	backup/Point.h	/^        Point& operator+=(const Vector& vector)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
Point::operator -	Point.h	/^        Point operator-(const Vector& vector) const$/;"	f	class:Point	access:public	signature:(const Vector& vector) const
Point::operator -	Point.h	/^        Vector operator-(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
Point::operator -	backup/Point.h	/^        Point operator-(const Vector& vector) const$/;"	f	class:Point	access:public	signature:(const Vector& vector) const
Point::operator -	backup/Point.h	/^        Vector operator-(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
Point::operator -=	Point.h	/^        Point& operator-=(const Vector& vector)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
Point::operator -=	backup/Point.h	/^        Point& operator-=(const Vector& vector)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
Point::operator /	Point.h	/^        Point operator\/(myFloat divider) const$/;"	f	class:Point	access:public	signature:(myFloat divider) const
Point::operator /	backup/Point.h	/^        Point operator\/(myFloat divider) const$/;"	f	class:Point	access:public	signature:(myFloat divider) const
Point::operator /=	Point.h	/^        Point& operator\/=(const myFloat divider)$/;"	f	class:Point	access:public	signature:(const myFloat divider)
Point::operator /=	backup/Point.h	/^        Point& operator\/=(const myFloat divider)$/;"	f	class:Point	access:public	signature:(const myFloat divider)
Point::operator =	Point.h	/^        Point& operator=(const Point& point)$/;"	f	class:Point	access:public	signature:(const Point& point)
Point::operator =	backup/Point.h	/^        Point& operator=(const Point& point)$/;"	f	class:Point	access:public	signature:(const Point& point)
Point::operator ==	Point.h	/^        bool operator==(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
Point::operator ==	backup/Point.h	/^        bool operator==(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
Point::operator []	Point.h	/^        myFloat& operator[](const unsigned int i)$/;"	f	class:Point	access:public	signature:(const unsigned int i)
Point::operator []	backup/Point.h	/^        myFloat& operator[](const unsigned int i)$/;"	f	class:Point	access:public	signature:(const unsigned int i)
Point::toString	Point.h	/^        std::string toString(void) const$/;"	f	class:Point	access:public	signature:(void) const
Point::toString	backup/Point.h	/^        std::string toString(void) const$/;"	f	class:Point	access:public	signature:(void) const
Point::x	Point.h	/^        myFloat x;$/;"	m	class:Point	access:public
Point::x	backup/Point.h	/^        myFloat x;$/;"	m	class:Point	access:public
Point::y	Point.h	/^        myFloat y;$/;"	m	class:Point	access:public
Point::y	backup/Point.h	/^        myFloat y;$/;"	m	class:Point	access:public
Point::z	Point.h	/^        myFloat z;$/;"	m	class:Point	access:public
Point::z	backup/Point.h	/^        myFloat z;$/;"	m	class:Point	access:public
RANDOM_H	Random.h	2;"	d
RANDOM_H	backup/Random.h	2;"	d
RAY_H	Ray.h	2;"	d
RAY_H	backup/Ray.h	2;"	d
RECTANGLEINFO_H	RectangleInfo.h	2;"	d
RECTANGLEINFO_H	backup/RectangleInfo.h	2;"	d
RENDERER_H	Renderer.h	2;"	d
RENDERER_H	backup/Renderer.h	2;"	d
RENDERTHREAD_H	RenderThread.h	2;"	d
RENDERTHREAD_H	backup/RenderThread.h	2;"	d
RIGHT	KDSplitElement.h	/^enum splitType {LEFT, RIGHT};$/;"	e	enum:splitType
RIGHT	backup/KDSplitElement.h	/^enum splitType {LEFT, RIGHT};$/;"	e	enum:splitType
Random	Random.h	/^        Random(unsigned int seed = 5489UL) : MTIndex(624)$/;"	f	class:Random	access:public	signature:(unsigned int seed = 5489UL)
Random	Random.h	/^class Random$/;"	c
Random	backup/Random.h	/^        Random(unsigned int seed = 5489UL) : MTIndex(624)$/;"	f	class:Random	access:public	signature:(unsigned int seed = 5489UL)
Random	backup/Random.h	/^class Random$/;"	c
Random::MT	Random.h	/^        unsigned int MT[624];$/;"	m	class:Random	access:private
Random::MT	backup/Random.h	/^        unsigned int MT[624];$/;"	m	class:Random	access:private
Random::MTIndex	Random.h	/^        int MTIndex;$/;"	m	class:Random	access:private
Random::MTIndex	backup/Random.h	/^        int MTIndex;$/;"	m	class:Random	access:private
Random::Random	Random.h	/^        Random(unsigned int seed = 5489UL) : MTIndex(624)$/;"	f	class:Random	access:public	signature:(unsigned int seed = 5489UL)
Random::Random	backup/Random.h	/^        Random(unsigned int seed = 5489UL) : MTIndex(624)$/;"	f	class:Random	access:public	signature:(unsigned int seed = 5489UL)
Random::randomNumberClosed	Random.h	/^        myFloat randomNumberClosed(void)$/;"	f	class:Random	access:public	signature:(void)
Random::randomNumberClosed	backup/Random.h	/^        myFloat randomNumberClosed(void)$/;"	f	class:Random	access:public	signature:(void)
Random::randomNumberOpen	Random.h	/^        myFloat randomNumberOpen(void)$/;"	f	class:Random	access:public	signature:(void)
Random::randomNumberOpen	backup/Random.h	/^        myFloat randomNumberOpen(void)$/;"	f	class:Random	access:public	signature:(void)
Random::randomSeed	Random.h	/^        void randomSeed(unsigned int seed)$/;"	f	class:Random	access:public	signature:(unsigned int seed)
Random::randomSeed	backup/Random.h	/^        void randomSeed(unsigned int seed)$/;"	f	class:Random	access:public	signature:(unsigned int seed)
Ray	Ray.h	/^        Ray(Point origin, Vector direction) : origin(origin), direction(direction), min(0.0), max(MAX_FLOAT)$/;"	f	class:Ray	access:public	signature:(Point origin, Vector direction)
Ray	Ray.h	/^class Ray$/;"	c
Ray	backup/Ray.h	/^        Ray(Point origin, Vector direction) : origin(origin), direction(direction), min(0.0), max(MAX_FLOAT)$/;"	f	class:Ray	access:public	signature:(Point origin, Vector direction)
Ray	backup/Ray.h	/^class Ray$/;"	c
Ray::Ray	Ray.h	/^        Ray(Point origin, Vector direction) : origin(origin), direction(direction), min(0.0), max(MAX_FLOAT)$/;"	f	class:Ray	access:public	signature:(Point origin, Vector direction)
Ray::Ray	backup/Ray.h	/^        Ray(Point origin, Vector direction) : origin(origin), direction(direction), min(0.0), max(MAX_FLOAT)$/;"	f	class:Ray	access:public	signature:(Point origin, Vector direction)
Ray::direction	Ray.h	/^        Vector direction;$/;"	m	class:Ray	access:public
Ray::direction	backup/Ray.h	/^        Vector direction;$/;"	m	class:Ray	access:public
Ray::max	Ray.h	/^        myFloat max;$/;"	m	class:Ray	access:public
Ray::max	backup/Ray.h	/^        myFloat max;$/;"	m	class:Ray	access:public
Ray::min	Ray.h	/^        myFloat min;$/;"	m	class:Ray	access:public
Ray::min	backup/Ray.h	/^        myFloat min;$/;"	m	class:Ray	access:public
Ray::origin	Ray.h	/^        Point origin;$/;"	m	class:Ray	access:public
Ray::origin	backup/Ray.h	/^        Point origin;$/;"	m	class:Ray	access:public
RectangleInfo	RectangleInfo.h	/^struct RectangleInfo$/;"	s
RectangleInfo	backup/RectangleInfo.h	/^struct RectangleInfo$/;"	s
RectangleInfo::catchUp	RectangleInfo.h	/^    bool catchUp;$/;"	m	struct:RectangleInfo	access:public
RectangleInfo::catchUp	backup/RectangleInfo.h	/^    bool catchUp;$/;"	m	struct:RectangleInfo	access:public
RectangleInfo::fullScreen	RectangleInfo.h	/^    bool fullScreen;$/;"	m	struct:RectangleInfo	access:public
RectangleInfo::fullScreen	backup/RectangleInfo.h	/^    bool fullScreen;$/;"	m	struct:RectangleInfo	access:public
RectangleInfo::operator !=	RectangleInfo.h	/^    bool operator!=(const RectangleInfo& rectangle) const$/;"	f	struct:RectangleInfo	access:public	signature:(const RectangleInfo& rectangle) const
RectangleInfo::operator !=	backup/RectangleInfo.h	/^    bool operator!=(const RectangleInfo& rectangle) const$/;"	f	struct:RectangleInfo	access:public	signature:(const RectangleInfo& rectangle) const
RectangleInfo::operator ==	RectangleInfo.h	/^    bool operator==(const RectangleInfo& rectangle) const$/;"	f	struct:RectangleInfo	access:public	signature:(const RectangleInfo& rectangle) const
RectangleInfo::operator ==	backup/RectangleInfo.h	/^    bool operator==(const RectangleInfo& rectangle) const$/;"	f	struct:RectangleInfo	access:public	signature:(const RectangleInfo& rectangle) const
RectangleInfo::xend	RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
RectangleInfo::xend	backup/RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
RectangleInfo::xstart	RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
RectangleInfo::xstart	backup/RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
RectangleInfo::yend	RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
RectangleInfo::yend	backup/RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
RectangleInfo::ystart	RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
RectangleInfo::ystart	backup/RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
RenderThread	RenderThread.cc	/^RenderThread::RenderThread(World *world, Camera *camera, RectangleInfo *renderArea) : world(world), camera(camera), film(camera->getFilm()), renderArea(renderArea), threadIndex(threadCount++), rNG(5489UL + threadIndex)$/;"	f	class:RenderThread	signature:(World *world, Camera *camera, RectangleInfo *renderArea)
RenderThread	RenderThread.h	/^        RenderThread(World *, Camera *, RectangleInfo *);$/;"	p	class:RenderThread	access:public	signature:(World *, Camera *, RectangleInfo *)
RenderThread	RenderThread.h	/^class RenderThread : public Thread$/;"	c	inherits:Thread
RenderThread	backup/RenderThread.cc	/^RenderThread::RenderThread(World *world, Camera *camera, RectangleInfo *renderArea) : world(world), camera(camera), film(camera->getFilm()), renderArea(renderArea), threadIndex(threadCount++), rNG(5489UL + threadIndex)$/;"	f	class:RenderThread	signature:(World *world, Camera *camera, RectangleInfo *renderArea)
RenderThread	backup/RenderThread.h	/^        RenderThread(World *, Camera *, RectangleInfo *);$/;"	p	class:RenderThread	access:public	signature:(World *, Camera *, RectangleInfo *)
RenderThread	backup/RenderThread.h	/^class RenderThread : public Thread$/;"	c	inherits:Thread
RenderThread::RenderThread	RenderThread.cc	/^RenderThread::RenderThread(World *world, Camera *camera, RectangleInfo *renderArea) : world(world), camera(camera), film(camera->getFilm()), renderArea(renderArea), threadIndex(threadCount++), rNG(5489UL + threadIndex)$/;"	f	class:RenderThread	signature:(World *world, Camera *camera, RectangleInfo *renderArea)
RenderThread::RenderThread	RenderThread.h	/^        RenderThread(World *, Camera *, RectangleInfo *);$/;"	p	class:RenderThread	access:public	signature:(World *, Camera *, RectangleInfo *)
RenderThread::RenderThread	backup/RenderThread.cc	/^RenderThread::RenderThread(World *world, Camera *camera, RectangleInfo *renderArea) : world(world), camera(camera), film(camera->getFilm()), renderArea(renderArea), threadIndex(threadCount++), rNG(5489UL + threadIndex)$/;"	f	class:RenderThread	signature:(World *world, Camera *camera, RectangleInfo *renderArea)
RenderThread::RenderThread	backup/RenderThread.h	/^        RenderThread(World *, Camera *, RectangleInfo *);$/;"	p	class:RenderThread	access:public	signature:(World *, Camera *, RectangleInfo *)
RenderThread::camera	RenderThread.h	/^        Camera *camera;$/;"	m	class:RenderThread	access:private
RenderThread::camera	backup/RenderThread.h	/^        Camera *camera;$/;"	m	class:RenderThread	access:private
RenderThread::execute	RenderThread.cc	/^void RenderThread::execute(void* arg)$/;"	f	class:RenderThread	signature:(void* arg)
RenderThread::execute	RenderThread.h	/^        void execute(void *);$/;"	p	class:RenderThread	access:public	signature:(void *)
RenderThread::execute	backup/RenderThread.cc	/^void RenderThread::execute(void* arg)$/;"	f	class:RenderThread	signature:(void* arg)
RenderThread::execute	backup/RenderThread.h	/^        void execute(void *);$/;"	p	class:RenderThread	access:public	signature:(void *)
RenderThread::film	RenderThread.h	/^        Film *film;$/;"	m	class:RenderThread	access:private
RenderThread::film	backup/RenderThread.h	/^        Film *film;$/;"	m	class:RenderThread	access:private
RenderThread::rNG	RenderThread.h	/^        Random rNG;$/;"	m	class:RenderThread	access:private
RenderThread::rNG	backup/RenderThread.h	/^        Random rNG;$/;"	m	class:RenderThread	access:private
RenderThread::renderArea	RenderThread.h	/^        RectangleInfo *renderArea;$/;"	m	class:RenderThread	access:private
RenderThread::renderArea	backup/RenderThread.h	/^        RectangleInfo *renderArea;$/;"	m	class:RenderThread	access:private
RenderThread::threadIndex	RenderThread.h	/^        unsigned int threadIndex;$/;"	m	class:RenderThread	access:private
RenderThread::threadIndex	backup/RenderThread.h	/^        unsigned int threadIndex;$/;"	m	class:RenderThread	access:private
RenderThread::world	RenderThread.h	/^        World *world;$/;"	m	class:RenderThread	access:private
RenderThread::world	backup/RenderThread.h	/^        World *world;$/;"	m	class:RenderThread	access:private
RenderThread::~RenderThread	RenderThread.cc	/^RenderThread::~RenderThread()$/;"	f	class:RenderThread	signature:()
RenderThread::~RenderThread	RenderThread.h	/^        ~RenderThread();$/;"	p	class:RenderThread	access:public	signature:()
RenderThread::~RenderThread	backup/RenderThread.cc	/^RenderThread::~RenderThread()$/;"	f	class:RenderThread	signature:()
RenderThread::~RenderThread	backup/RenderThread.h	/^        ~RenderThread();$/;"	p	class:RenderThread	access:public	signature:()
Renderer	Renderer.cc	/^Renderer::Renderer(World *world, Camera *camera, unsigned int threads) : world(world), camera(camera), openUI(true)$/;"	f	class:Renderer	signature:(World *world, Camera *camera, unsigned int threads)
Renderer	Renderer.h	/^        Renderer(World *, Camera *, unsigned int);$/;"	p	class:Renderer	access:public	signature:(World *, Camera *, unsigned int)
Renderer	Renderer.h	/^class Renderer$/;"	c
Renderer	backup/Renderer.cc	/^Renderer::Renderer(World *world, Camera *camera, unsigned int threads) : world(world), camera(camera), openUI(true)$/;"	f	class:Renderer	signature:(World *world, Camera *camera, unsigned int threads)
Renderer	backup/Renderer.h	/^        Renderer(World *, Camera *, unsigned int);$/;"	p	class:Renderer	access:public	signature:(World *, Camera *, unsigned int)
Renderer	backup/Renderer.h	/^class Renderer$/;"	c
Renderer::Renderer	Renderer.cc	/^Renderer::Renderer(World *world, Camera *camera, unsigned int threads) : world(world), camera(camera), openUI(true)$/;"	f	class:Renderer	signature:(World *world, Camera *camera, unsigned int threads)
Renderer::Renderer	Renderer.h	/^        Renderer(World *, Camera *, unsigned int);$/;"	p	class:Renderer	access:public	signature:(World *, Camera *, unsigned int)
Renderer::Renderer	backup/Renderer.cc	/^Renderer::Renderer(World *world, Camera *camera, unsigned int threads) : world(world), camera(camera), openUI(true)$/;"	f	class:Renderer	signature:(World *world, Camera *camera, unsigned int threads)
Renderer::Renderer	backup/Renderer.h	/^        Renderer(World *, Camera *, unsigned int);$/;"	p	class:Renderer	access:public	signature:(World *, Camera *, unsigned int)
Renderer::camera	Renderer.h	/^        Camera *camera;$/;"	m	class:Renderer	access:private
Renderer::camera	backup/Renderer.h	/^        Camera *camera;$/;"	m	class:Renderer	access:private
Renderer::newArea	Renderer.h	/^        RectangleInfo renderArea, newArea;$/;"	m	class:Renderer	access:private
Renderer::newArea	backup/Renderer.h	/^        RectangleInfo renderArea, newArea;$/;"	m	class:Renderer	access:private
Renderer::openUI	Renderer.h	/^        bool openUI;$/;"	m	class:Renderer	access:private
Renderer::openUI	backup/Renderer.h	/^        bool openUI;$/;"	m	class:Renderer	access:private
Renderer::renderArea	Renderer.h	/^        RectangleInfo renderArea, newArea;$/;"	m	class:Renderer	access:private
Renderer::renderArea	backup/Renderer.h	/^        RectangleInfo renderArea, newArea;$/;"	m	class:Renderer	access:private
Renderer::renderThreads	Renderer.h	/^        std::vector<RenderThread*> renderThreads;$/;"	m	class:Renderer	access:private
Renderer::renderThreads	backup/Renderer.h	/^        std::vector<RenderThread*> renderThreads;$/;"	m	class:Renderer	access:private
Renderer::start	Renderer.cc	/^void Renderer::start(void)$/;"	f	class:Renderer	signature:(void)
Renderer::start	Renderer.h	/^        void start(void);$/;"	p	class:Renderer	access:public	signature:(void)
Renderer::start	backup/Renderer.cc	/^void Renderer::start(void)$/;"	f	class:Renderer	signature:(void)
Renderer::start	backup/Renderer.h	/^        void start(void);$/;"	p	class:Renderer	access:public	signature:(void)
Renderer::uiThread	Renderer.h	/^        UIThread *uiThread;$/;"	m	class:Renderer	access:private
Renderer::uiThread	backup/Renderer.h	/^        UIThread *uiThread;$/;"	m	class:Renderer	access:private
Renderer::world	Renderer.h	/^        World *world;$/;"	m	class:Renderer	access:private
Renderer::world	backup/Renderer.h	/^        World *world;$/;"	m	class:Renderer	access:private
Renderer::~Renderer	Renderer.cc	/^Renderer::~Renderer(void)$/;"	f	class:Renderer	signature:(void)
Renderer::~Renderer	Renderer.h	/^        ~Renderer(void);$/;"	p	class:Renderer	access:public	signature:(void)
Renderer::~Renderer	backup/Renderer.cc	/^Renderer::~Renderer(void)$/;"	f	class:Renderer	signature:(void)
Renderer::~Renderer	backup/Renderer.h	/^        ~Renderer(void);$/;"	p	class:Renderer	access:public	signature:(void)
RotateX	Transformation.h	/^        void RotateX(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
RotateX	backup/Transformation.h	/^        void RotateX(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
RotateY	Transformation.h	/^        void RotateY(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
RotateY	backup/Transformation.h	/^        void RotateY(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
RotateZ	Transformation.h	/^        void RotateZ(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
RotateZ	backup/Transformation.h	/^        void RotateZ(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
SIZE	backup/main.cc	235;"	d	file:
SIZE	main.cc	235;"	d	file:
SKYDOME	SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	e	enum:SkyDome::__anon5
SKYDOME	backup/SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	e	enum:SkyDome::__anon2
SKYDOME_H	SkyDome.h	2;"	d
SKYDOME_H	backup/SkyDome.h	2;"	d
SOLID	Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon6
SOLID	SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	e	enum:SkyDome::__anon5
SOLID	backup/Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	e	enum:Material::__anon3
SOLID	backup/SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	e	enum:SkyDome::__anon2
SPHERE_H	Sphere.h	2;"	d
SPHERE_H	backup/Sphere.h	2;"	d
STACKDEPTH	KDTree.cc	273;"	d	file:
STACKDEPTH	backup/KDTree.cc	273;"	d	file:
Scale	Transformation.h	/^        void Scale(const Vector& scale)$/;"	f	class:Transformation	access:public	signature:(const Vector& scale)
Scale	backup/Transformation.h	/^        void Scale(const Vector& scale)$/;"	f	class:Transformation	access:public	signature:(const Vector& scale)
SkyDome	SkyDome.cc	/^SkyDome::SkyDome() : skyDomeType(SOLID), solidColor(Vector(0)), radianceValues(NULL), width(0), height(0)$/;"	f	class:SkyDome	signature:()
SkyDome	SkyDome.h	/^        SkyDome();$/;"	p	class:SkyDome	access:public	signature:()
SkyDome	SkyDome.h	/^class SkyDome$/;"	c
SkyDome	backup/SkyDome.cc	/^SkyDome::SkyDome() : skyDomeType(SOLID), solidColor(Vector(0)), radianceValues(NULL), width(0), height(0)$/;"	f	class:SkyDome	signature:()
SkyDome	backup/SkyDome.h	/^        SkyDome();$/;"	p	class:SkyDome	access:public	signature:()
SkyDome	backup/SkyDome.h	/^class SkyDome$/;"	c
SkyDome::SKYDOME	SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	e	enum:SkyDome::__anon5
SkyDome::SKYDOME	backup/SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	e	enum:SkyDome::__anon2
SkyDome::SOLID	SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	e	enum:SkyDome::__anon5
SkyDome::SOLID	backup/SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	e	enum:SkyDome::__anon2
SkyDome::SkyDome	SkyDome.cc	/^SkyDome::SkyDome() : skyDomeType(SOLID), solidColor(Vector(0)), radianceValues(NULL), width(0), height(0)$/;"	f	class:SkyDome	signature:()
SkyDome::SkyDome	SkyDome.h	/^        SkyDome();$/;"	p	class:SkyDome	access:public	signature:()
SkyDome::SkyDome	backup/SkyDome.cc	/^SkyDome::SkyDome() : skyDomeType(SOLID), solidColor(Vector(0)), radianceValues(NULL), width(0), height(0)$/;"	f	class:SkyDome	signature:()
SkyDome::SkyDome	backup/SkyDome.h	/^        SkyDome();$/;"	p	class:SkyDome	access:public	signature:()
SkyDome::getRadiance	SkyDome.cc	/^Vector SkyDome::getRadiance(Vector& direction) const$/;"	f	class:SkyDome	signature:(Vector& direction) const
SkyDome::getRadiance	SkyDome.h	/^        Vector getRadiance(Vector &) const;$/;"	p	class:SkyDome	access:public	signature:(Vector &) const
SkyDome::getRadiance	backup/SkyDome.cc	/^Vector SkyDome::getRadiance(Vector& direction) const$/;"	f	class:SkyDome	signature:(Vector& direction) const
SkyDome::getRadiance	backup/SkyDome.h	/^        Vector getRadiance(Vector &) const;$/;"	p	class:SkyDome	access:public	signature:(Vector &) const
SkyDome::height	SkyDome.h	/^        unsigned int height;$/;"	m	class:SkyDome	access:private
SkyDome::height	backup/SkyDome.h	/^        unsigned int height;$/;"	m	class:SkyDome	access:private
SkyDome::radianceValues	SkyDome.h	/^        Vector *radianceValues;$/;"	m	class:SkyDome	access:private
SkyDome::radianceValues	backup/SkyDome.h	/^        Vector *radianceValues;$/;"	m	class:SkyDome	access:private
SkyDome::setImage	SkyDome.cc	/^void SkyDome::setImage(std::string fileName)$/;"	f	class:SkyDome	signature:(std::string fileName)
SkyDome::setImage	SkyDome.h	/^        void setImage(std::string);$/;"	p	class:SkyDome	access:public	signature:(std::string)
SkyDome::setImage	backup/SkyDome.cc	/^void SkyDome::setImage(std::string fileName)$/;"	f	class:SkyDome	signature:(std::string fileName)
SkyDome::setImage	backup/SkyDome.h	/^        void setImage(std::string);$/;"	p	class:SkyDome	access:public	signature:(std::string)
SkyDome::setSolidColor	SkyDome.cc	/^void SkyDome::setSolidColor(Vector color)$/;"	f	class:SkyDome	signature:(Vector color)
SkyDome::setSolidColor	SkyDome.h	/^        void setSolidColor(Vector);$/;"	p	class:SkyDome	access:public	signature:(Vector)
SkyDome::setSolidColor	backup/SkyDome.cc	/^void SkyDome::setSolidColor(Vector color)$/;"	f	class:SkyDome	signature:(Vector color)
SkyDome::setSolidColor	backup/SkyDome.h	/^        void setSolidColor(Vector);$/;"	p	class:SkyDome	access:public	signature:(Vector)
SkyDome::skyDomeType	SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	m	class:SkyDome	typeref:enum:SkyDome::__anon5	access:private
SkyDome::skyDomeType	backup/SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	m	class:SkyDome	typeref:enum:SkyDome::__anon2	access:private
SkyDome::solidColor	SkyDome.h	/^        Vector solidColor;$/;"	m	class:SkyDome	access:private
SkyDome::solidColor	backup/SkyDome.h	/^        Vector solidColor;$/;"	m	class:SkyDome	access:private
SkyDome::width	SkyDome.h	/^        unsigned int width;$/;"	m	class:SkyDome	access:private
SkyDome::width	backup/SkyDome.h	/^        unsigned int width;$/;"	m	class:SkyDome	access:private
SkyDome::~SkyDome	SkyDome.cc	/^SkyDome::~SkyDome(void)$/;"	f	class:SkyDome	signature:(void)
SkyDome::~SkyDome	SkyDome.h	/^        ~SkyDome();$/;"	p	class:SkyDome	access:public	signature:()
SkyDome::~SkyDome	backup/SkyDome.cc	/^SkyDome::~SkyDome(void)$/;"	f	class:SkyDome	signature:(void)
SkyDome::~SkyDome	backup/SkyDome.h	/^        ~SkyDome();$/;"	p	class:SkyDome	access:public	signature:()
Sphere	Sphere.cc	/^Sphere::Sphere(Material *material, Transformation *transformation) : Object(material), transformation(transformation)$/;"	f	class:Sphere	signature:(Material *material, Transformation *transformation)
Sphere	Sphere.h	/^        Sphere(Material *, Transformation *);$/;"	p	class:Sphere	access:public	signature:(Material *, Transformation *)
Sphere	Sphere.h	/^class Sphere : public Object$/;"	c	inherits:Object
Sphere	backup/Sphere.cc	/^Sphere::Sphere(Material *material, Transformation *transformation) : Object(material), transformation(transformation)$/;"	f	class:Sphere	signature:(Material *material, Transformation *transformation)
Sphere	backup/Sphere.h	/^        Sphere(Material *, Transformation *);$/;"	p	class:Sphere	access:public	signature:(Material *, Transformation *)
Sphere	backup/Sphere.h	/^class Sphere : public Object$/;"	c	inherits:Object
Sphere::Sphere	Sphere.cc	/^Sphere::Sphere(Material *material, Transformation *transformation) : Object(material), transformation(transformation)$/;"	f	class:Sphere	signature:(Material *material, Transformation *transformation)
Sphere::Sphere	Sphere.h	/^        Sphere(Material *, Transformation *);$/;"	p	class:Sphere	access:public	signature:(Material *, Transformation *)
Sphere::Sphere	backup/Sphere.cc	/^Sphere::Sphere(Material *material, Transformation *transformation) : Object(material), transformation(transformation)$/;"	f	class:Sphere	signature:(Material *material, Transformation *transformation)
Sphere::Sphere	backup/Sphere.h	/^        Sphere(Material *, Transformation *);$/;"	p	class:Sphere	access:public	signature:(Material *, Transformation *)
Sphere::boundByAABBox	Sphere.cc	/^AABBox *Sphere::boundByAABBox()$/;"	f	class:Sphere	signature:()
Sphere::boundByAABBox	Sphere.h	/^        AABBox *boundByAABBox();$/;"	p	class:Sphere	access:public	signature:()
Sphere::boundByAABBox	backup/Sphere.cc	/^AABBox *Sphere::boundByAABBox()$/;"	f	class:Sphere	signature:()
Sphere::boundByAABBox	backup/Sphere.h	/^        AABBox *boundByAABBox();$/;"	p	class:Sphere	access:public	signature:()
Sphere::boundByBSphere	Sphere.cc	/^BSphere *Sphere::boundByBSphere()$/;"	f	class:Sphere	signature:()
Sphere::boundByBSphere	Sphere.h	/^        BSphere *boundByBSphere();$/;"	p	class:Sphere	access:public	signature:()
Sphere::boundByBSphere	backup/Sphere.cc	/^BSphere *Sphere::boundByBSphere()$/;"	f	class:Sphere	signature:()
Sphere::boundByBSphere	backup/Sphere.h	/^        BSphere *boundByBSphere();$/;"	p	class:Sphere	access:public	signature:()
Sphere::getINormal	backup/Sphere.cc	/^Vector Sphere::getINormal(Point worldPoint) const$/;"	f	class:Sphere	signature:(Point worldPoint) const
Sphere::getINormal	backup/Sphere.h	/^        Vector getINormal(Point) const;$/;"	p	class:Sphere	access:public	signature:(Point) const
Sphere::intersect	Sphere.cc	/^myFloat Sphere::intersect(Ray& ray, Intersection& intersection) const$/;"	f	class:Sphere	signature:(Ray& ray, Intersection& intersection) const
Sphere::intersect	Sphere.h	/^        bool intersect(Ray&, Intersection&) const;$/;"	p	class:Sphere	access:public	signature:(Ray&, Intersection&) const
Sphere::intersect	backup/Sphere.cc	/^myFloat Sphere::intersect(Point worldOrigin, Vector worldDirection) const$/;"	f	class:Sphere	signature:(Point worldOrigin, Vector worldDirection) const
Sphere::intersect	backup/Sphere.h	/^        myFloat intersect(Point, Vector) const;$/;"	p	class:Sphere	access:public	signature:(Point, Vector) const
Sphere::transformation	Sphere.h	/^        Transformation *transformation;$/;"	m	class:Sphere	access:private
Sphere::transformation	backup/Sphere.h	/^        Transformation *transformation;$/;"	m	class:Sphere	access:private
Sphere::~Sphere	Sphere.cc	/^Sphere::~Sphere()$/;"	f	class:Sphere	signature:()
Sphere::~Sphere	Sphere.h	/^        ~Sphere();$/;"	p	class:Sphere	access:public	signature:()
Sphere::~Sphere	backup/Sphere.cc	/^Sphere::~Sphere()$/;"	f	class:Sphere	signature:()
Sphere::~Sphere	backup/Sphere.h	/^        ~Sphere();$/;"	p	class:Sphere	access:public	signature:()
THREAD_H	Thread.h	2;"	d
THREAD_H	backup/Thread.h	2;"	d
TRANSFORMATION_H	Transformation.h	2;"	d
TRANSFORMATION_H	backup/Transformation.h	2;"	d
TRIANGLEBOX	World.cc	206;"	d	file:
TRIANGLEBOX	backup/World.cc	206;"	d	file:
TRIANGLE_H	Triangle.h	2;"	d
TRIANGLE_H	backup/Triangle.h	2;"	d
Thread	Thread.h	/^        Thread(void) {}$/;"	f	class:Thread	access:public	signature:(void)
Thread	Thread.h	/^class Thread$/;"	c
Thread	backup/Thread.h	/^        Thread(void) {}$/;"	f	class:Thread	access:public	signature:(void)
Thread	backup/Thread.h	/^class Thread$/;"	c
Thread::Thread	Thread.h	/^        Thread(void) {}$/;"	f	class:Thread	access:public	signature:(void)
Thread::Thread	backup/Thread.h	/^        Thread(void) {}$/;"	f	class:Thread	access:public	signature:(void)
Thread::execute	Thread.h	/^        virtual void execute(void* arg) =0;$/;"	p	class:Thread	access:protected	signature:(void* arg)
Thread::execute	backup/Thread.h	/^        virtual void execute(void* arg) =0;$/;"	p	class:Thread	access:protected	signature:(void* arg)
Thread::join	Thread.h	/^        void join(void)$/;"	f	class:Thread	access:public	signature:(void)
Thread::join	backup/Thread.h	/^        void join(void)$/;"	f	class:Thread	access:public	signature:(void)
Thread::run	Thread.h	/^        void run(void)$/;"	f	class:Thread	access:protected	signature:(void)
Thread::run	backup/Thread.h	/^        void run(void)$/;"	f	class:Thread	access:protected	signature:(void)
Thread::start	Thread.h	/^        void start(void * arg = NULL) $/;"	f	class:Thread	access:public	signature:(void * arg = NULL)
Thread::start	backup/Thread.h	/^        void start(void * arg = NULL) $/;"	f	class:Thread	access:public	signature:(void * arg = NULL)
Thread::thread	Thread.h	/^        pthread_t thread;$/;"	m	class:Thread	access:private
Thread::thread	backup/Thread.h	/^        pthread_t thread;$/;"	m	class:Thread	access:private
Thread::threadAddress	Thread.h	/^        static void * threadAddress(void * pthis)$/;"	f	class:Thread	access:protected	signature:(void * pthis)
Thread::threadAddress	backup/Thread.h	/^        static void * threadAddress(void * pthis)$/;"	f	class:Thread	access:protected	signature:(void * pthis)
Thread::userData	Thread.h	/^        void * userData;$/;"	m	class:Thread	access:private
Thread::userData	backup/Thread.h	/^        void * userData;$/;"	m	class:Thread	access:private
Thread::~Thread	Thread.h	/^        virtual ~Thread(void) {}$/;"	f	class:Thread	access:public	signature:(void)
Thread::~Thread	backup/Thread.h	/^        virtual ~Thread(void) {}$/;"	f	class:Thread	access:public	signature:(void)
Transform	Transformation.h	/^        void Transform(const Matrix4x4& matrix)$/;"	f	class:Transformation	access:public	signature:(const Matrix4x4& matrix)
Transform	Transformation.h	/^        void Transform(const Transformation *trans)$/;"	f	class:Transformation	access:public	signature:(const Transformation *trans)
Transform	backup/Transformation.h	/^        void Transform(const Matrix4x4& matrix)$/;"	f	class:Transformation	access:public	signature:(const Matrix4x4& matrix)
Transform	backup/Transformation.h	/^        void Transform(const Transformation *trans)$/;"	f	class:Transformation	access:public	signature:(const Transformation *trans)
Transformation	Transformation.h	/^        Transformation() {}$/;"	f	class:Transformation	access:public	signature:()
Transformation	Transformation.h	/^        Transformation(const Matrix4x4& matrix)$/;"	f	class:Transformation	access:public	signature:(const Matrix4x4& matrix)
Transformation	Transformation.h	/^        Transformation(const Transformation *trans)$/;"	f	class:Transformation	access:public	signature:(const Transformation *trans)
Transformation	Transformation.h	/^class Transformation$/;"	c
Transformation	backup/Transformation.h	/^        Transformation() {}$/;"	f	class:Transformation	access:public	signature:()
Transformation	backup/Transformation.h	/^        Transformation(const Matrix4x4& matrix)$/;"	f	class:Transformation	access:public	signature:(const Matrix4x4& matrix)
Transformation	backup/Transformation.h	/^        Transformation(const Transformation *trans)$/;"	f	class:Transformation	access:public	signature:(const Transformation *trans)
Transformation	backup/Transformation.h	/^class Transformation$/;"	c
Transformation::RotateX	Transformation.h	/^        void RotateX(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
Transformation::RotateX	backup/Transformation.h	/^        void RotateX(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
Transformation::RotateY	Transformation.h	/^        void RotateY(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
Transformation::RotateY	backup/Transformation.h	/^        void RotateY(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
Transformation::RotateZ	Transformation.h	/^        void RotateZ(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
Transformation::RotateZ	backup/Transformation.h	/^        void RotateZ(myFloat angle)$/;"	f	class:Transformation	access:public	signature:(myFloat angle)
Transformation::Scale	Transformation.h	/^        void Scale(const Vector& scale)$/;"	f	class:Transformation	access:public	signature:(const Vector& scale)
Transformation::Scale	backup/Transformation.h	/^        void Scale(const Vector& scale)$/;"	f	class:Transformation	access:public	signature:(const Vector& scale)
Transformation::Transform	Transformation.h	/^        void Transform(const Matrix4x4& matrix)$/;"	f	class:Transformation	access:public	signature:(const Matrix4x4& matrix)
Transformation::Transform	Transformation.h	/^        void Transform(const Transformation *trans)$/;"	f	class:Transformation	access:public	signature:(const Transformation *trans)
Transformation::Transform	backup/Transformation.h	/^        void Transform(const Matrix4x4& matrix)$/;"	f	class:Transformation	access:public	signature:(const Matrix4x4& matrix)
Transformation::Transform	backup/Transformation.h	/^        void Transform(const Transformation *trans)$/;"	f	class:Transformation	access:public	signature:(const Transformation *trans)
Transformation::Transformation	Transformation.h	/^        Transformation() {}$/;"	f	class:Transformation	access:public	signature:()
Transformation::Transformation	Transformation.h	/^        Transformation(const Matrix4x4& matrix)$/;"	f	class:Transformation	access:public	signature:(const Matrix4x4& matrix)
Transformation::Transformation	Transformation.h	/^        Transformation(const Transformation *trans)$/;"	f	class:Transformation	access:public	signature:(const Transformation *trans)
Transformation::Transformation	backup/Transformation.h	/^        Transformation() {}$/;"	f	class:Transformation	access:public	signature:()
Transformation::Transformation	backup/Transformation.h	/^        Transformation(const Matrix4x4& matrix)$/;"	f	class:Transformation	access:public	signature:(const Matrix4x4& matrix)
Transformation::Transformation	backup/Transformation.h	/^        Transformation(const Transformation *trans)$/;"	f	class:Transformation	access:public	signature:(const Transformation *trans)
Transformation::Translate	Transformation.h	/^        void Translate(const Vector& translation)$/;"	f	class:Transformation	access:public	signature:(const Vector& translation)
Transformation::Translate	backup/Transformation.h	/^        void Translate(const Vector& translation)$/;"	f	class:Transformation	access:public	signature:(const Vector& translation)
Transformation::createInverse	Transformation.h	/^        void createInverse()$/;"	f	class:Transformation	access:public	signature:()
Transformation::createInverse	backup/Transformation.h	/^        void createInverse()$/;"	f	class:Transformation	access:public	signature:()
Transformation::invTransformation	Transformation.h	/^        Matrix4x4 invTransformation;$/;"	m	class:Transformation	access:private
Transformation::invTransformation	backup/Transformation.h	/^        Matrix4x4 invTransformation;$/;"	m	class:Transformation	access:private
Transformation::objectNormalToWorld	Transformation.h	/^        Vector objectNormalToWorld(const Vector& normal) const$/;"	f	class:Transformation	access:public	signature:(const Vector& normal) const
Transformation::objectNormalToWorld	backup/Transformation.h	/^        Vector objectNormalToWorld(const Vector& normal) const$/;"	f	class:Transformation	access:public	signature:(const Vector& normal) const
Transformation::objectToWorld	Transformation.h	/^        Point objectToWorld(const Point& point) const$/;"	f	class:Transformation	access:public	signature:(const Point& point) const
Transformation::objectToWorld	Transformation.h	/^        Vector objectToWorld(const Vector& vector) const$/;"	f	class:Transformation	access:public	signature:(const Vector& vector) const
Transformation::objectToWorld	backup/Transformation.h	/^        Point objectToWorld(const Point& point) const$/;"	f	class:Transformation	access:public	signature:(const Point& point) const
Transformation::objectToWorld	backup/Transformation.h	/^        Vector objectToWorld(const Vector& vector) const$/;"	f	class:Transformation	access:public	signature:(const Vector& vector) const
Transformation::transformation	Transformation.h	/^        Matrix4x4 transformation;$/;"	m	class:Transformation	access:private
Transformation::transformation	backup/Transformation.h	/^        Matrix4x4 transformation;$/;"	m	class:Transformation	access:private
Transformation::worldToObject	Transformation.h	/^        Point worldToObject(const Point& point) const$/;"	f	class:Transformation	access:public	signature:(const Point& point) const
Transformation::worldToObject	Transformation.h	/^        Vector worldToObject(const Vector& vector) const$/;"	f	class:Transformation	access:public	signature:(const Vector& vector) const
Transformation::worldToObject	backup/Transformation.h	/^        Point worldToObject(const Point& point) const$/;"	f	class:Transformation	access:public	signature:(const Point& point) const
Transformation::worldToObject	backup/Transformation.h	/^        Vector worldToObject(const Vector& vector) const$/;"	f	class:Transformation	access:public	signature:(const Vector& vector) const
Translate	Transformation.h	/^        void Translate(const Vector& translation)$/;"	f	class:Transformation	access:public	signature:(const Vector& translation)
Translate	backup/Transformation.h	/^        void Translate(const Vector& translation)$/;"	f	class:Transformation	access:public	signature:(const Vector& translation)
Triangle	Triangle.cc	/^Triangle::Triangle(Material *material, Point v0, Point v1, Point v2) : Object(material)$/;"	f	class:Triangle	signature:(Material *material, Point v0, Point v1, Point v2)
Triangle	Triangle.h	/^        Triangle(Material *, Point, Point, Point);$/;"	p	class:Triangle	access:public	signature:(Material *, Point, Point, Point)
Triangle	Triangle.h	/^class Triangle : public Object$/;"	c	inherits:Object
Triangle	backup/Triangle.cc	/^Triangle::Triangle(Material *material, Point v0, Point v1, Point v2) : Object(material)$/;"	f	class:Triangle	signature:(Material *material, Point v0, Point v1, Point v2)
Triangle	backup/Triangle.h	/^        Triangle(Material *, Point, Point, Point);$/;"	p	class:Triangle	access:public	signature:(Material *, Point, Point, Point)
Triangle	backup/Triangle.h	/^class Triangle : public Object$/;"	c	inherits:Object
Triangle::Triangle	Triangle.cc	/^Triangle::Triangle(Material *material, Point v0, Point v1, Point v2) : Object(material)$/;"	f	class:Triangle	signature:(Material *material, Point v0, Point v1, Point v2)
Triangle::Triangle	Triangle.h	/^        Triangle(Material *, Point, Point, Point);$/;"	p	class:Triangle	access:public	signature:(Material *, Point, Point, Point)
Triangle::Triangle	backup/Triangle.cc	/^Triangle::Triangle(Material *material, Point v0, Point v1, Point v2) : Object(material)$/;"	f	class:Triangle	signature:(Material *material, Point v0, Point v1, Point v2)
Triangle::Triangle	backup/Triangle.h	/^        Triangle(Material *, Point, Point, Point);$/;"	p	class:Triangle	access:public	signature:(Material *, Point, Point, Point)
Triangle::boundByAABBox	Triangle.cc	/^AABBox *Triangle::boundByAABBox()$/;"	f	class:Triangle	signature:()
Triangle::boundByAABBox	Triangle.h	/^        AABBox *boundByAABBox();$/;"	p	class:Triangle	access:public	signature:()
Triangle::boundByAABBox	backup/Triangle.cc	/^AABBox *Triangle::boundByAABBox()$/;"	f	class:Triangle	signature:()
Triangle::boundByAABBox	backup/Triangle.h	/^        AABBox *boundByAABBox();$/;"	p	class:Triangle	access:public	signature:()
Triangle::boundByBSphere	Triangle.cc	/^BSphere *Triangle::boundByBSphere()$/;"	f	class:Triangle	signature:()
Triangle::boundByBSphere	Triangle.h	/^        BSphere *boundByBSphere();$/;"	p	class:Triangle	access:public	signature:()
Triangle::boundByBSphere	backup/Triangle.cc	/^BSphere *Triangle::boundByBSphere()$/;"	f	class:Triangle	signature:()
Triangle::boundByBSphere	backup/Triangle.h	/^        BSphere *boundByBSphere();$/;"	p	class:Triangle	access:public	signature:()
Triangle::edge1	Triangle.h	/^        Vector edge1,edge2;$/;"	m	class:Triangle	access:private
Triangle::edge1	backup/Triangle.h	/^        Vector edge1,edge2;$/;"	m	class:Triangle	access:private
Triangle::edge2	Triangle.h	/^        Vector edge1,edge2;$/;"	m	class:Triangle	access:private
Triangle::edge2	backup/Triangle.h	/^        Vector edge1,edge2;$/;"	m	class:Triangle	access:private
Triangle::getINormal	backup/Triangle.cc	/^Vector Triangle::getINormal(Point worldPoint) const$/;"	f	class:Triangle	signature:(Point worldPoint) const
Triangle::getINormal	backup/Triangle.h	/^        Vector getINormal(Point) const;$/;"	p	class:Triangle	access:public	signature:(Point) const
Triangle::intersect	Triangle.cc	/^myFloat Triangle::intersect(Ray& ray, Intersection& intersection) const$/;"	f	class:Triangle	signature:(Ray& ray, Intersection& intersection) const
Triangle::intersect	Triangle.h	/^        bool intersect(Ray&, Intersection&) const;$/;"	p	class:Triangle	access:public	signature:(Ray&, Intersection&) const
Triangle::intersect	backup/Triangle.cc	/^myFloat Triangle::intersect(Point worldOrigin, Vector worldDirection) const$/;"	f	class:Triangle	signature:(Point worldOrigin, Vector worldDirection) const
Triangle::intersect	backup/Triangle.h	/^        myFloat intersect(Point, Vector) const;$/;"	p	class:Triangle	access:public	signature:(Point, Vector) const
Triangle::normal	Triangle.h	/^        Vector normal;$/;"	m	class:Triangle	access:private
Triangle::normal	backup/Triangle.h	/^        Vector normal;$/;"	m	class:Triangle	access:private
Triangle::origin	Triangle.h	/^        Point origin;$/;"	m	class:Triangle	access:private
Triangle::origin	backup/Triangle.h	/^        Point origin;$/;"	m	class:Triangle	access:private
UITHREAD_H	UIThread.h	2;"	d
UITHREAD_H	backup/UIThread.h	2;"	d
UIThread	UIThread.cc	/^UIThread::UIThread(Camera *camera, RectangleInfo *newArea) try : UIWindow(camera->getFilm()->getWidth(), camera->getFilm()->getHeight(), "Camera", "ssRay", "Renderer"), camera(camera), film(camera->getFilm()), newArea(newArea), oldRenderArea(*newArea), selectedArea(*newArea), width(film->getWidth()), height(film->getHeight()), newData(false), uiRunning(true)$/;"	f	class:UIThread	signature:(Camera *camera, RectangleInfo *newArea)
UIThread	UIThread.h	/^        UIThread(Camera *, RectangleInfo *);$/;"	p	class:UIThread	access:public	signature:(Camera *, RectangleInfo *)
UIThread	UIThread.h	/^class UIThread : public Thread $/;"	c	inherits:Thread
UIThread	backup/UIThread.cc	/^UIThread::UIThread(Camera *camera, RectangleInfo *newArea) try : UIWindow(camera->getFilm()->getWidth(), camera->getFilm()->getHeight(), "Camera", "ssRay", "Renderer"), camera(camera), film(camera->getFilm()), newArea(newArea), oldRenderArea(*newArea), selectedArea(*newArea), width(film->getWidth()), height(film->getHeight()), newData(false), uiRunning(true)$/;"	f	class:UIThread	signature:(Camera *camera, RectangleInfo *newArea)
UIThread	backup/UIThread.h	/^        UIThread(Camera *, RectangleInfo *);$/;"	p	class:UIThread	access:public	signature:(Camera *, RectangleInfo *)
UIThread	backup/UIThread.h	/^class UIThread : public Thread $/;"	c	inherits:Thread
UIThread::UIThread	UIThread.cc	/^UIThread::UIThread(Camera *camera, RectangleInfo *newArea) try : UIWindow(camera->getFilm()->getWidth(), camera->getFilm()->getHeight(), "Camera", "ssRay", "Renderer"), camera(camera), film(camera->getFilm()), newArea(newArea), oldRenderArea(*newArea), selectedArea(*newArea), width(film->getWidth()), height(film->getHeight()), newData(false), uiRunning(true)$/;"	f	class:UIThread	signature:(Camera *camera, RectangleInfo *newArea)
UIThread::UIThread	UIThread.h	/^        UIThread(Camera *, RectangleInfo *);$/;"	p	class:UIThread	access:public	signature:(Camera *, RectangleInfo *)
UIThread::UIThread	backup/UIThread.cc	/^UIThread::UIThread(Camera *camera, RectangleInfo *newArea) try : UIWindow(camera->getFilm()->getWidth(), camera->getFilm()->getHeight(), "Camera", "ssRay", "Renderer"), camera(camera), film(camera->getFilm()), newArea(newArea), oldRenderArea(*newArea), selectedArea(*newArea), width(film->getWidth()), height(film->getHeight()), newData(false), uiRunning(true)$/;"	f	class:UIThread	signature:(Camera *camera, RectangleInfo *newArea)
UIThread::UIThread	backup/UIThread.h	/^        UIThread(Camera *, RectangleInfo *);$/;"	p	class:UIThread	access:public	signature:(Camera *, RectangleInfo *)
UIThread::UIWindow	UIThread.h	/^        XWindow UIWindow;$/;"	m	class:UIThread	access:private
UIThread::UIWindow	backup/UIThread.h	/^        XWindow UIWindow;$/;"	m	class:UIThread	access:private
UIThread::camera	UIThread.h	/^        Camera *camera;$/;"	m	class:UIThread	access:private
UIThread::camera	backup/UIThread.h	/^        Camera *camera;$/;"	m	class:UIThread	access:private
UIThread::drawBuffer	UIThread.cc	/^void UIThread::drawBuffer(void)$/;"	f	class:UIThread	signature:(void)
UIThread::drawBuffer	UIThread.h	/^        void drawBuffer(void);$/;"	p	class:UIThread	access:private	signature:(void)
UIThread::drawBuffer	backup/UIThread.cc	/^void UIThread::drawBuffer(void)$/;"	f	class:UIThread	signature:(void)
UIThread::drawBuffer	backup/UIThread.h	/^        void drawBuffer(void);$/;"	p	class:UIThread	access:private	signature:(void)
UIThread::execute	UIThread.cc	/^void UIThread::execute(void * arg)$/;"	f	class:UIThread	signature:(void * arg)
UIThread::execute	UIThread.h	/^        void execute(void *);$/;"	p	class:UIThread	access:public	signature:(void *)
UIThread::execute	backup/UIThread.cc	/^void UIThread::execute(void * arg)$/;"	f	class:UIThread	signature:(void * arg)
UIThread::execute	backup/UIThread.h	/^        void execute(void *);$/;"	p	class:UIThread	access:public	signature:(void *)
UIThread::film	UIThread.h	/^        Film *film;$/;"	m	class:UIThread	access:private
UIThread::film	backup/UIThread.h	/^        Film *film;$/;"	m	class:UIThread	access:private
UIThread::height	UIThread.h	/^        unsigned int height;$/;"	m	class:UIThread	access:private
UIThread::height	backup/UIThread.h	/^        unsigned int height;$/;"	m	class:UIThread	access:private
UIThread::imageBuffer	UIThread.h	/^        char *imageBuffer;$/;"	m	class:UIThread	access:private
UIThread::imageBuffer	backup/UIThread.h	/^        char *imageBuffer;$/;"	m	class:UIThread	access:private
UIThread::newArea	UIThread.h	/^        RectangleInfo *newArea;$/;"	m	class:UIThread	access:private
UIThread::newArea	backup/UIThread.h	/^        RectangleInfo *newArea;$/;"	m	class:UIThread	access:private
UIThread::newData	UIThread.h	/^        bool newData;$/;"	m	class:UIThread	access:private
UIThread::newData	backup/UIThread.h	/^        bool newData;$/;"	m	class:UIThread	access:private
UIThread::newFilm	UIThread.cc	/^void UIThread::newFilm(const RectangleInfo& renderArea)$/;"	f	class:UIThread	signature:(const RectangleInfo& renderArea)
UIThread::newFilm	UIThread.h	/^        void newFilm(const RectangleInfo&);$/;"	p	class:UIThread	access:public	signature:(const RectangleInfo&)
UIThread::newFilm	backup/UIThread.cc	/^void UIThread::newFilm(const RectangleInfo& renderArea)$/;"	f	class:UIThread	signature:(const RectangleInfo& renderArea)
UIThread::newFilm	backup/UIThread.h	/^        void newFilm(const RectangleInfo&);$/;"	p	class:UIThread	access:public	signature:(const RectangleInfo&)
UIThread::oldRenderArea	UIThread.h	/^        RectangleInfo oldRenderArea;$/;"	m	class:UIThread	access:private
UIThread::oldRenderArea	backup/UIThread.h	/^        RectangleInfo oldRenderArea;$/;"	m	class:UIThread	access:private
UIThread::processEvents	UIThread.cc	/^void UIThread::processEvents(void)$/;"	f	class:UIThread	signature:(void)
UIThread::processEvents	UIThread.h	/^        void processEvents(void);        $/;"	p	class:UIThread	access:private	signature:(void)
UIThread::processEvents	backup/UIThread.cc	/^void UIThread::processEvents(void)$/;"	f	class:UIThread	signature:(void)
UIThread::processEvents	backup/UIThread.h	/^        void processEvents(void);        $/;"	p	class:UIThread	access:private	signature:(void)
UIThread::selectedArea	UIThread.h	/^        RectangleInfo selectedArea;$/;"	m	class:UIThread	access:private
UIThread::selectedArea	backup/UIThread.h	/^        RectangleInfo selectedArea;$/;"	m	class:UIThread	access:private
UIThread::stop	UIThread.cc	/^void UIThread::stop()$/;"	f	class:UIThread	signature:()
UIThread::stop	UIThread.h	/^        void stop();$/;"	p	class:UIThread	access:public	signature:()
UIThread::stop	backup/UIThread.cc	/^void UIThread::stop()$/;"	f	class:UIThread	signature:()
UIThread::stop	backup/UIThread.h	/^        void stop();$/;"	p	class:UIThread	access:public	signature:()
UIThread::uiRunning	UIThread.h	/^        bool uiRunning;$/;"	m	class:UIThread	access:private
UIThread::uiRunning	backup/UIThread.h	/^        bool uiRunning;$/;"	m	class:UIThread	access:private
UIThread::width	UIThread.h	/^        unsigned int width;$/;"	m	class:UIThread	access:private
UIThread::width	backup/UIThread.h	/^        unsigned int width;$/;"	m	class:UIThread	access:private
UIThread::~UIThread	UIThread.cc	/^UIThread::~UIThread()$/;"	f	class:UIThread	signature:()
UIThread::~UIThread	UIThread.h	/^        ~UIThread();$/;"	p	class:UIThread	access:public	signature:()
UIThread::~UIThread	backup/UIThread.cc	/^UIThread::~UIThread()$/;"	f	class:UIThread	signature:()
UIThread::~UIThread	backup/UIThread.h	/^        ~UIThread();$/;"	p	class:UIThread	access:public	signature:()
UIWindow	UIThread.h	/^        XWindow UIWindow;$/;"	m	class:UIThread	access:private
UIWindow	backup/UIThread.h	/^        XWindow UIWindow;$/;"	m	class:UIThread	access:private
UTILS_H	backup/utils.h	2;"	d
UTILS_H	utils.h	2;"	d
VECTOR_H	Vector.h	2;"	d
VECTOR_H	backup/Vector.h	2;"	d
VECTOR_H	test/Vector.h	2;"	d
Vector	Vector.h	/^        Vector() : x(0.0), y(0.0), z(0.0)$/;"	f	class:Vector	access:public	signature:()
Vector	Vector.h	/^        Vector(myFloat c) : x(c), y(c), z(c)$/;"	f	class:Vector	access:public	signature:(myFloat c)
Vector	Vector.h	/^        Vector(myFloat x, myFloat y, myFloat z) : x(x), y(y), z(z)$/;"	f	class:Vector	access:public	signature:(myFloat x, myFloat y, myFloat z)
Vector	Vector.h	/^class Vector$/;"	c
Vector	backup/Vector.h	/^        Vector() : x(0.0), y(0.0), z(0.0)$/;"	f	class:Vector	access:public	signature:()
Vector	backup/Vector.h	/^        Vector(myFloat c) : x(c), y(c), z(c)$/;"	f	class:Vector	access:public	signature:(myFloat c)
Vector	backup/Vector.h	/^        Vector(myFloat x, myFloat y, myFloat z) : x(x), y(y), z(z)$/;"	f	class:Vector	access:public	signature:(myFloat x, myFloat y, myFloat z)
Vector	backup/Vector.h	/^class Vector$/;"	c
Vector	test/Vector.h	/^        Vector(myFloat x, myFloat y, myFloat z) : x(x), y(y), z(z)$/;"	f	class:Vector	access:public	signature:(myFloat x, myFloat y, myFloat z)
Vector	test/Vector.h	/^        Vector(void) : x(0.0), y(0.0), z(0.0)$/;"	f	class:Vector	access:public	signature:(void)
Vector	test/Vector.h	/^class Vector$/;"	c
Vector::Vector	Vector.h	/^        Vector() : x(0.0), y(0.0), z(0.0)$/;"	f	class:Vector	access:public	signature:()
Vector::Vector	Vector.h	/^        Vector(myFloat c) : x(c), y(c), z(c)$/;"	f	class:Vector	access:public	signature:(myFloat c)
Vector::Vector	Vector.h	/^        Vector(myFloat x, myFloat y, myFloat z) : x(x), y(y), z(z)$/;"	f	class:Vector	access:public	signature:(myFloat x, myFloat y, myFloat z)
Vector::Vector	backup/Vector.h	/^        Vector() : x(0.0), y(0.0), z(0.0)$/;"	f	class:Vector	access:public	signature:()
Vector::Vector	backup/Vector.h	/^        Vector(myFloat c) : x(c), y(c), z(c)$/;"	f	class:Vector	access:public	signature:(myFloat c)
Vector::Vector	backup/Vector.h	/^        Vector(myFloat x, myFloat y, myFloat z) : x(x), y(y), z(z)$/;"	f	class:Vector	access:public	signature:(myFloat x, myFloat y, myFloat z)
Vector::Vector	test/Vector.h	/^        Vector(myFloat x, myFloat y, myFloat z) : x(x), y(y), z(z)$/;"	f	class:Vector	access:public	signature:(myFloat x, myFloat y, myFloat z)
Vector::Vector	test/Vector.h	/^        Vector(void) : x(0.0), y(0.0), z(0.0)$/;"	f	class:Vector	access:public	signature:(void)
Vector::combine	Vector.h	/^        Vector combine(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::combine	backup/Vector.h	/^        Vector combine(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::cross	Vector.h	/^        Vector cross(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::cross	backup/Vector.h	/^        Vector cross(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::dot	Vector.h	/^        myFloat dot(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::dot	backup/Vector.h	/^        myFloat dot(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::getX	test/Vector.h	/^        myFloat getX(void) const$/;"	f	class:Vector	access:public	signature:(void) const
Vector::getY	test/Vector.h	/^        myFloat getY(void) const$/;"	f	class:Vector	access:public	signature:(void) const
Vector::getZ	test/Vector.h	/^        myFloat getZ(void) const$/;"	f	class:Vector	access:public	signature:(void) const
Vector::length	Vector.h	/^        myFloat length() const$/;"	f	class:Vector	access:public	signature:() const
Vector::length	backup/Vector.h	/^        myFloat length() const$/;"	f	class:Vector	access:public	signature:() const
Vector::length	test/Vector.h	/^        myFloat length(void) const$/;"	f	class:Vector	access:public	signature:(void) const
Vector::length2	Vector.h	/^        myFloat length2() const$/;"	f	class:Vector	access:public	signature:() const
Vector::length2	backup/Vector.h	/^        myFloat length2() const$/;"	f	class:Vector	access:public	signature:() const
Vector::operator !=	Vector.h	/^        bool operator!=(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator !=	backup/Vector.h	/^        bool operator!=(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator !=	test/Vector.h	/^        bool operator!=(const Vector vector)$/;"	f	class:Vector	access:public	signature:(const Vector vector)
Vector::operator %	test/Vector.h	/^        Vector operator%(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator *	Vector.h	/^        Vector operator*(myFloat scale) const$/;"	f	class:Vector	access:public	signature:(myFloat scale) const
Vector::operator *	Vector.h	/^        friend const Vector operator*(const myFloat value, const Vector& vector)$/;"	f	class:Vector	access:friend	signature:(const myFloat value, const Vector& vector)
Vector::operator *	backup/Vector.h	/^        Vector operator*(myFloat scale) const$/;"	f	class:Vector	access:public	signature:(myFloat scale) const
Vector::operator *	backup/Vector.h	/^        friend const Vector operator*(const myFloat value, const Vector& vector)$/;"	f	class:Vector	access:friend	signature:(const myFloat value, const Vector& vector)
Vector::operator *	test/Vector.h	/^        friend const Vector operator*(const Vector& vector,const myFloat value)$/;"	f	class:Vector	access:friend	signature:(const Vector& vector,const myFloat value)
Vector::operator *	test/Vector.h	/^        friend const Vector operator*(const myFloat value, const Vector& vector)$/;"	f	class:Vector	access:friend	signature:(const myFloat value, const Vector& vector)
Vector::operator *	test/Vector.h	/^        myFloat operator*(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator *=	Vector.h	/^        Vector& operator*=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
Vector::operator *=	backup/Vector.h	/^        Vector& operator*=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
Vector::operator *=	test/Vector.h	/^        Vector& operator*=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
Vector::operator +	Vector.h	/^        Vector operator+(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator +	backup/Vector.h	/^        Vector operator+(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator +	test/Vector.h	/^        Vector operator+(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator +=	Vector.h	/^        Vector& operator+=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
Vector::operator +=	backup/Vector.h	/^        Vector& operator+=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
Vector::operator +=	test/Vector.h	/^        Vector& operator+=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
Vector::operator -	Vector.h	/^        Vector operator-() const$/;"	f	class:Vector	access:public	signature:() const
Vector::operator -	Vector.h	/^        Vector operator-(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator -	backup/Vector.h	/^        Vector operator-() const$/;"	f	class:Vector	access:public	signature:() const
Vector::operator -	backup/Vector.h	/^        Vector operator-(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator -	test/Vector.h	/^        Vector operator-(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator -	test/Vector.h	/^        Vector operator-(void) const$/;"	f	class:Vector	access:public	signature:(void) const
Vector::operator -=	Vector.h	/^        Vector& operator-=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
Vector::operator -=	backup/Vector.h	/^        Vector& operator-=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
Vector::operator -=	test/Vector.h	/^        Vector& operator-=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
Vector::operator /	Vector.h	/^        Vector operator\/(myFloat divider) const$/;"	f	class:Vector	access:public	signature:(myFloat divider) const
Vector::operator /	backup/Vector.h	/^        Vector operator\/(myFloat divider) const$/;"	f	class:Vector	access:public	signature:(myFloat divider) const
Vector::operator /	test/Vector.h	/^        Vector operator\/(myFloat divider) const$/;"	f	class:Vector	access:public	signature:(myFloat divider) const
Vector::operator /=	Vector.h	/^        Vector& operator\/=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
Vector::operator /=	backup/Vector.h	/^        Vector& operator\/=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
Vector::operator /=	test/Vector.h	/^        Vector& operator\/=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
Vector::operator =	Vector.h	/^        Vector& operator=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
Vector::operator =	backup/Vector.h	/^        Vector& operator=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
Vector::operator ==	Vector.h	/^        bool operator==(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator ==	backup/Vector.h	/^        bool operator==(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
Vector::operator ==	test/Vector.h	/^        bool operator==(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
Vector::operator []	Vector.h	/^        myFloat& operator[](const unsigned int i) $/;"	f	class:Vector	access:public	signature:(const unsigned int i)
Vector::operator []	backup/Vector.h	/^        myFloat& operator[](const unsigned int i) $/;"	f	class:Vector	access:public	signature:(const unsigned int i)
Vector::orientY	Vector.h	/^        Vector orientY(const Vector& bias) const$/;"	f	class:Vector	access:public	signature:(const Vector& bias) const
Vector::orientY	backup/Vector.h	/^        Vector orientY(const Vector& bias) const$/;"	f	class:Vector	access:public	signature:(const Vector& bias) const
Vector::perpendicular	Vector.h	/^        Vector perpendicular() const$/;"	f	class:Vector	access:public	signature:() const
Vector::perpendicular	backup/Vector.h	/^        Vector perpendicular() const$/;"	f	class:Vector	access:public	signature:() const
Vector::power	Vector.h	/^        Vector power(myFloat exponent) const$/;"	f	class:Vector	access:public	signature:(myFloat exponent) const
Vector::power	backup/Vector.h	/^        Vector power(myFloat exponent) const$/;"	f	class:Vector	access:public	signature:(myFloat exponent) const
Vector::toString	Vector.h	/^        std::string toString() const$/;"	f	class:Vector	access:public	signature:() const
Vector::toString	backup/Vector.h	/^        std::string toString() const$/;"	f	class:Vector	access:public	signature:() const
Vector::toString	test/Vector.h	/^        std::string toString(void) const$/;"	f	class:Vector	access:public	signature:(void) const
Vector::unit	Vector.h	/^        Vector unit() const$/;"	f	class:Vector	access:public	signature:() const
Vector::unit	backup/Vector.h	/^        Vector unit() const$/;"	f	class:Vector	access:public	signature:() const
Vector::unit	test/Vector.h	/^        Vector unit(void) const$/;"	f	class:Vector	access:public	signature:(void) const
Vector::x	Vector.h	/^        myFloat x;$/;"	m	class:Vector	access:public
Vector::x	backup/Vector.h	/^        myFloat x;$/;"	m	class:Vector	access:public
Vector::x	test/Vector.h	/^        myFloat x;$/;"	m	class:Vector	access:private
Vector::y	Vector.h	/^        myFloat y;$/;"	m	class:Vector	access:public
Vector::y	backup/Vector.h	/^        myFloat y;$/;"	m	class:Vector	access:public
Vector::y	test/Vector.h	/^        myFloat y;$/;"	m	class:Vector	access:private
Vector::z	Vector.h	/^        myFloat z;$/;"	m	class:Vector	access:public
Vector::z	backup/Vector.h	/^        myFloat z;$/;"	m	class:Vector	access:public
Vector::z	test/Vector.h	/^        myFloat z;$/;"	m	class:Vector	access:private
WINDOW_H	XWindow.h	2;"	d
WINDOW_H	backup/XWindow.h	2;"	d
WINDOW_H	test/XWindow.h	2;"	d
WORLD_H	World.h	2;"	d
WORLD_H	backup/World.h	2;"	d
World	World.cc	/^World::World() : bounds(Point(MAX_FLOAT), Point(-MAX_FLOAT), NULL), kDTree(NULL)$/;"	f	class:World	signature:()
World	World.h	/^        World();$/;"	p	class:World	access:public	signature:()
World	World.h	/^class World$/;"	c
World	backup/World.cc	/^World::World() : bounds(Point(MAX_FLOAT), Point(-MAX_FLOAT), NULL), kDTree(NULL)$/;"	f	class:World	signature:()
World	backup/World.h	/^        World();$/;"	p	class:World	access:public	signature:()
World	backup/World.h	/^class World$/;"	c
World::World	World.cc	/^World::World() : bounds(Point(MAX_FLOAT), Point(-MAX_FLOAT), NULL), kDTree(NULL)$/;"	f	class:World	signature:()
World::World	World.h	/^        World();$/;"	p	class:World	access:public	signature:()
World::World	backup/World.cc	/^World::World() : bounds(Point(MAX_FLOAT), Point(-MAX_FLOAT), NULL), kDTree(NULL)$/;"	f	class:World	signature:()
World::World	backup/World.h	/^        World();$/;"	p	class:World	access:public	signature:()
World::addBox	World.cc	/^void World::addBox(Point P1, Point P2, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point P1, Point P2, Material *material, Transformation *transformation)
World::addBox	World.h	/^        void addBox(Point, Point, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Point, Material *, Transformation * = NULL)
World::addBox	backup/World.cc	/^void World::addBox(Point P1, Point P2, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point P1, Point P2, Material *material, Transformation *transformation)
World::addBox	backup/World.h	/^        void addBox(Point, Point, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Point, Material *, Transformation * = NULL)
World::addMesh	World.cc	/^void World::addMesh(std::string fileName, Material *material, Transformation *transformation, bool invert)$/;"	f	class:World	signature:(std::string fileName, Material *material, Transformation *transformation, bool invert)
World::addMesh	World.h	/^        void addMesh(std::string, Material *, Transformation * = NULL, bool = false);$/;"	p	class:World	access:public	signature:(std::string, Material *, Transformation * = NULL, bool = false)
World::addMesh	backup/World.cc	/^void World::addMesh(std::string fileName, Material *material, Transformation *transformation, bool invert)$/;"	f	class:World	signature:(std::string fileName, Material *material, Transformation *transformation, bool invert)
World::addMesh	backup/World.h	/^        void addMesh(std::string, Material *, Transformation * = NULL, bool = false);$/;"	p	class:World	access:public	signature:(std::string, Material *, Transformation * = NULL, bool = false)
World::addPlane	World.cc	/^void World::addPlane(Point origin, Vector normal, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point origin, Vector normal, Material *material, Transformation *transformation)
World::addPlane	World.h	/^        void addPlane(Point, Vector, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Vector, Material *, Transformation * = NULL)
World::addPlane	backup/World.cc	/^void World::addPlane(Point origin, Vector normal, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point origin, Vector normal, Material *material, Transformation *transformation)
World::addPlane	backup/World.h	/^        void addPlane(Point, Vector, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Vector, Material *, Transformation * = NULL)
World::addSphere	World.cc	/^void World::addSphere(Point position, myFloat radius, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point position, myFloat radius, Material *material, Transformation *transformation)
World::addSphere	World.h	/^        void addSphere(Point, myFloat, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, myFloat, Material *, Transformation * = NULL)
World::addSphere	backup/World.cc	/^void World::addSphere(Point position, myFloat radius, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point position, myFloat radius, Material *material, Transformation *transformation)
World::addSphere	backup/World.h	/^        void addSphere(Point, myFloat, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, myFloat, Material *, Transformation * = NULL)
World::addTriangle	World.cc	/^void World::addTriangle(Point v0, Point v1, Point v2, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point v0, Point v1, Point v2, Material *material, Transformation *transformation)
World::addTriangle	World.h	/^        void addTriangle(Point, Point, Point, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Point, Point, Material *, Transformation * = NULL)
World::addTriangle	backup/World.cc	/^void World::addTriangle(Point v0, Point v1, Point v2, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point v0, Point v1, Point v2, Material *material, Transformation *transformation)
World::addTriangle	backup/World.h	/^        void addTriangle(Point, Point, Point, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Point, Point, Material *, Transformation * = NULL)
World::bounds	World.h	/^        AABBox bounds;$/;"	m	class:World	access:private
World::bounds	backup/World.h	/^        AABBox bounds;$/;"	m	class:World	access:private
World::createGlossyRay	World.cc	/^Vector World::createGlossyRay(const Vector& normal, const Vector& direction, Random& rNG, myFloat glossiness) const$/;"	f	class:World	signature:(const Vector& normal, const Vector& direction, Random& rNG, myFloat glossiness) const
World::createGlossyRay	World.h	/^        Vector createGlossyRay(const Vector&, const Vector&, Random&, myFloat) const; $/;"	p	class:World	access:private	signature:(const Vector&, const Vector&, Random&, myFloat) const
World::createGlossyRay	backup/World.cc	/^Vector World::createGlossyRay(const Vector& normal, const Vector& direction, Random& rNG, myFloat glossiness) const$/;"	f	class:World	signature:(const Vector& normal, const Vector& direction, Random& rNG, myFloat glossiness) const
World::createGlossyRay	backup/World.h	/^        Vector createGlossyRay(const Vector&, const Vector&, Random&, myFloat) const; $/;"	p	class:World	access:private	signature:(const Vector&, const Vector&, Random&, myFloat) const
World::createRandomRay	World.cc	/^Vector World::createRandomRay(const Vector& normal, Random& rNG) const $/;"	f	class:World	signature:(const Vector& normal, Random& rNG) const
World::createRandomRay	World.h	/^        Vector createRandomRay(const Vector&,  Random&) const;$/;"	p	class:World	access:private	signature:(const Vector&, Random&) const
World::createRandomRay	backup/World.cc	/^Vector World::createRandomRay(const Vector& normal, Random& rNG) const $/;"	f	class:World	signature:(const Vector& normal, Random& rNG) const
World::createRandomRay	backup/World.h	/^        Vector createRandomRay(const Vector&,  Random&) const;$/;"	p	class:World	access:private	signature:(const Vector&, Random&) const
World::createRefractiveRay	World.cc	/^Vector World::createRefractiveRay(Vector normal, const Vector& direction, myFloat n1, myFloat n2) const$/;"	f	class:World	signature:(Vector normal, const Vector& direction, myFloat n1, myFloat n2) const
World::createRefractiveRay	World.h	/^        Vector createRefractiveRay(Vector, const Vector&, myFloat, myFloat) const;$/;"	p	class:World	access:private	signature:(Vector, const Vector&, myFloat, myFloat) const
World::createRefractiveRay	backup/World.cc	/^Vector World::createRefractiveRay(Vector normal, const Vector& direction, myFloat n1, myFloat n2) const$/;"	f	class:World	signature:(Vector normal, const Vector& direction, myFloat n1, myFloat n2) const
World::createRefractiveRay	backup/World.h	/^        Vector createRefractiveRay(Vector, const Vector&, myFloat, myFloat) const;$/;"	p	class:World	access:private	signature:(Vector, const Vector&, myFloat, myFloat) const
World::createSpecularRay	World.cc	/^Vector World::createSpecularRay(const Vector& normal, const Vector& direction) const$/;"	f	class:World	signature:(const Vector& normal, const Vector& direction) const
World::createSpecularRay	World.h	/^        Vector createSpecularRay(const Vector&, const Vector&) const; $/;"	p	class:World	access:private	signature:(const Vector&, const Vector&) const
World::createSpecularRay	backup/World.cc	/^Vector World::createSpecularRay(const Vector& normal, const Vector& direction) const$/;"	f	class:World	signature:(const Vector& normal, const Vector& direction) const
World::createSpecularRay	backup/World.h	/^        Vector createSpecularRay(const Vector&, const Vector&) const; $/;"	p	class:World	access:private	signature:(const Vector&, const Vector&) const
World::initialize	World.cc	/^void World::initialize()$/;"	f	class:World	signature:()
World::initialize	World.h	/^        void initialize();$/;"	p	class:World	access:public	signature:()
World::initialize	backup/World.cc	/^void World::initialize()$/;"	f	class:World	signature:()
World::initialize	backup/World.h	/^        void initialize();$/;"	p	class:World	access:public	signature:()
World::kDTree	World.h	/^        KDTree *kDTree;$/;"	m	class:World	access:private
World::kDTree	backup/World.h	/^        KDTree *kDTree;$/;"	m	class:World	access:private
World::lightCount	World.cc	/^unsigned int World::lightCount() const$/;"	f	class:World	signature:() const
World::lightCount	World.h	/^        unsigned int lightCount() const;$/;"	p	class:World	access:public	signature:() const
World::lightCount	backup/World.cc	/^unsigned int World::lightCount() const$/;"	f	class:World	signature:() const
World::lightCount	backup/World.h	/^        unsigned int lightCount() const;$/;"	p	class:World	access:public	signature:() const
World::lightVector	World.h	/^        std::vector<Object*> lightVector;$/;"	m	class:World	access:private
World::lightVector	backup/World.h	/^        std::vector<Object*> lightVector;$/;"	m	class:World	access:private
World::objectCount	World.cc	/^unsigned int World::objectCount() const$/;"	f	class:World	signature:() const
World::objectCount	World.h	/^        unsigned int objectCount() const;$/;"	p	class:World	access:public	signature:() const
World::objectCount	backup/World.cc	/^unsigned int World::objectCount() const$/;"	f	class:World	signature:() const
World::objectCount	backup/World.h	/^        unsigned int objectCount() const;$/;"	p	class:World	access:public	signature:() const
World::objectVector	World.h	/^        std::vector<Object*> objectVector;$/;"	m	class:World	access:private
World::objectVector	backup/World.h	/^        std::vector<Object*> objectVector;$/;"	m	class:World	access:private
World::skyDome	World.h	/^        SkyDome skyDome;$/;"	m	class:World	access:public
World::skyDome	backup/World.h	/^        SkyDome skyDome;$/;"	m	class:World	access:public
World::trace	World.cc	/^Vector World::trace(Ray ray, Random& rNG) const$/;"	f	class:World	signature:(Ray ray, Random& rNG) const
World::trace	World.h	/^        Vector trace(Ray, Random&) const;$/;"	p	class:World	access:public	signature:(Ray, Random&) const
World::trace	backup/World.cc	/^Vector World::trace(Ray ray, Random& rNG) const$/;"	f	class:World	signature:(Ray ray, Random& rNG) const
World::trace	backup/World.h	/^        Vector trace(Ray, Random&) const;$/;"	p	class:World	access:public	signature:(Ray, Random&) const
World::~World	World.cc	/^World::~World()$/;"	f	class:World	signature:()
World::~World	World.h	/^        ~World();$/;"	p	class:World	access:public	signature:()
World::~World	backup/World.cc	/^World::~World()$/;"	f	class:World	signature:()
World::~World	backup/World.h	/^        ~World();$/;"	p	class:World	access:public	signature:()
XAXIS	KDNode.h	/^enum Axes {XAXIS, YAXIS, ZAXIS, LEAF};$/;"	e	enum:Axes
XAXIS	backup/KDNode.h	/^enum Axes {XAXIS, YAXIS, ZAXIS, LEAF};$/;"	e	enum:Axes
XWindow	XWindow.cc	/^XWindow::XWindow(unsigned int width, unsigned int height, char * windowTitle, char * windowClass, char * windowResource)$/;"	f	class:XWindow	signature:(unsigned int width, unsigned int height, char * windowTitle, char * windowClass, char * windowResource)
XWindow	XWindow.h	/^        XWindow(unsigned int, unsigned int, char *, char *, char *);$/;"	p	class:XWindow	access:public	signature:(unsigned int, unsigned int, char *, char *, char *)
XWindow	XWindow.h	/^class XWindow$/;"	c
XWindow	backup/XWindow.cc	/^XWindow::XWindow(unsigned int width, unsigned int height, char * windowTitle, char * windowClass, char * windowResource)$/;"	f	class:XWindow	signature:(unsigned int width, unsigned int height, char * windowTitle, char * windowClass, char * windowResource)
XWindow	backup/XWindow.h	/^        XWindow(unsigned int, unsigned int, char *, char *, char *);$/;"	p	class:XWindow	access:public	signature:(unsigned int, unsigned int, char *, char *, char *)
XWindow	backup/XWindow.h	/^class XWindow$/;"	c
XWindow	test/XWindow.c++	/^XWindow::XWindow(unsigned int width, unsigned int height, char * windowTitle)$/;"	f	class:XWindow	signature:(unsigned int width, unsigned int height, char * windowTitle)
XWindow	test/XWindow.h	/^        XWindow(unsigned int, unsigned int, char *);$/;"	p	class:XWindow	access:public	signature:(unsigned int, unsigned int, char *)
XWindow	test/XWindow.h	/^class XWindow$/;"	c
XWindow::XWindow	XWindow.cc	/^XWindow::XWindow(unsigned int width, unsigned int height, char * windowTitle, char * windowClass, char * windowResource)$/;"	f	class:XWindow	signature:(unsigned int width, unsigned int height, char * windowTitle, char * windowClass, char * windowResource)
XWindow::XWindow	XWindow.h	/^        XWindow(unsigned int, unsigned int, char *, char *, char *);$/;"	p	class:XWindow	access:public	signature:(unsigned int, unsigned int, char *, char *, char *)
XWindow::XWindow	backup/XWindow.cc	/^XWindow::XWindow(unsigned int width, unsigned int height, char * windowTitle, char * windowClass, char * windowResource)$/;"	f	class:XWindow	signature:(unsigned int width, unsigned int height, char * windowTitle, char * windowClass, char * windowResource)
XWindow::XWindow	backup/XWindow.h	/^        XWindow(unsigned int, unsigned int, char *, char *, char *);$/;"	p	class:XWindow	access:public	signature:(unsigned int, unsigned int, char *, char *, char *)
XWindow::XWindow	test/XWindow.c++	/^XWindow::XWindow(unsigned int width, unsigned int height, char * windowTitle)$/;"	f	class:XWindow	signature:(unsigned int width, unsigned int height, char * windowTitle)
XWindow::XWindow	test/XWindow.h	/^        XWindow(unsigned int, unsigned int, char *);$/;"	p	class:XWindow	access:public	signature:(unsigned int, unsigned int, char *)
XWindow::buffer	test/XWindow.h	/^        Pixmap buffer;$/;"	m	class:XWindow	access:private
XWindow::clearBuffer	test/XWindow.c++	/^void XWindow::clearBuffer(void)$/;"	f	class:XWindow	signature:(void)
XWindow::clearBuffer	test/XWindow.h	/^        void clearBuffer(void);$/;"	p	class:XWindow	access:public	signature:(void)
XWindow::display	XWindow.h	/^        Display *display;$/;"	m	class:XWindow	access:private
XWindow::display	backup/XWindow.h	/^        Display *display;$/;"	m	class:XWindow	access:private
XWindow::display	test/XWindow.h	/^        Display *display;$/;"	m	class:XWindow	access:private
XWindow::drawCircle	test/XWindow.c++	/^void XWindow::drawCircle(int x0, int y0, int radius, unsigned int color, bool fill)$/;"	f	class:XWindow	signature:(int x0, int y0, int radius, unsigned int color, bool fill)
XWindow::drawCircle	test/XWindow.h	/^        void drawCircle(int, int, int, unsigned int, bool);$/;"	p	class:XWindow	access:public	signature:(int, int, int, unsigned int, bool)
XWindow::drawLine	test/XWindow.c++	/^void XWindow::drawLine(int x0, int y0, int x1, int y1, unsigned long color, bool toBuffer)$/;"	f	class:XWindow	signature:(int x0, int y0, int x1, int y1, unsigned long color, bool toBuffer)
XWindow::drawLine	test/XWindow.h	/^        void drawLine(int, int, int, int, unsigned long, bool = true);$/;"	p	class:XWindow	access:public	signature:(int, int, int, int, unsigned long, bool = true)
XWindow::drawPoint	XWindow.cc	/^void XWindow::drawPoint(int x, int y, char red, char green, char blue)$/;"	f	class:XWindow	signature:(int x, int y, char red, char green, char blue)
XWindow::drawPoint	XWindow.h	/^        void drawPoint(int, int, char, char, char);$/;"	p	class:XWindow	access:public	signature:(int, int, char, char, char)
XWindow::drawPoint	backup/XWindow.cc	/^void XWindow::drawPoint(int x, int y, char red, char green, char blue)$/;"	f	class:XWindow	signature:(int x, int y, char red, char green, char blue)
XWindow::drawPoint	backup/XWindow.h	/^        void drawPoint(int, int, char, char, char);$/;"	p	class:XWindow	access:public	signature:(int, int, char, char, char)
XWindow::drawPoint	test/XWindow.c++	/^void XWindow::drawPoint(int x, int y, char red, char green, char blue)$/;"	f	class:XWindow	signature:(int x, int y, char red, char green, char blue)
XWindow::drawPoint	test/XWindow.c++	/^void XWindow::drawPoint(int x, int y, unsigned long color, bool toBuffer)$/;"	f	class:XWindow	signature:(int x, int y, unsigned long color, bool toBuffer)
XWindow::drawPoint	test/XWindow.h	/^        void drawPoint(int, int, char, char, char);$/;"	p	class:XWindow	access:public	signature:(int, int, char, char, char)
XWindow::drawPoint	test/XWindow.h	/^        void drawPoint(int, int, unsigned long, bool = true);$/;"	p	class:XWindow	access:public	signature:(int, int, unsigned long, bool = true)
XWindow::drawRectangle	XWindow.cc	/^void XWindow::drawRectangle(unsigned int xstart, unsigned int ystart, unsigned int xend, unsigned int yend, char red, char green, char blue)$/;"	f	class:XWindow	signature:(unsigned int xstart, unsigned int ystart, unsigned int xend, unsigned int yend, char red, char green, char blue)
XWindow::drawRectangle	XWindow.h	/^        void drawRectangle(unsigned int, unsigned int, unsigned int, unsigned int, char, char, char);$/;"	p	class:XWindow	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, char, char, char)
XWindow::drawRectangle	backup/XWindow.cc	/^void XWindow::drawRectangle(unsigned int xstart, unsigned int ystart, unsigned int xend, unsigned int yend, char red, char green, char blue)$/;"	f	class:XWindow	signature:(unsigned int xstart, unsigned int ystart, unsigned int xend, unsigned int yend, char red, char green, char blue)
XWindow::drawRectangle	backup/XWindow.h	/^        void drawRectangle(unsigned int, unsigned int, unsigned int, unsigned int, char, char, char);$/;"	p	class:XWindow	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, char, char, char)
XWindow::flushBuffer	test/XWindow.c++	/^void XWindow::flushBuffer(void)$/;"	f	class:XWindow	signature:(void)
XWindow::flushBuffer	test/XWindow.h	/^        void flushBuffer(void);$/;"	p	class:XWindow	access:public	signature:(void)
XWindow::flushImage	XWindow.cc	/^void XWindow::flushImage(void)$/;"	f	class:XWindow	signature:(void)
XWindow::flushImage	XWindow.h	/^        void flushImage(void);$/;"	p	class:XWindow	access:public	signature:(void)
XWindow::flushImage	backup/XWindow.cc	/^void XWindow::flushImage(void)$/;"	f	class:XWindow	signature:(void)
XWindow::flushImage	backup/XWindow.h	/^        void flushImage(void);$/;"	p	class:XWindow	access:public	signature:(void)
XWindow::flushImage	test/XWindow.c++	/^void XWindow::flushImage(void)$/;"	f	class:XWindow	signature:(void)
XWindow::flushImage	test/XWindow.h	/^        void flushImage(void);$/;"	p	class:XWindow	access:public	signature:(void)
XWindow::gc	XWindow.h	/^        GC gc;$/;"	m	class:XWindow	access:private
XWindow::gc	backup/XWindow.h	/^        GC gc;$/;"	m	class:XWindow	access:private
XWindow::gc	test/XWindow.h	/^        GC gc;$/;"	m	class:XWindow	access:private
XWindow::getHeight	XWindow.cc	/^int XWindow::getHeight(void) const$/;"	f	class:XWindow	signature:(void) const
XWindow::getHeight	XWindow.h	/^        int getHeight(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
XWindow::getHeight	backup/XWindow.cc	/^int XWindow::getHeight(void) const$/;"	f	class:XWindow	signature:(void) const
XWindow::getHeight	backup/XWindow.h	/^        int getHeight(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
XWindow::getHeight	test/XWindow.c++	/^int XWindow::getHeight(void) const$/;"	f	class:XWindow	signature:(void) const
XWindow::getHeight	test/XWindow.h	/^        int getHeight(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
XWindow::getNextEvent	XWindow.cc	/^void XWindow::getNextEvent(XEvent& event)$/;"	f	class:XWindow	signature:(XEvent& event)
XWindow::getNextEvent	XWindow.h	/^        void getNextEvent(XEvent&);$/;"	p	class:XWindow	access:public	signature:(XEvent&)
XWindow::getNextEvent	backup/XWindow.cc	/^void XWindow::getNextEvent(XEvent& event)$/;"	f	class:XWindow	signature:(XEvent& event)
XWindow::getNextEvent	backup/XWindow.h	/^        void getNextEvent(XEvent&);$/;"	p	class:XWindow	access:public	signature:(XEvent&)
XWindow::getNextEvent	test/XWindow.c++	/^void XWindow::getNextEvent(XEvent& event)$/;"	f	class:XWindow	signature:(XEvent& event)
XWindow::getNextEvent	test/XWindow.h	/^        void getNextEvent(XEvent&);$/;"	p	class:XWindow	access:public	signature:(XEvent&)
XWindow::getWidth	XWindow.cc	/^int XWindow::getWidth(void) const$/;"	f	class:XWindow	signature:(void) const
XWindow::getWidth	XWindow.h	/^        int getWidth(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
XWindow::getWidth	backup/XWindow.cc	/^int XWindow::getWidth(void) const$/;"	f	class:XWindow	signature:(void) const
XWindow::getWidth	backup/XWindow.h	/^        int getWidth(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
XWindow::getWidth	test/XWindow.c++	/^int XWindow::getWidth(void) const$/;"	f	class:XWindow	signature:(void) const
XWindow::getWidth	test/XWindow.h	/^        int getWidth(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
XWindow::image	XWindow.h	/^        XImage *image;$/;"	m	class:XWindow	access:private
XWindow::image	backup/XWindow.h	/^        XImage *image;$/;"	m	class:XWindow	access:private
XWindow::image	test/XWindow.h	/^        XImage *image;$/;"	m	class:XWindow	access:private
XWindow::isPendingEvent	XWindow.cc	/^bool XWindow::isPendingEvent(void) const$/;"	f	class:XWindow	signature:(void) const
XWindow::isPendingEvent	XWindow.h	/^        bool isPendingEvent(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
XWindow::isPendingEvent	backup/XWindow.cc	/^bool XWindow::isPendingEvent(void) const$/;"	f	class:XWindow	signature:(void) const
XWindow::isPendingEvent	backup/XWindow.h	/^        bool isPendingEvent(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
XWindow::isPendingEvent	test/XWindow.c++	/^bool XWindow::isPendingEvent(void) const$/;"	f	class:XWindow	signature:(void) const
XWindow::isPendingEvent	test/XWindow.h	/^        bool isPendingEvent(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
XWindow::pixelData	XWindow.h	/^        char *pixelData;$/;"	m	class:XWindow	access:private
XWindow::pixelData	backup/XWindow.h	/^        char *pixelData;$/;"	m	class:XWindow	access:private
XWindow::pixelData	test/XWindow.h	/^        char *pixelData;$/;"	m	class:XWindow	access:private
XWindow::resizeBuffer	test/XWindow.c++	/^void XWindow::resizeBuffer(void)$/;"	f	class:XWindow	signature:(void)
XWindow::resizeBuffer	test/XWindow.h	/^        void resizeBuffer(void);$/;"	p	class:XWindow	access:public	signature:(void)
XWindow::saveImage	XWindow.cc	/^void XWindow::saveImage(std::string fileName)$/;"	f	class:XWindow	signature:(std::string fileName)
XWindow::saveImage	XWindow.h	/^        void saveImage(std::string);$/;"	p	class:XWindow	access:public	signature:(std::string)
XWindow::saveImage	backup/XWindow.cc	/^void XWindow::saveImage(std::string fileName)$/;"	f	class:XWindow	signature:(std::string fileName)
XWindow::saveImage	backup/XWindow.h	/^        void saveImage(std::string);$/;"	p	class:XWindow	access:public	signature:(std::string)
XWindow::selectInput	XWindow.cc	/^void XWindow::selectInput(long eventMask)$/;"	f	class:XWindow	signature:(long eventMask)
XWindow::selectInput	XWindow.h	/^        void selectInput(long);$/;"	p	class:XWindow	access:public	signature:(long)
XWindow::selectInput	backup/XWindow.cc	/^void XWindow::selectInput(long eventMask)$/;"	f	class:XWindow	signature:(long eventMask)
XWindow::selectInput	backup/XWindow.h	/^        void selectInput(long);$/;"	p	class:XWindow	access:public	signature:(long)
XWindow::selectInput	test/XWindow.c++	/^void XWindow::selectInput(long eventMask)$/;"	f	class:XWindow	signature:(long eventMask)
XWindow::selectInput	test/XWindow.h	/^        void selectInput(long);$/;"	p	class:XWindow	access:public	signature:(long)
XWindow::window	XWindow.h	/^        Window window;$/;"	m	class:XWindow	access:private
XWindow::window	backup/XWindow.h	/^        Window window;$/;"	m	class:XWindow	access:private
XWindow::window	test/XWindow.h	/^        Window window;$/;"	m	class:XWindow	access:private
XWindow::windowHeight	XWindow.h	/^        unsigned int windowHeight;$/;"	m	class:XWindow	access:private
XWindow::windowHeight	backup/XWindow.h	/^        unsigned int windowHeight;$/;"	m	class:XWindow	access:private
XWindow::windowHeight	test/XWindow.h	/^        unsigned int windowHeight;$/;"	m	class:XWindow	access:public
XWindow::windowWidth	XWindow.h	/^        unsigned int windowWidth;$/;"	m	class:XWindow	access:private
XWindow::windowWidth	backup/XWindow.h	/^        unsigned int windowWidth;$/;"	m	class:XWindow	access:private
XWindow::windowWidth	test/XWindow.h	/^        unsigned int windowWidth;$/;"	m	class:XWindow	access:public
XWindow::~XWindow	XWindow.cc	/^XWindow::~XWindow(void)$/;"	f	class:XWindow	signature:(void)
XWindow::~XWindow	XWindow.h	/^        ~XWindow(void);$/;"	p	class:XWindow	access:public	signature:(void)
XWindow::~XWindow	backup/XWindow.cc	/^XWindow::~XWindow(void)$/;"	f	class:XWindow	signature:(void)
XWindow::~XWindow	backup/XWindow.h	/^        ~XWindow(void);$/;"	p	class:XWindow	access:public	signature:(void)
XWindow::~XWindow	test/XWindow.c++	/^XWindow::~XWindow(void)$/;"	f	class:XWindow	signature:(void)
XWindow::~XWindow	test/XWindow.h	/^        ~XWindow(void);$/;"	p	class:XWindow	access:public	signature:(void)
YAXIS	KDNode.h	/^enum Axes {XAXIS, YAXIS, ZAXIS, LEAF};$/;"	e	enum:Axes
YAXIS	backup/KDNode.h	/^enum Axes {XAXIS, YAXIS, ZAXIS, LEAF};$/;"	e	enum:Axes
ZAXIS	KDNode.h	/^enum Axes {XAXIS, YAXIS, ZAXIS, LEAF};$/;"	e	enum:Axes
ZAXIS	backup/KDNode.h	/^enum Axes {XAXIS, YAXIS, ZAXIS, LEAF};$/;"	e	enum:Axes
aABBox	Object.h	/^        AABBox *aABBox;$/;"	m	class:Object	access:protected
aABBox	backup/Object.h	/^        AABBox *aABBox;$/;"	m	class:Object	access:protected
addBox	World.cc	/^void World::addBox(Point P1, Point P2, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point P1, Point P2, Material *material, Transformation *transformation)
addBox	World.h	/^        void addBox(Point, Point, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Point, Material *, Transformation * = NULL)
addBox	backup/World.cc	/^void World::addBox(Point P1, Point P2, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point P1, Point P2, Material *material, Transformation *transformation)
addBox	backup/World.h	/^        void addBox(Point, Point, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Point, Material *, Transformation * = NULL)
addMesh	World.cc	/^void World::addMesh(std::string fileName, Material *material, Transformation *transformation, bool invert)$/;"	f	class:World	signature:(std::string fileName, Material *material, Transformation *transformation, bool invert)
addMesh	World.h	/^        void addMesh(std::string, Material *, Transformation * = NULL, bool = false);$/;"	p	class:World	access:public	signature:(std::string, Material *, Transformation * = NULL, bool = false)
addMesh	backup/World.cc	/^void World::addMesh(std::string fileName, Material *material, Transformation *transformation, bool invert)$/;"	f	class:World	signature:(std::string fileName, Material *material, Transformation *transformation, bool invert)
addMesh	backup/World.h	/^        void addMesh(std::string, Material *, Transformation * = NULL, bool = false);$/;"	p	class:World	access:public	signature:(std::string, Material *, Transformation * = NULL, bool = false)
addPlane	World.cc	/^void World::addPlane(Point origin, Vector normal, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point origin, Vector normal, Material *material, Transformation *transformation)
addPlane	World.h	/^        void addPlane(Point, Vector, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Vector, Material *, Transformation * = NULL)
addPlane	backup/World.cc	/^void World::addPlane(Point origin, Vector normal, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point origin, Vector normal, Material *material, Transformation *transformation)
addPlane	backup/World.h	/^        void addPlane(Point, Vector, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Vector, Material *, Transformation * = NULL)
addSphere	World.cc	/^void World::addSphere(Point position, myFloat radius, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point position, myFloat radius, Material *material, Transformation *transformation)
addSphere	World.h	/^        void addSphere(Point, myFloat, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, myFloat, Material *, Transformation * = NULL)
addSphere	backup/World.cc	/^void World::addSphere(Point position, myFloat radius, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point position, myFloat radius, Material *material, Transformation *transformation)
addSphere	backup/World.h	/^        void addSphere(Point, myFloat, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, myFloat, Material *, Transformation * = NULL)
addTriangle	World.cc	/^void World::addTriangle(Point v0, Point v1, Point v2, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point v0, Point v1, Point v2, Material *material, Transformation *transformation)
addTriangle	World.h	/^        void addTriangle(Point, Point, Point, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Point, Point, Material *, Transformation * = NULL)
addTriangle	backup/World.cc	/^void World::addTriangle(Point v0, Point v1, Point v2, Material *material, Transformation *transformation)$/;"	f	class:World	signature:(Point v0, Point v1, Point v2, Material *material, Transformation *transformation)
addTriangle	backup/World.h	/^        void addTriangle(Point, Point, Point, Material *, Transformation * = NULL);$/;"	p	class:World	access:public	signature:(Point, Point, Point, Material *, Transformation * = NULL)
angle	Camera.h	/^        myFloat angle;$/;"	m	class:Camera	access:private
angle	backup/Camera.h	/^        myFloat angle;$/;"	m	class:Camera	access:private
apertureRadius	Camera.h	/^        myFloat apertureRadius;$/;"	m	class:Camera	access:private
apertureRadius	backup/Camera.h	/^        myFloat apertureRadius;$/;"	m	class:Camera	access:private
axis	KDNode.h	/^    Axes axis; \/\/4 bytes$/;"	m	struct:KDNode	access:public
axis	backup/KDNode.h	/^    Axes axis; \/\/4 bytes$/;"	m	struct:KDNode	access:public
bBox	KDSplitElement.h	/^    AABBox *bBox;$/;"	m	struct:KDSplitElement	access:public
bBox	backup/KDSplitElement.h	/^    AABBox *bBox;$/;"	m	struct:KDSplitElement	access:public
bSphere	Object.h	/^        BSphere *bSphere;$/;"	m	class:Object	access:protected
bSphere	backup/Object.h	/^        BSphere *bSphere;$/;"	m	class:Object	access:protected
boundByAABBox	Object.h	/^        virtual AABBox *boundByAABBox() { return NULL; }$/;"	f	class:Object	access:public	signature:()
boundByAABBox	Sphere.cc	/^AABBox *Sphere::boundByAABBox()$/;"	f	class:Sphere	signature:()
boundByAABBox	Sphere.h	/^        AABBox *boundByAABBox();$/;"	p	class:Sphere	access:public	signature:()
boundByAABBox	Triangle.cc	/^AABBox *Triangle::boundByAABBox()$/;"	f	class:Triangle	signature:()
boundByAABBox	Triangle.h	/^        AABBox *boundByAABBox();$/;"	p	class:Triangle	access:public	signature:()
boundByAABBox	backup/Object.h	/^        virtual AABBox *boundByAABBox() { return NULL; }$/;"	f	class:Object	access:public	signature:()
boundByAABBox	backup/Sphere.cc	/^AABBox *Sphere::boundByAABBox()$/;"	f	class:Sphere	signature:()
boundByAABBox	backup/Sphere.h	/^        AABBox *boundByAABBox();$/;"	p	class:Sphere	access:public	signature:()
boundByAABBox	backup/Triangle.cc	/^AABBox *Triangle::boundByAABBox()$/;"	f	class:Triangle	signature:()
boundByAABBox	backup/Triangle.h	/^        AABBox *boundByAABBox();$/;"	p	class:Triangle	access:public	signature:()
boundByBSphere	Box.cc	/^BSphere *Box::boundByBSphere()$/;"	f	class:Box	signature:()
boundByBSphere	Box.h	/^        BSphere *boundByBSphere();$/;"	p	class:Box	access:public	signature:()
boundByBSphere	Object.h	/^        virtual BSphere *boundByBSphere() { return NULL; }$/;"	f	class:Object	access:public	signature:()
boundByBSphere	Sphere.cc	/^BSphere *Sphere::boundByBSphere()$/;"	f	class:Sphere	signature:()
boundByBSphere	Sphere.h	/^        BSphere *boundByBSphere();$/;"	p	class:Sphere	access:public	signature:()
boundByBSphere	Triangle.cc	/^BSphere *Triangle::boundByBSphere()$/;"	f	class:Triangle	signature:()
boundByBSphere	Triangle.h	/^        BSphere *boundByBSphere();$/;"	p	class:Triangle	access:public	signature:()
boundByBSphere	backup/Box.cc	/^BSphere *Box::boundByBSphere()$/;"	f	class:Box	signature:()
boundByBSphere	backup/Box.h	/^        BSphere *boundByBSphere();$/;"	p	class:Box	access:public	signature:()
boundByBSphere	backup/Object.h	/^        virtual BSphere *boundByBSphere() { return NULL; }$/;"	f	class:Object	access:public	signature:()
boundByBSphere	backup/Sphere.cc	/^BSphere *Sphere::boundByBSphere()$/;"	f	class:Sphere	signature:()
boundByBSphere	backup/Sphere.h	/^        BSphere *boundByBSphere();$/;"	p	class:Sphere	access:public	signature:()
boundByBSphere	backup/Triangle.cc	/^BSphere *Triangle::boundByBSphere()$/;"	f	class:Triangle	signature:()
boundByBSphere	backup/Triangle.h	/^        BSphere *boundByBSphere();$/;"	p	class:Triangle	access:public	signature:()
bounds	World.h	/^        AABBox bounds;$/;"	m	class:World	access:private
bounds	backup/World.h	/^        AABBox bounds;$/;"	m	class:World	access:private
buffer	test/XWindow.h	/^        Pixmap buffer;$/;"	m	class:XWindow	access:private
camera	RenderThread.h	/^        Camera *camera;$/;"	m	class:RenderThread	access:private
camera	Renderer.h	/^        Camera *camera;$/;"	m	class:Renderer	access:private
camera	UIThread.h	/^        Camera *camera;$/;"	m	class:UIThread	access:private
camera	backup/RenderThread.h	/^        Camera *camera;$/;"	m	class:RenderThread	access:private
camera	backup/Renderer.h	/^        Camera *camera;$/;"	m	class:Renderer	access:private
camera	backup/UIThread.h	/^        Camera *camera;$/;"	m	class:UIThread	access:private
catchUp	RectangleInfo.h	/^    bool catchUp;$/;"	m	struct:RectangleInfo	access:public
catchUp	backup/RectangleInfo.h	/^    bool catchUp;$/;"	m	struct:RectangleInfo	access:public
children	KDNode.h	/^        struct KDNode *children; \/\/8bytes$/;"	m	union:KDNode::__anon4	typeref:struct:KDNode::__anon4::KDNode	access:public
children	backup/KDNode.h	/^        struct KDNode *children; \/\/8bytes$/;"	m	union:KDNode::__anon1	typeref:struct:KDNode::__anon1::KDNode	access:public
clear	Film.cc	/^void Film::clear(void)$/;"	f	class:Film	signature:(void)
clear	Film.h	/^        void clear();$/;"	p	class:Film	access:public	signature:()
clear	backup/Film.cc	/^void Film::clear(void)$/;"	f	class:Film	signature:(void)
clear	backup/Film.h	/^        void clear();$/;"	p	class:Film	access:public	signature:()
clearBuffer	test/XWindow.c++	/^void XWindow::clearBuffer(void)$/;"	f	class:XWindow	signature:(void)
clearBuffer	test/XWindow.h	/^        void clearBuffer(void);$/;"	p	class:XWindow	access:public	signature:(void)
colors	Material.h	/^        std::vector<Vector> colors;$/;"	m	class:Material	access:private
colors	backup/Material.h	/^        std::vector<Vector> colors;$/;"	m	class:Material	access:private
combine	Vector.h	/^        Vector combine(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
combine	backup/Vector.h	/^        Vector combine(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
counter	Film.h	/^        unsigned int counter;$/;"	m	class:Film	access:private
counter	backup/Film.h	/^        unsigned int counter;$/;"	m	class:Film	access:private
createBiasRay	World.cc	/^Vector createBiasRay(Random& rNG, myFloat y) $/;"	f	signature:(Random& rNG, myFloat y)
createBiasRay	backup/World.cc	/^Vector createBiasRay(Random& rNG, myFloat y) $/;"	f	signature:(Random& rNG, myFloat y)
createGlossyRay	World.cc	/^Vector World::createGlossyRay(const Vector& normal, const Vector& direction, Random& rNG, myFloat glossiness) const$/;"	f	class:World	signature:(const Vector& normal, const Vector& direction, Random& rNG, myFloat glossiness) const
createGlossyRay	World.h	/^        Vector createGlossyRay(const Vector&, const Vector&, Random&, myFloat) const; $/;"	p	class:World	access:private	signature:(const Vector&, const Vector&, Random&, myFloat) const
createGlossyRay	backup/World.cc	/^Vector World::createGlossyRay(const Vector& normal, const Vector& direction, Random& rNG, myFloat glossiness) const$/;"	f	class:World	signature:(const Vector& normal, const Vector& direction, Random& rNG, myFloat glossiness) const
createGlossyRay	backup/World.h	/^        Vector createGlossyRay(const Vector&, const Vector&, Random&, myFloat) const; $/;"	p	class:World	access:private	signature:(const Vector&, const Vector&, Random&, myFloat) const
createInitialRay	Camera.cc	/^Ray Camera::createInitialRay(unsigned int x, unsigned int y, Random &rNG) const $/;"	f	class:Camera	signature:(unsigned int x, unsigned int y, Random &rNG) const
createInitialRay	Camera.h	/^        Ray createInitialRay(unsigned int, unsigned int, Random&) const;$/;"	p	class:Camera	access:public	signature:(unsigned int, unsigned int, Random&) const
createInitialRay	backup/Camera.cc	/^Ray Camera::createInitialRay(unsigned int x, unsigned int y, Random &rNG) const $/;"	f	class:Camera	signature:(unsigned int x, unsigned int y, Random &rNG) const
createInitialRay	backup/Camera.h	/^        Ray createInitialRay(unsigned int, unsigned int, Random&) const;$/;"	p	class:Camera	access:public	signature:(unsigned int, unsigned int, Random&) const
createInverse	Transformation.h	/^        void createInverse()$/;"	f	class:Transformation	access:public	signature:()
createInverse	backup/Transformation.h	/^        void createInverse()$/;"	f	class:Transformation	access:public	signature:()
createRandomRay	BSphere.cc	/^Vector BSphere::createRandomRay(const Point& target, Random& rNG, myFloat y) const $/;"	f	class:BSphere	signature:(const Point& target, Random& rNG, myFloat y) const
createRandomRay	BSphere.h	/^        Vector createRandomRay(const Point&, Random&, myFloat) const;$/;"	p	class:BSphere	access:public	signature:(const Point&, Random&, myFloat) const
createRandomRay	World.cc	/^Vector World::createRandomRay(const Vector& normal, Random& rNG) const $/;"	f	class:World	signature:(const Vector& normal, Random& rNG) const
createRandomRay	World.h	/^        Vector createRandomRay(const Vector&,  Random&) const;$/;"	p	class:World	access:private	signature:(const Vector&, Random&) const
createRandomRay	backup/BSphere.cc	/^Vector BSphere::createRandomRay(const Point& target, Random& rNG, myFloat y) const $/;"	f	class:BSphere	signature:(const Point& target, Random& rNG, myFloat y) const
createRandomRay	backup/BSphere.h	/^        Vector createRandomRay(const Point&, Random&, myFloat) const;$/;"	p	class:BSphere	access:public	signature:(const Point&, Random&, myFloat) const
createRandomRay	backup/World.cc	/^Vector World::createRandomRay(const Vector& normal, Random& rNG) const $/;"	f	class:World	signature:(const Vector& normal, Random& rNG) const
createRandomRay	backup/World.h	/^        Vector createRandomRay(const Vector&,  Random&) const;$/;"	p	class:World	access:private	signature:(const Vector&, Random&) const
createRefractiveRay	World.cc	/^Vector World::createRefractiveRay(Vector normal, const Vector& direction, myFloat n1, myFloat n2) const$/;"	f	class:World	signature:(Vector normal, const Vector& direction, myFloat n1, myFloat n2) const
createRefractiveRay	World.h	/^        Vector createRefractiveRay(Vector, const Vector&, myFloat, myFloat) const;$/;"	p	class:World	access:private	signature:(Vector, const Vector&, myFloat, myFloat) const
createRefractiveRay	backup/World.cc	/^Vector World::createRefractiveRay(Vector normal, const Vector& direction, myFloat n1, myFloat n2) const$/;"	f	class:World	signature:(Vector normal, const Vector& direction, myFloat n1, myFloat n2) const
createRefractiveRay	backup/World.h	/^        Vector createRefractiveRay(Vector, const Vector&, myFloat, myFloat) const;$/;"	p	class:World	access:private	signature:(Vector, const Vector&, myFloat, myFloat) const
createSpecularRay	World.cc	/^Vector World::createSpecularRay(const Vector& normal, const Vector& direction) const$/;"	f	class:World	signature:(const Vector& normal, const Vector& direction) const
createSpecularRay	World.h	/^        Vector createSpecularRay(const Vector&, const Vector&) const; $/;"	p	class:World	access:private	signature:(const Vector&, const Vector&) const
createSpecularRay	backup/World.cc	/^Vector World::createSpecularRay(const Vector& normal, const Vector& direction) const$/;"	f	class:World	signature:(const Vector& normal, const Vector& direction) const
createSpecularRay	backup/World.h	/^        Vector createSpecularRay(const Vector&, const Vector&) const; $/;"	p	class:World	access:private	signature:(const Vector&, const Vector&) const
cross	Vector.h	/^        Vector cross(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
cross	backup/Vector.h	/^        Vector cross(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
destroy	KDTree.cc	/^void KDTree::destroy(KDNode *node)$/;"	f	class:KDTree	signature:(KDNode *node)
destroy	KDTree.h	/^        void destroy(KDNode *);$/;"	p	class:KDTree	access:private	signature:(KDNode *)
destroy	backup/KDTree.cc	/^void KDTree::destroy(KDNode *node)$/;"	f	class:KDTree	signature:(KDNode *node)
destroy	backup/KDTree.h	/^        void destroy(KDNode *);$/;"	p	class:KDTree	access:private	signature:(KDNode *)
direction	Camera.h	/^        Vector direction;$/;"	m	class:Camera	access:private
direction	Ray.h	/^        Vector direction;$/;"	m	class:Ray	access:public
direction	backup/Camera.h	/^        Vector direction;$/;"	m	class:Camera	access:private
direction	backup/Ray.h	/^        Vector direction;$/;"	m	class:Ray	access:public
display	XWindow.h	/^        Display *display;$/;"	m	class:XWindow	access:private
display	backup/XWindow.h	/^        Display *display;$/;"	m	class:XWindow	access:private
display	test/XWindow.h	/^        Display *display;$/;"	m	class:XWindow	access:private
displayProgramInfo	backup/main.cc	/^void displayProgramInfo(void)$/;"	f	signature:(void)
displayProgramInfo	main.cc	/^void displayProgramInfo(void)$/;"	f	signature:(void)
distance	Intersection.h	/^    myFloat distance;$/;"	m	struct:Intersection	access:public
distance	KDStackElement.h	/^    myFloat distance;$/;"	m	struct:KDStackElement	access:public
distance	backup/Intersection.h	/^    myFloat distance;$/;"	m	struct:Intersection	access:public
distance	backup/KDStackElement.h	/^    myFloat distance;$/;"	m	struct:KDStackElement	access:public
dot	Vector.h	/^        myFloat dot(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
dot	backup/Vector.h	/^        myFloat dot(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
drawBuffer	UIThread.cc	/^void UIThread::drawBuffer(void)$/;"	f	class:UIThread	signature:(void)
drawBuffer	UIThread.h	/^        void drawBuffer(void);$/;"	p	class:UIThread	access:private	signature:(void)
drawBuffer	backup/UIThread.cc	/^void UIThread::drawBuffer(void)$/;"	f	class:UIThread	signature:(void)
drawBuffer	backup/UIThread.h	/^        void drawBuffer(void);$/;"	p	class:UIThread	access:private	signature:(void)
drawCircle	test/XWindow.c++	/^void XWindow::drawCircle(int x0, int y0, int radius, unsigned int color, bool fill)$/;"	f	class:XWindow	signature:(int x0, int y0, int radius, unsigned int color, bool fill)
drawCircle	test/XWindow.h	/^        void drawCircle(int, int, int, unsigned int, bool);$/;"	p	class:XWindow	access:public	signature:(int, int, int, unsigned int, bool)
drawLine	test/XWindow.c++	/^void XWindow::drawLine(int x0, int y0, int x1, int y1, unsigned long color, bool toBuffer)$/;"	f	class:XWindow	signature:(int x0, int y0, int x1, int y1, unsigned long color, bool toBuffer)
drawLine	test/XWindow.h	/^        void drawLine(int, int, int, int, unsigned long, bool = true);$/;"	p	class:XWindow	access:public	signature:(int, int, int, int, unsigned long, bool = true)
drawPoint	XWindow.cc	/^void XWindow::drawPoint(int x, int y, char red, char green, char blue)$/;"	f	class:XWindow	signature:(int x, int y, char red, char green, char blue)
drawPoint	XWindow.h	/^        void drawPoint(int, int, char, char, char);$/;"	p	class:XWindow	access:public	signature:(int, int, char, char, char)
drawPoint	backup/XWindow.cc	/^void XWindow::drawPoint(int x, int y, char red, char green, char blue)$/;"	f	class:XWindow	signature:(int x, int y, char red, char green, char blue)
drawPoint	backup/XWindow.h	/^        void drawPoint(int, int, char, char, char);$/;"	p	class:XWindow	access:public	signature:(int, int, char, char, char)
drawPoint	test/XWindow.c++	/^void XWindow::drawPoint(int x, int y, char red, char green, char blue)$/;"	f	class:XWindow	signature:(int x, int y, char red, char green, char blue)
drawPoint	test/XWindow.c++	/^void XWindow::drawPoint(int x, int y, unsigned long color, bool toBuffer)$/;"	f	class:XWindow	signature:(int x, int y, unsigned long color, bool toBuffer)
drawPoint	test/XWindow.h	/^        void drawPoint(int, int, char, char, char);$/;"	p	class:XWindow	access:public	signature:(int, int, char, char, char)
drawPoint	test/XWindow.h	/^        void drawPoint(int, int, unsigned long, bool = true);$/;"	p	class:XWindow	access:public	signature:(int, int, unsigned long, bool = true)
drawRectangle	XWindow.cc	/^void XWindow::drawRectangle(unsigned int xstart, unsigned int ystart, unsigned int xend, unsigned int yend, char red, char green, char blue)$/;"	f	class:XWindow	signature:(unsigned int xstart, unsigned int ystart, unsigned int xend, unsigned int yend, char red, char green, char blue)
drawRectangle	XWindow.h	/^        void drawRectangle(unsigned int, unsigned int, unsigned int, unsigned int, char, char, char);$/;"	p	class:XWindow	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, char, char, char)
drawRectangle	backup/XWindow.cc	/^void XWindow::drawRectangle(unsigned int xstart, unsigned int ystart, unsigned int xend, unsigned int yend, char red, char green, char blue)$/;"	f	class:XWindow	signature:(unsigned int xstart, unsigned int ystart, unsigned int xend, unsigned int yend, char red, char green, char blue)
drawRectangle	backup/XWindow.h	/^        void drawRectangle(unsigned int, unsigned int, unsigned int, unsigned int, char, char, char);$/;"	p	class:XWindow	access:public	signature:(unsigned int, unsigned int, unsigned int, unsigned int, char, char, char)
edge1	Triangle.h	/^        Vector edge1,edge2;$/;"	m	class:Triangle	access:private
edge1	backup/Triangle.h	/^        Vector edge1,edge2;$/;"	m	class:Triangle	access:private
edge2	Triangle.h	/^        Vector edge1,edge2;$/;"	m	class:Triangle	access:private
edge2	backup/Triangle.h	/^        Vector edge1,edge2;$/;"	m	class:Triangle	access:private
emitting	Material.h	/^        bool emitting;$/;"	m	class:Material	access:private
emitting	backup/Material.h	/^        bool emitting;$/;"	m	class:Material	access:private
execute	RenderThread.cc	/^void RenderThread::execute(void* arg)$/;"	f	class:RenderThread	signature:(void* arg)
execute	RenderThread.h	/^        void execute(void *);$/;"	p	class:RenderThread	access:public	signature:(void *)
execute	Thread.h	/^        virtual void execute(void* arg) =0;$/;"	p	class:Thread	access:protected	signature:(void* arg)
execute	UIThread.cc	/^void UIThread::execute(void * arg)$/;"	f	class:UIThread	signature:(void * arg)
execute	UIThread.h	/^        void execute(void *);$/;"	p	class:UIThread	access:public	signature:(void *)
execute	backup/RenderThread.cc	/^void RenderThread::execute(void* arg)$/;"	f	class:RenderThread	signature:(void* arg)
execute	backup/RenderThread.h	/^        void execute(void *);$/;"	p	class:RenderThread	access:public	signature:(void *)
execute	backup/Thread.h	/^        virtual void execute(void* arg) =0;$/;"	p	class:Thread	access:protected	signature:(void* arg)
execute	backup/UIThread.cc	/^void UIThread::execute(void * arg)$/;"	f	class:UIThread	signature:(void * arg)
execute	backup/UIThread.h	/^        void execute(void *);$/;"	p	class:UIThread	access:public	signature:(void *)
film	Camera.h	/^        Film film;$/;"	m	class:Camera	access:private
film	RenderThread.h	/^        Film *film;$/;"	m	class:RenderThread	access:private
film	UIThread.h	/^        Film *film;$/;"	m	class:UIThread	access:private
film	backup/Camera.h	/^        Film film;$/;"	m	class:Camera	access:private
film	backup/RenderThread.h	/^        Film *film;$/;"	m	class:RenderThread	access:private
film	backup/UIThread.h	/^        Film *film;$/;"	m	class:UIThread	access:private
flushBuffer	test/XWindow.c++	/^void XWindow::flushBuffer(void)$/;"	f	class:XWindow	signature:(void)
flushBuffer	test/XWindow.h	/^        void flushBuffer(void);$/;"	p	class:XWindow	access:public	signature:(void)
flushImage	XWindow.cc	/^void XWindow::flushImage(void)$/;"	f	class:XWindow	signature:(void)
flushImage	XWindow.h	/^        void flushImage(void);$/;"	p	class:XWindow	access:public	signature:(void)
flushImage	backup/XWindow.cc	/^void XWindow::flushImage(void)$/;"	f	class:XWindow	signature:(void)
flushImage	backup/XWindow.h	/^        void flushImage(void);$/;"	p	class:XWindow	access:public	signature:(void)
flushImage	test/XWindow.c++	/^void XWindow::flushImage(void)$/;"	f	class:XWindow	signature:(void)
flushImage	test/XWindow.h	/^        void flushImage(void);$/;"	p	class:XWindow	access:public	signature:(void)
focalDistance	Camera.h	/^        myFloat focalDistance;$/;"	m	class:Camera	access:private
focalDistance	backup/Camera.h	/^        myFloat focalDistance;$/;"	m	class:Camera	access:private
fullScreen	RectangleInfo.h	/^    bool fullScreen;$/;"	m	struct:RectangleInfo	access:public
fullScreen	backup/RectangleInfo.h	/^    bool fullScreen;$/;"	m	struct:RectangleInfo	access:public
gc	XWindow.h	/^        GC gc;$/;"	m	class:XWindow	access:private
gc	backup/XWindow.h	/^        GC gc;$/;"	m	class:XWindow	access:private
gc	test/XWindow.h	/^        GC gc;$/;"	m	class:XWindow	access:private
getAABBox	Object.h	/^        AABBox *getAABBox() const$/;"	f	class:Object	access:public	signature:() const
getAABBox	backup/Object.h	/^        AABBox *getAABBox() const$/;"	f	class:Object	access:public	signature:() const
getBSphere	Object.h	/^        BSphere *getBSphere() const$/;"	f	class:Object	access:public	signature:() const
getBSphere	backup/Object.h	/^        BSphere *getBSphere() const$/;"	f	class:Object	access:public	signature:() const
getColor	Material.h	/^        Vector getColor(Point& p) const$/;"	f	class:Material	access:public	signature:(Point& p) const
getColor	backup/Material.h	/^        Vector getColor(Point& p) const$/;"	f	class:Material	access:public	signature:(Point& p) const
getFilm	Camera.cc	/^Film *Camera::getFilm(void)$/;"	f	class:Camera	signature:(void)
getFilm	Camera.h	/^        Film *getFilm(void);$/;"	p	class:Camera	access:public	signature:(void)
getFilm	backup/Camera.cc	/^Film *Camera::getFilm(void)$/;"	f	class:Camera	signature:(void)
getFilm	backup/Camera.h	/^        Film *getFilm(void);$/;"	p	class:Camera	access:public	signature:(void)
getGlossiness	Material.h	/^        myFloat getGlossiness(void) const$/;"	f	class:Material	access:public	signature:(void) const
getGlossiness	backup/Material.h	/^        myFloat getGlossiness(void) const$/;"	f	class:Material	access:public	signature:(void) const
getHeight	Film.cc	/^unsigned int Film::getHeight(void) const$/;"	f	class:Film	signature:(void) const
getHeight	Film.h	/^        unsigned int getHeight() const;$/;"	p	class:Film	access:public	signature:() const
getHeight	XWindow.cc	/^int XWindow::getHeight(void) const$/;"	f	class:XWindow	signature:(void) const
getHeight	XWindow.h	/^        int getHeight(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
getHeight	backup/Film.cc	/^unsigned int Film::getHeight(void) const$/;"	f	class:Film	signature:(void) const
getHeight	backup/Film.h	/^        unsigned int getHeight() const;$/;"	p	class:Film	access:public	signature:() const
getHeight	backup/XWindow.cc	/^int XWindow::getHeight(void) const$/;"	f	class:XWindow	signature:(void) const
getHeight	backup/XWindow.h	/^        int getHeight(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
getHeight	test/XWindow.c++	/^int XWindow::getHeight(void) const$/;"	f	class:XWindow	signature:(void) const
getHeight	test/XWindow.h	/^        int getHeight(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
getINormal	backup/Box.cc	/^Vector Box::getINormal(Point worldPoint) const$/;"	f	class:Box	signature:(Point worldPoint) const
getINormal	backup/Box.h	/^        Vector getINormal(Point) const;$/;"	p	class:Box	access:public	signature:(Point) const
getINormal	backup/Object.h	/^        virtual Vector getINormal(Point) const =0;$/;"	p	class:Object	access:public	signature:(Point) const
getINormal	backup/Plane.cc	/^Vector Plane::getINormal(Point worldPoint) const$/;"	f	class:Plane	signature:(Point worldPoint) const
getINormal	backup/Plane.h	/^        Vector getINormal(Point) const;$/;"	p	class:Plane	access:public	signature:(Point) const
getINormal	backup/Sphere.cc	/^Vector Sphere::getINormal(Point worldPoint) const$/;"	f	class:Sphere	signature:(Point worldPoint) const
getINormal	backup/Sphere.h	/^        Vector getINormal(Point) const;$/;"	p	class:Sphere	access:public	signature:(Point) const
getINormal	backup/Triangle.cc	/^Vector Triangle::getINormal(Point worldPoint) const$/;"	f	class:Triangle	signature:(Point worldPoint) const
getINormal	backup/Triangle.h	/^        Vector getINormal(Point) const;$/;"	p	class:Triangle	access:public	signature:(Point) const
getMaxSamples	Film.cc	/^unsigned int Film::getMaxSamples() const$/;"	f	class:Film	signature:() const
getMaxSamples	Film.h	/^        unsigned int getMaxSamples() const; $/;"	p	class:Film	access:public	signature:() const
getMaxSamples	backup/Film.cc	/^unsigned int Film::getMaxSamples() const$/;"	f	class:Film	signature:() const
getMaxSamples	backup/Film.h	/^        unsigned int getMaxSamples() const; $/;"	p	class:Film	access:public	signature:() const
getMinSamples	Film.cc	/^unsigned int Film::getMinSamples(RectangleInfo *area) const$/;"	f	class:Film	signature:(RectangleInfo *area) const
getMinSamples	Film.h	/^        unsigned int getMinSamples(RectangleInfo *) const; $/;"	p	class:Film	access:public	signature:(RectangleInfo *) const
getMinSamples	backup/Film.cc	/^unsigned int Film::getMinSamples(RectangleInfo *area) const$/;"	f	class:Film	signature:(RectangleInfo *area) const
getMinSamples	backup/Film.h	/^        unsigned int getMinSamples(RectangleInfo *) const; $/;"	p	class:Film	access:public	signature:(RectangleInfo *) const
getNextEvent	XWindow.cc	/^void XWindow::getNextEvent(XEvent& event)$/;"	f	class:XWindow	signature:(XEvent& event)
getNextEvent	XWindow.h	/^        void getNextEvent(XEvent&);$/;"	p	class:XWindow	access:public	signature:(XEvent&)
getNextEvent	backup/XWindow.cc	/^void XWindow::getNextEvent(XEvent& event)$/;"	f	class:XWindow	signature:(XEvent& event)
getNextEvent	backup/XWindow.h	/^        void getNextEvent(XEvent&);$/;"	p	class:XWindow	access:public	signature:(XEvent&)
getNextEvent	test/XWindow.c++	/^void XWindow::getNextEvent(XEvent& event)$/;"	f	class:XWindow	signature:(XEvent& event)
getNextEvent	test/XWindow.h	/^        void getNextEvent(XEvent&);$/;"	p	class:XWindow	access:public	signature:(XEvent&)
getRadiance	SkyDome.cc	/^Vector SkyDome::getRadiance(Vector& direction) const$/;"	f	class:SkyDome	signature:(Vector& direction) const
getRadiance	SkyDome.h	/^        Vector getRadiance(Vector &) const;$/;"	p	class:SkyDome	access:public	signature:(Vector &) const
getRadiance	backup/SkyDome.cc	/^Vector SkyDome::getRadiance(Vector& direction) const$/;"	f	class:SkyDome	signature:(Vector& direction) const
getRadiance	backup/SkyDome.h	/^        Vector getRadiance(Vector &) const;$/;"	p	class:SkyDome	access:public	signature:(Vector &) const
getRefractiveCoef	Material.h	/^        myFloat getRefractiveCoef(void) const$/;"	f	class:Material	access:public	signature:(void) const
getRefractiveCoef	backup/Material.h	/^        myFloat getRefractiveCoef(void) const$/;"	f	class:Material	access:public	signature:(void) const
getRefractiveIndex	Material.h	/^        myFloat getRefractiveIndex(void) const$/;"	f	class:Material	access:public	signature:(void) const
getRefractiveIndex	backup/Material.h	/^        myFloat getRefractiveIndex(void) const$/;"	f	class:Material	access:public	signature:(void) const
getSamples	Film.cc	/^unsigned int Film::getSamples(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
getSamples	Film.h	/^        unsigned int getSamples(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
getSamples	backup/Film.cc	/^unsigned int Film::getSamples(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
getSamples	backup/Film.h	/^        unsigned int getSamples(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
getSolidRatio	BSphere.cc	/^myFloat BSphere::getSolidRatio(Point& target) const$/;"	f	class:BSphere	signature:(Point& target) const
getSolidRatio	BSphere.h	/^        myFloat getSolidRatio(Point&) const;$/;"	p	class:BSphere	access:public	signature:(Point&) const
getSolidRatio	Object.h	/^        virtual myFloat getSolidRatio(Point&) const {return 0.0;}$/;"	f	class:Object	access:public	signature:(Point&) const
getSolidRatio	backup/BSphere.cc	/^myFloat BSphere::getSolidRatio(Point& target) const$/;"	f	class:BSphere	signature:(Point& target) const
getSolidRatio	backup/BSphere.h	/^        myFloat getSolidRatio(Point&) const;$/;"	p	class:BSphere	access:public	signature:(Point&) const
getSolidRatio	backup/Object.h	/^        virtual myFloat getSolidRatio(Point&) const {return 0.0;}$/;"	f	class:Object	access:public	signature:(Point&) const
getSpecularCoef	Material.h	/^        myFloat getSpecularCoef(void) const$/;"	f	class:Material	access:public	signature:(void) const
getSpecularCoef	backup/Material.h	/^        myFloat getSpecularCoef(void) const$/;"	f	class:Material	access:public	signature:(void) const
getTime	backup/utils.cc	/^double getTime(void)$/;"	f	signature:(void)
getTime	backup/utils.h	/^double getTime(void);$/;"	p	signature:(void)
getTime	utils.cc	/^double getTime(void)$/;"	f	signature:(void)
getTime	utils.h	/^double getTime(void);$/;"	p	signature:(void)
getWidth	Film.cc	/^unsigned int Film::getWidth(void) const$/;"	f	class:Film	signature:(void) const
getWidth	Film.h	/^        unsigned int getWidth() const;$/;"	p	class:Film	access:public	signature:() const
getWidth	XWindow.cc	/^int XWindow::getWidth(void) const$/;"	f	class:XWindow	signature:(void) const
getWidth	XWindow.h	/^        int getWidth(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
getWidth	backup/Film.cc	/^unsigned int Film::getWidth(void) const$/;"	f	class:Film	signature:(void) const
getWidth	backup/Film.h	/^        unsigned int getWidth() const;$/;"	p	class:Film	access:public	signature:() const
getWidth	backup/XWindow.cc	/^int XWindow::getWidth(void) const$/;"	f	class:XWindow	signature:(void) const
getWidth	backup/XWindow.h	/^        int getWidth(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
getWidth	test/XWindow.c++	/^int XWindow::getWidth(void) const$/;"	f	class:XWindow	signature:(void) const
getWidth	test/XWindow.h	/^        int getWidth(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
getX	test/Vector.h	/^        myFloat getX(void) const$/;"	f	class:Vector	access:public	signature:(void) const
getY	test/Vector.h	/^        myFloat getY(void) const$/;"	f	class:Vector	access:public	signature:(void) const
getZ	test/Vector.h	/^        myFloat getZ(void) const$/;"	f	class:Vector	access:public	signature:(void) const
glossiness	Material.h	/^        myFloat glossiness;$/;"	m	class:Material	access:private
glossiness	backup/Material.h	/^        myFloat glossiness;$/;"	m	class:Material	access:private
height	Film.h	/^        unsigned int height;$/;"	m	class:Film	access:private
height	SkyDome.h	/^        unsigned int height;$/;"	m	class:SkyDome	access:private
height	UIThread.h	/^        unsigned int height;$/;"	m	class:UIThread	access:private
height	backup/Film.h	/^        unsigned int height;$/;"	m	class:Film	access:private
height	backup/SkyDome.h	/^        unsigned int height;$/;"	m	class:SkyDome	access:private
height	backup/UIThread.h	/^        unsigned int height;$/;"	m	class:UIThread	access:private
image	XWindow.h	/^        XImage *image;$/;"	m	class:XWindow	access:private
image	backup/XWindow.h	/^        XImage *image;$/;"	m	class:XWindow	access:private
image	test/XWindow.h	/^        XImage *image;$/;"	m	class:XWindow	access:private
imageBuffer	UIThread.h	/^        char *imageBuffer;$/;"	m	class:UIThread	access:private
imageBuffer	backup/UIThread.h	/^        char *imageBuffer;$/;"	m	class:UIThread	access:private
initialMatrix	Matrix.h	/^static const myFloat initialMatrix[4][4] = {{1.0,0,0,0},{0,1.0,0,0},{0,0,1.0,0},{0,0,0,1.0}};$/;"	v
initialMatrix	backup/Matrix.h	/^static const myFloat initialMatrix[4][4] = {{1.0,0,0,0},{0,1.0,0,0},{0,0,1.0,0},{0,0,0,1.0}};$/;"	v
initialize	World.cc	/^void World::initialize()$/;"	f	class:World	signature:()
initialize	World.h	/^        void initialize();$/;"	p	class:World	access:public	signature:()
initialize	backup/World.cc	/^void World::initialize()$/;"	f	class:World	signature:()
initialize	backup/World.h	/^        void initialize();$/;"	p	class:World	access:public	signature:()
intersect	AABBox.h	/^        bool intersect(Ray& ray, myFloat& a, myFloat& b) const$/;"	f	class:AABBox	access:public	signature:(Ray& ray, myFloat& a, myFloat& b) const
intersect	Box.cc	/^myFloat Box::intersect(Point worldOrigin, Vector worldDirection) const$/;"	f	class:Box	signature:(Point worldOrigin, Vector worldDirection) const
intersect	Box.cc	/^myFloat Box::intersect(Ray& ray, Intersection& intersection) const$/;"	f	class:Box	signature:(Ray& ray, Intersection& intersection) const
intersect	Box.h	/^        bool intersect(Ray&, Intersection&) const;$/;"	p	class:Box	access:public	signature:(Ray&, Intersection&) const
intersect	KDTree.cc	/^bool KDTree::intersect(Ray& ray, const AABBox& bounds, Intersection& iInfo, myFloat minDistance) const$/;"	f	class:KDTree	signature:(Ray& ray, const AABBox& bounds, Intersection& iInfo, myFloat minDistance) const
intersect	KDTree.h	/^        bool intersect(Ray&, const AABBox&, Intersection&, myFloat = MIN_FLOAT) const;$/;"	p	class:KDTree	access:public	signature:(Ray&, const AABBox&, Intersection&, myFloat = MIN_FLOAT) const
intersect	Object.h	/^        virtual bool intersect(Ray&, Intersection&) const =0;$/;"	p	class:Object	access:public	signature:(Ray&, Intersection&) const
intersect	Plane.cc	/^myFloat Plane::intersect(Ray& ray, Intersection& intersection) const$/;"	f	class:Plane	signature:(Ray& ray, Intersection& intersection) const
intersect	Plane.h	/^        bool intersect(Ray&, Intersection&) const;$/;"	p	class:Plane	access:public	signature:(Ray&, Intersection&) const
intersect	Sphere.cc	/^myFloat Sphere::intersect(Ray& ray, Intersection& intersection) const$/;"	f	class:Sphere	signature:(Ray& ray, Intersection& intersection) const
intersect	Sphere.h	/^        bool intersect(Ray&, Intersection&) const;$/;"	p	class:Sphere	access:public	signature:(Ray&, Intersection&) const
intersect	Triangle.cc	/^myFloat Triangle::intersect(Ray& ray, Intersection& intersection) const$/;"	f	class:Triangle	signature:(Ray& ray, Intersection& intersection) const
intersect	Triangle.h	/^        bool intersect(Ray&, Intersection&) const;$/;"	p	class:Triangle	access:public	signature:(Ray&, Intersection&) const
intersect	backup/AABBox.h	/^        bool intersect(Ray& ray, myFloat& a, myFloat& b) const$/;"	f	class:AABBox	access:public	signature:(Ray& ray, myFloat& a, myFloat& b) const
intersect	backup/Box.cc	/^myFloat Box::intersect(Point worldOrigin, Vector worldDirection) const$/;"	f	class:Box	signature:(Point worldOrigin, Vector worldDirection) const
intersect	backup/Box.h	/^        myFloat intersect(Point, Vector) const;$/;"	p	class:Box	access:public	signature:(Point, Vector) const
intersect	backup/KDTree.cc	/^bool KDTree::intersect(Ray& ray, const AABBox& bounds, Intersection& iInfo, myFloat minDistance) const$/;"	f	class:KDTree	signature:(Ray& ray, const AABBox& bounds, Intersection& iInfo, myFloat minDistance) const
intersect	backup/KDTree.h	/^        bool intersect(Ray&, const AABBox&, Intersection&, myFloat = MIN_FLOAT) const;$/;"	p	class:KDTree	access:public	signature:(Ray&, const AABBox&, Intersection&, myFloat = MIN_FLOAT) const
intersect	backup/Object.h	/^        virtual myFloat intersect(Point, Vector) const =0;$/;"	p	class:Object	access:public	signature:(Point, Vector) const
intersect	backup/Plane.cc	/^myFloat Plane::intersect(Point worldOrigin, Vector worldDirection) const$/;"	f	class:Plane	signature:(Point worldOrigin, Vector worldDirection) const
intersect	backup/Plane.h	/^        myFloat intersect(Point, Vector) const;$/;"	p	class:Plane	access:public	signature:(Point, Vector) const
intersect	backup/Sphere.cc	/^myFloat Sphere::intersect(Point worldOrigin, Vector worldDirection) const$/;"	f	class:Sphere	signature:(Point worldOrigin, Vector worldDirection) const
intersect	backup/Sphere.h	/^        myFloat intersect(Point, Vector) const;$/;"	p	class:Sphere	access:public	signature:(Point, Vector) const
intersect	backup/Triangle.cc	/^myFloat Triangle::intersect(Point worldOrigin, Vector worldDirection) const$/;"	f	class:Triangle	signature:(Point worldOrigin, Vector worldDirection) const
intersect	backup/Triangle.h	/^        myFloat intersect(Point, Vector) const;$/;"	p	class:Triangle	access:public	signature:(Point, Vector) const
invTransformation	Transformation.h	/^        Matrix4x4 invTransformation;$/;"	m	class:Transformation	access:private
invTransformation	backup/Transformation.h	/^        Matrix4x4 invTransformation;$/;"	m	class:Transformation	access:private
inverse	Matrix.h	/^        Matrix4x4 inverse(void) const$/;"	f	class:Matrix4x4	access:public	signature:(void) const
inverse	backup/Matrix.h	/^        Matrix4x4 inverse(void) const$/;"	f	class:Matrix4x4	access:public	signature:(void) const
isEmitting	Material.h	/^        bool isEmitting(void) const$/;"	f	class:Material	access:public	signature:(void) const
isEmitting	backup/Material.h	/^        bool isEmitting(void) const$/;"	f	class:Material	access:public	signature:(void) const
isPendingEvent	XWindow.cc	/^bool XWindow::isPendingEvent(void) const$/;"	f	class:XWindow	signature:(void) const
isPendingEvent	XWindow.h	/^        bool isPendingEvent(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
isPendingEvent	backup/XWindow.cc	/^bool XWindow::isPendingEvent(void) const$/;"	f	class:XWindow	signature:(void) const
isPendingEvent	backup/XWindow.h	/^        bool isPendingEvent(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
isPendingEvent	test/XWindow.c++	/^bool XWindow::isPendingEvent(void) const$/;"	f	class:XWindow	signature:(void) const
isPendingEvent	test/XWindow.h	/^        bool isPendingEvent(void) const;$/;"	p	class:XWindow	access:public	signature:(void) const
join	Thread.h	/^        void join(void)$/;"	f	class:Thread	access:public	signature:(void)
join	backup/Thread.h	/^        void join(void)$/;"	f	class:Thread	access:public	signature:(void)
kDTree	World.h	/^        KDTree *kDTree;$/;"	m	class:World	access:private
kDTree	backup/World.h	/^        KDTree *kDTree;$/;"	m	class:World	access:private
leafCount	KDTree.cc	/^unsigned int KDTree::leafCount() const$/;"	f	class:KDTree	signature:() const
leafCount	KDTree.cc	/^unsigned int KDTree::leafCount(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
leafCount	KDTree.h	/^        unsigned int leafCount() const;$/;"	p	class:KDTree	access:public	signature:() const
leafCount	KDTree.h	/^        unsigned int leafCount(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
leafCount	backup/KDTree.cc	/^unsigned int KDTree::leafCount() const$/;"	f	class:KDTree	signature:() const
leafCount	backup/KDTree.cc	/^unsigned int KDTree::leafCount(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
leafCount	backup/KDTree.h	/^        unsigned int leafCount() const;$/;"	p	class:KDTree	access:public	signature:() const
leafCount	backup/KDTree.h	/^        unsigned int leafCount(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
length	Vector.h	/^        myFloat length() const$/;"	f	class:Vector	access:public	signature:() const
length	backup/Vector.h	/^        myFloat length() const$/;"	f	class:Vector	access:public	signature:() const
length	test/Vector.h	/^        myFloat length(void) const$/;"	f	class:Vector	access:public	signature:(void) const
length2	Vector.h	/^        myFloat length2() const$/;"	f	class:Vector	access:public	signature:() const
length2	backup/Vector.h	/^        myFloat length2() const$/;"	f	class:Vector	access:public	signature:() const
lightCount	World.cc	/^unsigned int World::lightCount() const$/;"	f	class:World	signature:() const
lightCount	World.h	/^        unsigned int lightCount() const;$/;"	p	class:World	access:public	signature:() const
lightCount	backup/World.cc	/^unsigned int World::lightCount() const$/;"	f	class:World	signature:() const
lightCount	backup/World.h	/^        unsigned int lightCount() const;$/;"	p	class:World	access:public	signature:() const
lightVector	World.h	/^        std::vector<Object*> lightVector;$/;"	m	class:World	access:private
lightVector	backup/World.h	/^        std::vector<Object*> lightVector;$/;"	m	class:World	access:private
main	backup/main.cc	/^int main()$/;"	f	signature:()
main	main.cc	/^int main()$/;"	f	signature:()
main	test/main.c++	/^int main(void)$/;"	f	signature:(void)
material	Object.h	/^        Material *material;$/;"	m	class:Object	access:public
material	backup/Object.h	/^        Material *material;$/;"	m	class:Object	access:public
matrix	Matrix.h	/^        myFloat matrix[4][4];$/;"	m	class:Matrix4x4	access:public
matrix	backup/Matrix.h	/^        myFloat matrix[4][4];$/;"	m	class:Matrix4x4	access:public
max	Ray.h	/^        myFloat max;$/;"	m	class:Ray	access:public
max	backup/Ray.h	/^        myFloat max;$/;"	m	class:Ray	access:public
maxDepth	KDTree.cc	/^unsigned int KDTree::maxDepth() const$/;"	f	class:KDTree	signature:() const
maxDepth	KDTree.cc	/^unsigned int KDTree::maxDepth(KDNode *node, unsigned int depth) const$/;"	f	class:KDTree	signature:(KDNode *node, unsigned int depth) const
maxDepth	KDTree.h	/^        unsigned int maxDepth() const;$/;"	p	class:KDTree	access:public	signature:() const
maxDepth	KDTree.h	/^        unsigned int maxDepth(KDNode *, unsigned int) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *, unsigned int) const
maxDepth	backup/KDTree.cc	/^unsigned int KDTree::maxDepth() const$/;"	f	class:KDTree	signature:() const
maxDepth	backup/KDTree.cc	/^unsigned int KDTree::maxDepth(KDNode *node, unsigned int depth) const$/;"	f	class:KDTree	signature:(KDNode *node, unsigned int depth) const
maxDepth	backup/KDTree.h	/^        unsigned int maxDepth() const;$/;"	p	class:KDTree	access:public	signature:() const
maxDepth	backup/KDTree.h	/^        unsigned int maxDepth(KDNode *, unsigned int) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *, unsigned int) const
maxLeafPopulation	KDTree.cc	/^unsigned int KDTree::maxLeafPopulation() const$/;"	f	class:KDTree	signature:() const
maxLeafPopulation	KDTree.cc	/^unsigned int KDTree::maxLeafPopulation(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
maxLeafPopulation	KDTree.h	/^        unsigned int maxLeafPopulation() const;$/;"	p	class:KDTree	access:public	signature:() const
maxLeafPopulation	KDTree.h	/^        unsigned int maxLeafPopulation(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
maxLeafPopulation	backup/KDTree.cc	/^unsigned int KDTree::maxLeafPopulation() const$/;"	f	class:KDTree	signature:() const
maxLeafPopulation	backup/KDTree.cc	/^unsigned int KDTree::maxLeafPopulation(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
maxLeafPopulation	backup/KDTree.h	/^        unsigned int maxLeafPopulation() const;$/;"	p	class:KDTree	access:public	signature:() const
maxLeafPopulation	backup/KDTree.h	/^        unsigned int maxLeafPopulation(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
min	Ray.h	/^        myFloat min;$/;"	m	class:Ray	access:public
min	backup/Ray.h	/^        myFloat min;$/;"	m	class:Ray	access:public
myFloat	Vector.h	/^typedef float myFloat;$/;"	t
myFloat	backup/Vector.h	/^typedef float myFloat;$/;"	t
newArea	Renderer.h	/^        RectangleInfo renderArea, newArea;$/;"	m	class:Renderer	access:private
newArea	UIThread.h	/^        RectangleInfo *newArea;$/;"	m	class:UIThread	access:private
newArea	backup/Renderer.h	/^        RectangleInfo renderArea, newArea;$/;"	m	class:Renderer	access:private
newArea	backup/UIThread.h	/^        RectangleInfo *newArea;$/;"	m	class:UIThread	access:private
newData	UIThread.h	/^        bool newData;$/;"	m	class:UIThread	access:private
newData	backup/UIThread.h	/^        bool newData;$/;"	m	class:UIThread	access:private
newFilm	UIThread.cc	/^void UIThread::newFilm(const RectangleInfo& renderArea)$/;"	f	class:UIThread	signature:(const RectangleInfo& renderArea)
newFilm	UIThread.h	/^        void newFilm(const RectangleInfo&);$/;"	p	class:UIThread	access:public	signature:(const RectangleInfo&)
newFilm	backup/UIThread.cc	/^void UIThread::newFilm(const RectangleInfo& renderArea)$/;"	f	class:UIThread	signature:(const RectangleInfo& renderArea)
newFilm	backup/UIThread.h	/^        void newFilm(const RectangleInfo&);$/;"	p	class:UIThread	access:public	signature:(const RectangleInfo&)
node	KDStackElement.h	/^    KDNode *node;$/;"	m	struct:KDStackElement	access:public
node	backup/KDStackElement.h	/^    KDNode *node;$/;"	m	struct:KDStackElement	access:public
nodeArea	KDTree.cc	/^myFloat KDTree::nodeArea(Point& P1, Point& P2) const$/;"	f	class:KDTree	signature:(Point& P1, Point& P2) const
nodeArea	KDTree.h	/^        myFloat nodeArea(Point&, Point&) const;$/;"	p	class:KDTree	access:private	signature:(Point&, Point&) const
nodeArea	backup/KDTree.cc	/^myFloat KDTree::nodeArea(Point& P1, Point& P2) const$/;"	f	class:KDTree	signature:(Point& P1, Point& P2) const
nodeArea	backup/KDTree.h	/^        myFloat nodeArea(Point&, Point&) const;$/;"	p	class:KDTree	access:private	signature:(Point&, Point&) const
nodeCount	KDTree.cc	/^unsigned int KDTree::nodeCount() const$/;"	f	class:KDTree	signature:() const
nodeCount	KDTree.cc	/^unsigned int KDTree::nodeCount(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
nodeCount	KDTree.h	/^        unsigned int nodeCount() const;$/;"	p	class:KDTree	access:public	signature:() const
nodeCount	KDTree.h	/^        unsigned int nodeCount(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
nodeCount	backup/KDTree.cc	/^unsigned int KDTree::nodeCount() const$/;"	f	class:KDTree	signature:() const
nodeCount	backup/KDTree.cc	/^unsigned int KDTree::nodeCount(KDNode *node) const$/;"	f	class:KDTree	signature:(KDNode *node) const
nodeCount	backup/KDTree.h	/^        unsigned int nodeCount() const;$/;"	p	class:KDTree	access:public	signature:() const
nodeCount	backup/KDTree.h	/^        unsigned int nodeCount(KDNode *) const;$/;"	p	class:KDTree	access:private	signature:(KDNode *) const
nonBoundableObjects	KDTree.h	/^        std::vector<Object*> nonBoundableObjects;$/;"	m	class:KDTree	access:private
nonBoundableObjects	backup/KDTree.h	/^        std::vector<Object*> nonBoundableObjects;$/;"	m	class:KDTree	access:private
normal	Intersection.h	/^    myFloat normal;$/;"	m	struct:Intersection	access:public
normal	Triangle.h	/^        Vector normal;$/;"	m	class:Triangle	access:private
normal	backup/Intersection.h	/^    myFloat normal;$/;"	m	struct:Intersection	access:public
normal	backup/Triangle.h	/^        Vector normal;$/;"	m	class:Triangle	access:private
object	Intersection.h	/^    Object *object;$/;"	m	struct:Intersection	access:public
object	backup/Intersection.h	/^    Object *object;$/;"	m	struct:Intersection	access:public
objectCount	World.cc	/^unsigned int World::objectCount() const$/;"	f	class:World	signature:() const
objectCount	World.h	/^        unsigned int objectCount() const;$/;"	p	class:World	access:public	signature:() const
objectCount	backup/World.cc	/^unsigned int World::objectCount() const$/;"	f	class:World	signature:() const
objectCount	backup/World.h	/^        unsigned int objectCount() const;$/;"	p	class:World	access:public	signature:() const
objectNormalToWorld	Transformation.h	/^        Vector objectNormalToWorld(const Vector& normal) const$/;"	f	class:Transformation	access:public	signature:(const Vector& normal) const
objectNormalToWorld	backup/Transformation.h	/^        Vector objectNormalToWorld(const Vector& normal) const$/;"	f	class:Transformation	access:public	signature:(const Vector& normal) const
objectToWorld	Transformation.h	/^        Point objectToWorld(const Point& point) const$/;"	f	class:Transformation	access:public	signature:(const Point& point) const
objectToWorld	Transformation.h	/^        Vector objectToWorld(const Vector& vector) const$/;"	f	class:Transformation	access:public	signature:(const Vector& vector) const
objectToWorld	backup/Transformation.h	/^        Point objectToWorld(const Point& point) const$/;"	f	class:Transformation	access:public	signature:(const Point& point) const
objectToWorld	backup/Transformation.h	/^        Vector objectToWorld(const Vector& vector) const$/;"	f	class:Transformation	access:public	signature:(const Vector& vector) const
objectVector	World.h	/^        std::vector<Object*> objectVector;$/;"	m	class:World	access:private
objectVector	backup/World.h	/^        std::vector<Object*> objectVector;$/;"	m	class:World	access:private
objects	KDNode.h	/^        std::vector<AABBox*> *objects ; \/\/8bytes$/;"	m	union:KDNode::__anon4	access:public
objects	Makefile	/^objects = $(patsubst %.cc, %.o, $(wildcard *.cc))$/;"	m
objects	backup/KDNode.h	/^        std::vector<AABBox*> *objects ; \/\/8bytes$/;"	m	union:KDNode::__anon1	access:public
oldRenderArea	UIThread.h	/^        RectangleInfo oldRenderArea;$/;"	m	class:UIThread	access:private
oldRenderArea	backup/UIThread.h	/^        RectangleInfo oldRenderArea;$/;"	m	class:UIThread	access:private
openUI	Renderer.h	/^        bool openUI;$/;"	m	class:Renderer	access:private
openUI	backup/Renderer.h	/^        bool openUI;$/;"	m	class:Renderer	access:private
operator !=	Point.h	/^        bool operator!=(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
operator !=	RectangleInfo.h	/^    bool operator!=(const RectangleInfo& rectangle) const$/;"	f	struct:RectangleInfo	access:public	signature:(const RectangleInfo& rectangle) const
operator !=	Vector.h	/^        bool operator!=(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator !=	backup/Point.h	/^        bool operator!=(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
operator !=	backup/RectangleInfo.h	/^    bool operator!=(const RectangleInfo& rectangle) const$/;"	f	struct:RectangleInfo	access:public	signature:(const RectangleInfo& rectangle) const
operator !=	backup/Vector.h	/^        bool operator!=(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator !=	test/Vector.h	/^        bool operator!=(const Vector vector)$/;"	f	class:Vector	access:public	signature:(const Vector vector)
operator %	test/Vector.h	/^        Vector operator%(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator *	Matrix.h	/^        Matrix4x4 operator*(const Matrix4x4& _matrix) const$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix) const
operator *	Matrix.h	/^        Point operator*(const Point& point) const$/;"	f	class:Matrix4x4	access:public	signature:(const Point& point) const
operator *	Matrix.h	/^        Vector operator*(const Vector& vector) const$/;"	f	class:Matrix4x4	access:public	signature:(const Vector& vector) const
operator *	Point.h	/^        Point operator*(myFloat scale) const$/;"	f	class:Point	access:public	signature:(myFloat scale) const
operator *	Point.h	/^        friend const Point operator*(const myFloat scale, const Point& point)$/;"	f	class:Point	access:friend	signature:(const myFloat scale, const Point& point)
operator *	Vector.h	/^        Vector operator*(myFloat scale) const$/;"	f	class:Vector	access:public	signature:(myFloat scale) const
operator *	Vector.h	/^        friend const Vector operator*(const myFloat value, const Vector& vector)$/;"	f	class:Vector	access:friend	signature:(const myFloat value, const Vector& vector)
operator *	backup/Matrix.h	/^        Matrix4x4 operator*(const Matrix4x4& _matrix) const$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix) const
operator *	backup/Matrix.h	/^        Point operator*(const Point& point) const$/;"	f	class:Matrix4x4	access:public	signature:(const Point& point) const
operator *	backup/Matrix.h	/^        Vector operator*(const Vector& vector) const$/;"	f	class:Matrix4x4	access:public	signature:(const Vector& vector) const
operator *	backup/Point.h	/^        Point operator*(myFloat scale) const$/;"	f	class:Point	access:public	signature:(myFloat scale) const
operator *	backup/Point.h	/^        friend const Point operator*(const myFloat scale, const Point& point)$/;"	f	class:Point	access:friend	signature:(const myFloat scale, const Point& point)
operator *	backup/Vector.h	/^        Vector operator*(myFloat scale) const$/;"	f	class:Vector	access:public	signature:(myFloat scale) const
operator *	backup/Vector.h	/^        friend const Vector operator*(const myFloat value, const Vector& vector)$/;"	f	class:Vector	access:friend	signature:(const myFloat value, const Vector& vector)
operator *	test/Vector.h	/^        friend const Vector operator*(const Vector& vector,const myFloat value)$/;"	f	class:Vector	access:friend	signature:(const Vector& vector,const myFloat value)
operator *	test/Vector.h	/^        friend const Vector operator*(const myFloat value, const Vector& vector)$/;"	f	class:Vector	access:friend	signature:(const myFloat value, const Vector& vector)
operator *	test/Vector.h	/^        myFloat operator*(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator *=	Point.h	/^        Point& operator*=(const myFloat divider)$/;"	f	class:Point	access:public	signature:(const myFloat divider)
operator *=	Vector.h	/^        Vector& operator*=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
operator *=	backup/Point.h	/^        Point& operator*=(const myFloat divider)$/;"	f	class:Point	access:public	signature:(const myFloat divider)
operator *=	backup/Vector.h	/^        Vector& operator*=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
operator *=	test/Vector.h	/^        Vector& operator*=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
operator +	Point.h	/^        Point operator+(const Vector& vector) const$/;"	f	class:Point	access:public	signature:(const Vector& vector) const
operator +	Vector.h	/^        Vector operator+(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator +	backup/Point.h	/^        Point operator+(const Vector& vector) const$/;"	f	class:Point	access:public	signature:(const Vector& vector) const
operator +	backup/Vector.h	/^        Vector operator+(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator +	test/Vector.h	/^        Vector operator+(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator +=	Film.cc	/^Film& Film::operator+=(const Film& film)$/;"	f	class:Film	signature:(const Film& film)
operator +=	Film.h	/^        Film& operator+=(const Film&);$/;"	p	class:Film	access:public	signature:(const Film&)
operator +=	Point.h	/^        Point& operator+=(const Vector& vector)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
operator +=	Vector.h	/^        Vector& operator+=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
operator +=	backup/Film.cc	/^Film& Film::operator+=(const Film& film)$/;"	f	class:Film	signature:(const Film& film)
operator +=	backup/Film.h	/^        Film& operator+=(const Film&);$/;"	p	class:Film	access:public	signature:(const Film&)
operator +=	backup/Point.h	/^        Point& operator+=(const Vector& vector)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
operator +=	backup/Vector.h	/^        Vector& operator+=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
operator +=	test/Vector.h	/^        Vector& operator+=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
operator -	Point.h	/^        Point operator-(const Vector& vector) const$/;"	f	class:Point	access:public	signature:(const Vector& vector) const
operator -	Point.h	/^        Vector operator-(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
operator -	Vector.h	/^        Vector operator-() const$/;"	f	class:Vector	access:public	signature:() const
operator -	Vector.h	/^        Vector operator-(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator -	backup/Point.h	/^        Point operator-(const Vector& vector) const$/;"	f	class:Point	access:public	signature:(const Vector& vector) const
operator -	backup/Point.h	/^        Vector operator-(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
operator -	backup/Vector.h	/^        Vector operator-() const$/;"	f	class:Vector	access:public	signature:() const
operator -	backup/Vector.h	/^        Vector operator-(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator -	test/Vector.h	/^        Vector operator-(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator -	test/Vector.h	/^        Vector operator-(void) const$/;"	f	class:Vector	access:public	signature:(void) const
operator -=	Point.h	/^        Point& operator-=(const Vector& vector)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
operator -=	Vector.h	/^        Vector& operator-=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
operator -=	backup/Point.h	/^        Point& operator-=(const Vector& vector)$/;"	f	class:Point	access:public	signature:(const Vector& vector)
operator -=	backup/Vector.h	/^        Vector& operator-=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
operator -=	test/Vector.h	/^        Vector& operator-=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
operator /	Point.h	/^        Point operator\/(myFloat divider) const$/;"	f	class:Point	access:public	signature:(myFloat divider) const
operator /	Vector.h	/^        Vector operator\/(myFloat divider) const$/;"	f	class:Vector	access:public	signature:(myFloat divider) const
operator /	backup/Point.h	/^        Point operator\/(myFloat divider) const$/;"	f	class:Point	access:public	signature:(myFloat divider) const
operator /	backup/Vector.h	/^        Vector operator\/(myFloat divider) const$/;"	f	class:Vector	access:public	signature:(myFloat divider) const
operator /	test/Vector.h	/^        Vector operator\/(myFloat divider) const$/;"	f	class:Vector	access:public	signature:(myFloat divider) const
operator /=	Point.h	/^        Point& operator\/=(const myFloat divider)$/;"	f	class:Point	access:public	signature:(const myFloat divider)
operator /=	Vector.h	/^        Vector& operator\/=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
operator /=	backup/Point.h	/^        Point& operator\/=(const myFloat divider)$/;"	f	class:Point	access:public	signature:(const myFloat divider)
operator /=	backup/Vector.h	/^        Vector& operator\/=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
operator /=	test/Vector.h	/^        Vector& operator\/=(const myFloat divider)$/;"	f	class:Vector	access:public	signature:(const myFloat divider)
operator <	KDSplitElement.h	/^    bool operator<(const KDSplitElement &kDSplitElement) const$/;"	f	struct:KDSplitElement	access:public	signature:(const KDSplitElement &kDSplitElement) const
operator <	backup/KDSplitElement.h	/^    bool operator<(const KDSplitElement &kDSplitElement) const$/;"	f	struct:KDSplitElement	access:public	signature:(const KDSplitElement &kDSplitElement) const
operator =	Film.cc	/^Film& Film::operator=(const Film& film)$/;"	f	class:Film	signature:(const Film& film)
operator =	Film.h	/^        Film& operator=(const Film&);$/;"	p	class:Film	access:public	signature:(const Film&)
operator =	Matrix.h	/^        Matrix4x4& operator=(const Matrix4x4& _matrix)$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix)
operator =	Point.h	/^        Point& operator=(const Point& point)$/;"	f	class:Point	access:public	signature:(const Point& point)
operator =	Vector.h	/^        Vector& operator=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
operator =	backup/Film.cc	/^Film& Film::operator=(const Film& film)$/;"	f	class:Film	signature:(const Film& film)
operator =	backup/Film.h	/^        Film& operator=(const Film&);$/;"	p	class:Film	access:public	signature:(const Film&)
operator =	backup/Matrix.h	/^        Matrix4x4& operator=(const Matrix4x4& _matrix)$/;"	f	class:Matrix4x4	access:public	signature:(const Matrix4x4& _matrix)
operator =	backup/Point.h	/^        Point& operator=(const Point& point)$/;"	f	class:Point	access:public	signature:(const Point& point)
operator =	backup/Vector.h	/^        Vector& operator=(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
operator ==	Point.h	/^        bool operator==(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
operator ==	RectangleInfo.h	/^    bool operator==(const RectangleInfo& rectangle) const$/;"	f	struct:RectangleInfo	access:public	signature:(const RectangleInfo& rectangle) const
operator ==	Vector.h	/^        bool operator==(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator ==	backup/Point.h	/^        bool operator==(const Point& point) const$/;"	f	class:Point	access:public	signature:(const Point& point) const
operator ==	backup/RectangleInfo.h	/^    bool operator==(const RectangleInfo& rectangle) const$/;"	f	struct:RectangleInfo	access:public	signature:(const RectangleInfo& rectangle) const
operator ==	backup/Vector.h	/^        bool operator==(const Vector& vector) const$/;"	f	class:Vector	access:public	signature:(const Vector& vector) const
operator ==	test/Vector.h	/^        bool operator==(const Vector& vector)$/;"	f	class:Vector	access:public	signature:(const Vector& vector)
operator []	Point.h	/^        myFloat& operator[](const unsigned int i)$/;"	f	class:Point	access:public	signature:(const unsigned int i)
operator []	Vector.h	/^        myFloat& operator[](const unsigned int i) $/;"	f	class:Vector	access:public	signature:(const unsigned int i)
operator []	backup/Point.h	/^        myFloat& operator[](const unsigned int i)$/;"	f	class:Point	access:public	signature:(const unsigned int i)
operator []	backup/Vector.h	/^        myFloat& operator[](const unsigned int i) $/;"	f	class:Vector	access:public	signature:(const unsigned int i)
orientY	Vector.h	/^        Vector orientY(const Vector& bias) const$/;"	f	class:Vector	access:public	signature:(const Vector& bias) const
orientY	backup/Vector.h	/^        Vector orientY(const Vector& bias) const$/;"	f	class:Vector	access:public	signature:(const Vector& bias) const
origin	Ray.h	/^        Point origin;$/;"	m	class:Ray	access:public
origin	Triangle.h	/^        Point origin;$/;"	m	class:Triangle	access:private
origin	backup/Ray.h	/^        Point origin;$/;"	m	class:Ray	access:public
origin	backup/Triangle.h	/^        Point origin;$/;"	m	class:Triangle	access:private
output	Matrix.h	/^        void output(void) const$/;"	f	class:Matrix4x4	access:public	signature:(void) const
output	backup/Matrix.h	/^        void output(void) const$/;"	f	class:Matrix4x4	access:public	signature:(void) const
owner	AABBox.h	/^        Object *owner;$/;"	m	class:AABBox	access:public
owner	backup/AABBox.h	/^        Object *owner;$/;"	m	class:AABBox	access:public
perpendicular	Vector.h	/^        Vector perpendicular() const$/;"	f	class:Vector	access:public	signature:() const
perpendicular	backup/Vector.h	/^        Vector perpendicular() const$/;"	f	class:Vector	access:public	signature:() const
pigmentScale	Material.h	/^        myFloat pigmentScale;$/;"	m	class:Material	access:private
pigmentScale	backup/Material.h	/^        myFloat pigmentScale;$/;"	m	class:Material	access:private
pigmentType	Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	m	class:Material	typeref:enum:Material::__anon6	access:private
pigmentType	backup/Material.h	/^        enum {SOLID, CHECKERS, GRID} pigmentType;$/;"	m	class:Material	typeref:enum:Material::__anon3	access:private
pixelData	XWindow.h	/^        char *pixelData;$/;"	m	class:XWindow	access:private
pixelData	backup/XWindow.h	/^        char *pixelData;$/;"	m	class:XWindow	access:private
pixelData	test/XWindow.h	/^        char *pixelData;$/;"	m	class:XWindow	access:private
pixelValue	Film.cc	/^char Film::pixelValue(myFloat value) const$/;"	f	class:Film	signature:(myFloat value) const
pixelValue	Film.h	/^        char pixelValue(myFloat) const;$/;"	p	class:Film	access:public	signature:(myFloat) const
pixelValue	backup/Film.cc	/^char Film::pixelValue(myFloat value) const$/;"	f	class:Film	signature:(myFloat value) const
pixelValue	backup/Film.h	/^        char pixelValue(myFloat) const;$/;"	p	class:Film	access:public	signature:(myFloat) const
point	KDStackElement.h	/^    Point point;$/;"	m	struct:KDStackElement	access:public
point	backup/KDStackElement.h	/^    Point point;$/;"	m	struct:KDStackElement	access:public
populate	KDTree.cc	/^void KDTree::populate(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& bBoxes, unsigned int depth)$/;"	f	class:KDTree	signature:(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& bBoxes, unsigned int depth)
populate	KDTree.cc	/^void KDTree::populate(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& objects, unsigned int depth)$/;"	f	class:KDTree	signature:(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& objects, unsigned int depth)
populate	KDTree.h	/^        void populate(KDNode *, Point& P1, Point& P2, std::vector<AABBox*>&, unsigned int);$/;"	p	class:KDTree	access:private	signature:(KDNode *, Point& P1, Point& P2, std::vector<AABBox*>&, unsigned int)
populate	backup/KDTree.cc	/^void KDTree::populate(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& bBoxes, unsigned int depth)$/;"	f	class:KDTree	signature:(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& bBoxes, unsigned int depth)
populate	backup/KDTree.cc	/^void KDTree::populate(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& objects, unsigned int depth)$/;"	f	class:KDTree	signature:(KDNode *node, Point& P1, Point& P2, std::vector<AABBox*>& objects, unsigned int depth)
populate	backup/KDTree.h	/^        void populate(KDNode *, Point& P1, Point& P2, std::vector<AABBox*>&, unsigned int);$/;"	p	class:KDTree	access:private	signature:(KDNode *, Point& P1, Point& P2, std::vector<AABBox*>&, unsigned int)
position	BSphere.h	/^        Point position;$/;"	m	class:BSphere	access:private
position	Camera.h	/^        Point position;$/;"	m	class:Camera	access:private
position	KDSplitElement.h	/^    myFloat position;$/;"	m	struct:KDSplitElement	access:public
position	backup/BSphere.h	/^        Point position;$/;"	m	class:BSphere	access:private
position	backup/Camera.h	/^        Point position;$/;"	m	class:Camera	access:private
position	backup/KDSplitElement.h	/^    myFloat position;$/;"	m	struct:KDSplitElement	access:public
power	Vector.h	/^        Vector power(myFloat exponent) const$/;"	f	class:Vector	access:public	signature:(myFloat exponent) const
power	backup/Vector.h	/^        Vector power(myFloat exponent) const$/;"	f	class:Vector	access:public	signature:(myFloat exponent) const
previousElement	KDStackElement.h	/^    unsigned int previousElement;$/;"	m	struct:KDStackElement	access:public
previousElement	backup/KDStackElement.h	/^    unsigned int previousElement;$/;"	m	struct:KDStackElement	access:public
processEvents	UIThread.cc	/^void UIThread::processEvents(void)$/;"	f	class:UIThread	signature:(void)
processEvents	UIThread.h	/^        void processEvents(void);        $/;"	p	class:UIThread	access:private	signature:(void)
processEvents	backup/UIThread.cc	/^void UIThread::processEvents(void)$/;"	f	class:UIThread	signature:(void)
processEvents	backup/UIThread.h	/^        void processEvents(void);        $/;"	p	class:UIThread	access:private	signature:(void)
rNG	RenderThread.h	/^        Random rNG;$/;"	m	class:RenderThread	access:private
rNG	backup/RenderThread.h	/^        Random rNG;$/;"	m	class:RenderThread	access:private
radianceSamples	Film.h	/^        unsigned int *radianceSamples;$/;"	m	class:Film	access:private
radianceSamples	backup/Film.h	/^        unsigned int *radianceSamples;$/;"	m	class:Film	access:private
radianceValues	Film.h	/^        Vector *radianceValues;$/;"	m	class:Film	access:private
radianceValues	SkyDome.h	/^        Vector *radianceValues;$/;"	m	class:SkyDome	access:private
radianceValues	backup/Film.h	/^        Vector *radianceValues;$/;"	m	class:Film	access:private
radianceValues	backup/SkyDome.h	/^        Vector *radianceValues;$/;"	m	class:SkyDome	access:private
radius	BSphere.h	/^        myFloat radius, radius2;$/;"	m	class:BSphere	access:private
radius	backup/BSphere.h	/^        myFloat radius, radius2;$/;"	m	class:BSphere	access:private
radius2	BSphere.h	/^        myFloat radius, radius2;$/;"	m	class:BSphere	access:private
radius2	backup/BSphere.h	/^        myFloat radius, radius2;$/;"	m	class:BSphere	access:private
randomNumberClosed	Random.h	/^        myFloat randomNumberClosed(void)$/;"	f	class:Random	access:public	signature:(void)
randomNumberClosed	backup/Random.h	/^        myFloat randomNumberClosed(void)$/;"	f	class:Random	access:public	signature:(void)
randomNumberOpen	Random.h	/^        myFloat randomNumberOpen(void)$/;"	f	class:Random	access:public	signature:(void)
randomNumberOpen	backup/Random.h	/^        myFloat randomNumberOpen(void)$/;"	f	class:Random	access:public	signature:(void)
randomSeed	Random.h	/^        void randomSeed(unsigned int seed)$/;"	f	class:Random	access:public	signature:(unsigned int seed)
randomSeed	backup/Random.h	/^        void randomSeed(unsigned int seed)$/;"	f	class:Random	access:public	signature:(unsigned int seed)
readBrightness	Film.cc	/^myFloat Film::readBrightness(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
readBrightness	Film.h	/^        myFloat readBrightness(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
readBrightness	backup/Film.cc	/^myFloat Film::readBrightness(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
readBrightness	backup/Film.h	/^        myFloat readBrightness(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
readRadiance	Film.cc	/^Vector Film::readRadiance(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
readRadiance	Film.h	/^        Vector readRadiance(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
readRadiance	backup/Film.cc	/^Vector Film::readRadiance(unsigned int x, unsigned int y) const$/;"	f	class:Film	signature:(unsigned int x, unsigned int y) const
readRadiance	backup/Film.h	/^        Vector readRadiance(unsigned int, unsigned int) const;$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int) const
refractiveCoef	Material.h	/^        myFloat refractiveCoef;$/;"	m	class:Material	access:private
refractiveCoef	backup/Material.h	/^        myFloat refractiveCoef;$/;"	m	class:Material	access:private
refractiveIndex	Material.h	/^        myFloat refractiveIndex;$/;"	m	class:Material	access:private
refractiveIndex	backup/Material.h	/^        myFloat refractiveIndex;$/;"	m	class:Material	access:private
renderArea	RenderThread.h	/^        RectangleInfo *renderArea;$/;"	m	class:RenderThread	access:private
renderArea	Renderer.h	/^        RectangleInfo renderArea, newArea;$/;"	m	class:Renderer	access:private
renderArea	backup/RenderThread.h	/^        RectangleInfo *renderArea;$/;"	m	class:RenderThread	access:private
renderArea	backup/Renderer.h	/^        RectangleInfo renderArea, newArea;$/;"	m	class:Renderer	access:private
renderThreads	Renderer.h	/^        std::vector<RenderThread*> renderThreads;$/;"	m	class:Renderer	access:private
renderThreads	backup/Renderer.h	/^        std::vector<RenderThread*> renderThreads;$/;"	m	class:Renderer	access:private
resizeBuffer	test/XWindow.c++	/^void XWindow::resizeBuffer(void)$/;"	f	class:XWindow	signature:(void)
resizeBuffer	test/XWindow.h	/^        void resizeBuffer(void);$/;"	p	class:XWindow	access:public	signature:(void)
right	Camera.h	/^        Vector right;$/;"	m	class:Camera	access:private
right	backup/Camera.h	/^        Vector right;$/;"	m	class:Camera	access:private
root	KDTree.h	/^        KDNode *root;$/;"	m	class:KDTree	access:private
root	backup/KDTree.h	/^        KDNode *root;$/;"	m	class:KDTree	access:private
rowMultiply	Matrix.h	/^        void rowMultiply(unsigned int row, myFloat scale)$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int row, myFloat scale)
rowMultiply	backup/Matrix.h	/^        void rowMultiply(unsigned int row, myFloat scale)$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int row, myFloat scale)
rowSubtract	Matrix.h	/^        void rowSubtract(unsigned int row, myFloat scale, myFloat rowData[4])$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int row, myFloat scale, myFloat rowData[4])
rowSubtract	backup/Matrix.h	/^        void rowSubtract(unsigned int row, myFloat scale, myFloat rowData[4])$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int row, myFloat scale, myFloat rowData[4])
run	Thread.h	/^        void run(void)$/;"	f	class:Thread	access:protected	signature:(void)
run	backup/Thread.h	/^        void run(void)$/;"	f	class:Thread	access:protected	signature:(void)
sampleLight	Object.h	/^        virtual Vector sampleLight(Point&, Random&) const {return Vector(0);}$/;"	f	class:Object	access:public	signature:(Point&, Random&) const
sampleLight	backup/Object.h	/^        virtual Vector sampleLight(Point&, Random&) const {return Vector(0);}$/;"	f	class:Object	access:public	signature:(Point&, Random&) const
save	Film.cc	/^void Film::save(std::string fileName, char *pixelData)$/;"	f	class:Film	signature:(std::string fileName, char *pixelData)
save	Film.h	/^        void save(std::string, char *);$/;"	p	class:Film	access:public	signature:(std::string, char *)
save	backup/Film.cc	/^void Film::save(std::string fileName, char *pixelData)$/;"	f	class:Film	signature:(std::string fileName, char *pixelData)
save	backup/Film.h	/^        void save(std::string, char *);$/;"	p	class:Film	access:public	signature:(std::string, char *)
saveImage	XWindow.cc	/^void XWindow::saveImage(std::string fileName)$/;"	f	class:XWindow	signature:(std::string fileName)
saveImage	XWindow.h	/^        void saveImage(std::string);$/;"	p	class:XWindow	access:public	signature:(std::string)
saveImage	backup/XWindow.cc	/^void XWindow::saveImage(std::string fileName)$/;"	f	class:XWindow	signature:(std::string fileName)
saveImage	backup/XWindow.h	/^        void saveImage(std::string);$/;"	p	class:XWindow	access:public	signature:(std::string)
selectInput	XWindow.cc	/^void XWindow::selectInput(long eventMask)$/;"	f	class:XWindow	signature:(long eventMask)
selectInput	XWindow.h	/^        void selectInput(long);$/;"	p	class:XWindow	access:public	signature:(long)
selectInput	backup/XWindow.cc	/^void XWindow::selectInput(long eventMask)$/;"	f	class:XWindow	signature:(long eventMask)
selectInput	backup/XWindow.h	/^        void selectInput(long);$/;"	p	class:XWindow	access:public	signature:(long)
selectInput	test/XWindow.c++	/^void XWindow::selectInput(long eventMask)$/;"	f	class:XWindow	signature:(long eventMask)
selectInput	test/XWindow.h	/^        void selectInput(long);$/;"	p	class:XWindow	access:public	signature:(long)
selectedArea	UIThread.h	/^        RectangleInfo selectedArea;$/;"	m	class:UIThread	access:private
selectedArea	backup/UIThread.h	/^        RectangleInfo selectedArea;$/;"	m	class:UIThread	access:private
setEmitting	Material.h	/^        void setEmitting(bool emission)$/;"	f	class:Material	access:public	signature:(bool emission)
setEmitting	backup/Material.h	/^        void setEmitting(bool emission)$/;"	f	class:Material	access:public	signature:(bool emission)
setGlossiness	Material.h	/^        void setGlossiness(myFloat roughness)$/;"	f	class:Material	access:public	signature:(myFloat roughness)
setGlossiness	backup/Material.h	/^        void setGlossiness(myFloat roughness)$/;"	f	class:Material	access:public	signature:(myFloat roughness)
setImage	SkyDome.cc	/^void SkyDome::setImage(std::string fileName)$/;"	f	class:SkyDome	signature:(std::string fileName)
setImage	SkyDome.h	/^        void setImage(std::string);$/;"	p	class:SkyDome	access:public	signature:(std::string)
setImage	backup/SkyDome.cc	/^void SkyDome::setImage(std::string fileName)$/;"	f	class:SkyDome	signature:(std::string fileName)
setImage	backup/SkyDome.h	/^        void setImage(std::string);$/;"	p	class:SkyDome	access:public	signature:(std::string)
setPigmentCheckers	Material.h	/^        void setPigmentCheckers(Vector color1, Vector color2)$/;"	f	class:Material	access:public	signature:(Vector color1, Vector color2)
setPigmentCheckers	backup/Material.h	/^        void setPigmentCheckers(Vector color1, Vector color2)$/;"	f	class:Material	access:public	signature:(Vector color1, Vector color2)
setPigmentGrid	Material.h	/^        void setPigmentGrid(Vector color1, Vector color2)$/;"	f	class:Material	access:public	signature:(Vector color1, Vector color2)
setPigmentGrid	backup/Material.h	/^        void setPigmentGrid(Vector color1, Vector color2)$/;"	f	class:Material	access:public	signature:(Vector color1, Vector color2)
setPigmentScale	Material.h	/^        void setPigmentScale(myFloat scale)$/;"	f	class:Material	access:public	signature:(myFloat scale)
setPigmentScale	backup/Material.h	/^        void setPigmentScale(myFloat scale)$/;"	f	class:Material	access:public	signature:(myFloat scale)
setPigmentSolid	Material.h	/^        void setPigmentSolid(Vector color)$/;"	f	class:Material	access:public	signature:(Vector color)
setPigmentSolid	backup/Material.h	/^        void setPigmentSolid(Vector color)$/;"	f	class:Material	access:public	signature:(Vector color)
setRefractiveCoef	Material.h	/^        void setRefractiveCoef(myFloat coef)$/;"	f	class:Material	access:public	signature:(myFloat coef)
setRefractiveCoef	backup/Material.h	/^        void setRefractiveCoef(myFloat coef)$/;"	f	class:Material	access:public	signature:(myFloat coef)
setRefractiveIndex	Material.h	/^        void setRefractiveIndex(myFloat index)$/;"	f	class:Material	access:public	signature:(myFloat index)
setRefractiveIndex	backup/Material.h	/^        void setRefractiveIndex(myFloat index)$/;"	f	class:Material	access:public	signature:(myFloat index)
setSolidColor	SkyDome.cc	/^void SkyDome::setSolidColor(Vector color)$/;"	f	class:SkyDome	signature:(Vector color)
setSolidColor	SkyDome.h	/^        void setSolidColor(Vector);$/;"	p	class:SkyDome	access:public	signature:(Vector)
setSolidColor	backup/SkyDome.cc	/^void SkyDome::setSolidColor(Vector color)$/;"	f	class:SkyDome	signature:(Vector color)
setSolidColor	backup/SkyDome.h	/^        void setSolidColor(Vector);$/;"	p	class:SkyDome	access:public	signature:(Vector)
setSpecularCoef	Material.h	/^        void setSpecularCoef(myFloat coef)$/;"	f	class:Material	access:public	signature:(myFloat coef)
setSpecularCoef	backup/Material.h	/^        void setSpecularCoef(myFloat coef)$/;"	f	class:Material	access:public	signature:(myFloat coef)
sky	Camera.h	/^        Vector sky;$/;"	m	class:Camera	access:private
sky	backup/Camera.h	/^        Vector sky;$/;"	m	class:Camera	access:private
skyDome	World.h	/^        SkyDome skyDome;$/;"	m	class:World	access:public
skyDome	backup/World.h	/^        SkyDome skyDome;$/;"	m	class:World	access:public
skyDomeType	SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	m	class:SkyDome	typeref:enum:SkyDome::__anon5	access:private
skyDomeType	backup/SkyDome.h	/^        enum {SOLID, SKYDOME} skyDomeType;$/;"	m	class:SkyDome	typeref:enum:SkyDome::__anon2	access:private
solidColor	SkyDome.h	/^        Vector solidColor;$/;"	m	class:SkyDome	access:private
solidColor	backup/SkyDome.h	/^        Vector solidColor;$/;"	m	class:SkyDome	access:private
specularCoef	Material.h	/^        myFloat specularCoef;$/;"	m	class:Material	access:private
specularCoef	backup/Material.h	/^        myFloat specularCoef;$/;"	m	class:Material	access:private
splitPosition	KDNode.h	/^    myFloat splitPosition; \/\/4 bytes $/;"	m	struct:KDNode	access:public
splitPosition	backup/KDNode.h	/^    myFloat splitPosition; \/\/4 bytes $/;"	m	struct:KDNode	access:public
splitType	KDSplitElement.h	/^enum splitType {LEFT, RIGHT};$/;"	g
splitType	backup/KDSplitElement.h	/^enum splitType {LEFT, RIGHT};$/;"	g
start	Renderer.cc	/^void Renderer::start(void)$/;"	f	class:Renderer	signature:(void)
start	Renderer.h	/^        void start(void);$/;"	p	class:Renderer	access:public	signature:(void)
start	Thread.h	/^        void start(void * arg = NULL) $/;"	f	class:Thread	access:public	signature:(void * arg = NULL)
start	backup/Renderer.cc	/^void Renderer::start(void)$/;"	f	class:Renderer	signature:(void)
start	backup/Renderer.h	/^        void start(void);$/;"	p	class:Renderer	access:public	signature:(void)
start	backup/Thread.h	/^        void start(void * arg = NULL) $/;"	f	class:Thread	access:public	signature:(void * arg = NULL)
stop	UIThread.cc	/^void UIThread::stop()$/;"	f	class:UIThread	signature:()
stop	UIThread.h	/^        void stop();$/;"	p	class:UIThread	access:public	signature:()
stop	backup/UIThread.cc	/^void UIThread::stop()$/;"	f	class:UIThread	signature:()
stop	backup/UIThread.h	/^        void stop();$/;"	p	class:UIThread	access:public	signature:()
swapRows	Matrix.h	/^        void swapRows(unsigned int rowA, unsigned int rowB)$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int rowA, unsigned int rowB)
swapRows	backup/Matrix.h	/^        void swapRows(unsigned int rowA, unsigned int rowB)$/;"	f	class:Matrix4x4	access:public	signature:(unsigned int rowA, unsigned int rowB)
thread	Thread.h	/^        pthread_t thread;$/;"	m	class:Thread	access:private
thread	backup/Thread.h	/^        pthread_t thread;$/;"	m	class:Thread	access:private
threadAddress	Thread.h	/^        static void * threadAddress(void * pthis)$/;"	f	class:Thread	access:protected	signature:(void * pthis)
threadAddress	backup/Thread.h	/^        static void * threadAddress(void * pthis)$/;"	f	class:Thread	access:protected	signature:(void * pthis)
threadCount	RenderThread.cc	/^static unsigned int threadCount = 0;$/;"	v	file:
threadCount	backup/RenderThread.cc	/^static unsigned int threadCount = 0;$/;"	v	file:
threadIndex	RenderThread.h	/^        unsigned int threadIndex;$/;"	m	class:RenderThread	access:private
threadIndex	backup/RenderThread.h	/^        unsigned int threadIndex;$/;"	m	class:RenderThread	access:private
timeToString	backup/utils.cc	/^std::string timeToString(double timeInSeconds)$/;"	f	signature:(double timeInSeconds)
timeToString	backup/utils.h	/^std::string timeToString(double timeInSeconds);$/;"	p	signature:(double timeInSeconds)
timeToString	utils.cc	/^std::string timeToString(double timeInSeconds)$/;"	f	signature:(double timeInSeconds)
timeToString	utils.h	/^std::string timeToString(double timeInSeconds);$/;"	p	signature:(double timeInSeconds)
toString	Point.h	/^        std::string toString(void) const$/;"	f	class:Point	access:public	signature:(void) const
toString	Vector.h	/^        std::string toString() const$/;"	f	class:Vector	access:public	signature:() const
toString	backup/Point.h	/^        std::string toString(void) const$/;"	f	class:Point	access:public	signature:(void) const
toString	backup/Vector.h	/^        std::string toString() const$/;"	f	class:Vector	access:public	signature:() const
toString	test/Vector.h	/^        std::string toString(void) const$/;"	f	class:Vector	access:public	signature:(void) const
trace	World.cc	/^Vector World::trace(Ray ray, Random& rNG) const$/;"	f	class:World	signature:(Ray ray, Random& rNG) const
trace	World.h	/^        Vector trace(Ray, Random&) const;$/;"	p	class:World	access:public	signature:(Ray, Random&) const
trace	backup/World.cc	/^Vector World::trace(Ray ray, Random& rNG) const$/;"	f	class:World	signature:(Ray ray, Random& rNG) const
trace	backup/World.h	/^        Vector trace(Ray, Random&) const;$/;"	p	class:World	access:public	signature:(Ray, Random&) const
transformation	Box.h	/^        Transformation *transformation;$/;"	m	class:Box	access:private
transformation	Plane.h	/^        Transformation *transformation;$/;"	m	class:Plane	access:private
transformation	Sphere.h	/^        Transformation *transformation;$/;"	m	class:Sphere	access:private
transformation	Transformation.h	/^        Matrix4x4 transformation;$/;"	m	class:Transformation	access:private
transformation	backup/Box.h	/^        Transformation *transformation;$/;"	m	class:Box	access:private
transformation	backup/Plane.h	/^        Transformation *transformation;$/;"	m	class:Plane	access:private
transformation	backup/Sphere.h	/^        Transformation *transformation;$/;"	m	class:Sphere	access:private
transformation	backup/Transformation.h	/^        Matrix4x4 transformation;$/;"	m	class:Transformation	access:private
triangles	Mesh.h	/^        std::vector<Triangle*> triangles;$/;"	m	class:Mesh	access:private
triangles	backup/Mesh.h	/^        std::vector<Triangle*> triangles;$/;"	m	class:Mesh	access:private
type	KDSplitElement.h	/^    splitType type;$/;"	m	struct:KDSplitElement	access:public
type	backup/KDSplitElement.h	/^    splitType type;$/;"	m	struct:KDSplitElement	access:public
uiRunning	UIThread.h	/^        bool uiRunning;$/;"	m	class:UIThread	access:private
uiRunning	backup/UIThread.h	/^        bool uiRunning;$/;"	m	class:UIThread	access:private
uiThread	Renderer.h	/^        UIThread *uiThread;$/;"	m	class:Renderer	access:private
uiThread	backup/Renderer.h	/^        UIThread *uiThread;$/;"	m	class:Renderer	access:private
unit	Vector.h	/^        Vector unit() const$/;"	f	class:Vector	access:public	signature:() const
unit	backup/Vector.h	/^        Vector unit() const$/;"	f	class:Vector	access:public	signature:() const
unit	test/Vector.h	/^        Vector unit(void) const$/;"	f	class:Vector	access:public	signature:(void) const
up	Camera.h	/^        Vector up;$/;"	m	class:Camera	access:private
up	backup/Camera.h	/^        Vector up;$/;"	m	class:Camera	access:private
userData	Thread.h	/^        void * userData;$/;"	m	class:Thread	access:private
userData	backup/Thread.h	/^        void * userData;$/;"	m	class:Thread	access:private
width	Film.h	/^        unsigned int width;$/;"	m	class:Film	access:private
width	SkyDome.h	/^        unsigned int width;$/;"	m	class:SkyDome	access:private
width	UIThread.h	/^        unsigned int width;$/;"	m	class:UIThread	access:private
width	backup/Film.h	/^        unsigned int width;$/;"	m	class:Film	access:private
width	backup/SkyDome.h	/^        unsigned int width;$/;"	m	class:SkyDome	access:private
width	backup/UIThread.h	/^        unsigned int width;$/;"	m	class:UIThread	access:private
window	XWindow.h	/^        Window window;$/;"	m	class:XWindow	access:private
window	backup/XWindow.h	/^        Window window;$/;"	m	class:XWindow	access:private
window	test/XWindow.h	/^        Window window;$/;"	m	class:XWindow	access:private
windowHeight	XWindow.h	/^        unsigned int windowHeight;$/;"	m	class:XWindow	access:private
windowHeight	backup/XWindow.h	/^        unsigned int windowHeight;$/;"	m	class:XWindow	access:private
windowHeight	test/XWindow.h	/^        unsigned int windowHeight;$/;"	m	class:XWindow	access:public
windowWidth	XWindow.h	/^        unsigned int windowWidth;$/;"	m	class:XWindow	access:private
windowWidth	backup/XWindow.h	/^        unsigned int windowWidth;$/;"	m	class:XWindow	access:private
windowWidth	test/XWindow.h	/^        unsigned int windowWidth;$/;"	m	class:XWindow	access:public
world	RenderThread.h	/^        World *world;$/;"	m	class:RenderThread	access:private
world	Renderer.h	/^        World *world;$/;"	m	class:Renderer	access:private
world	backup/RenderThread.h	/^        World *world;$/;"	m	class:RenderThread	access:private
world	backup/Renderer.h	/^        World *world;$/;"	m	class:Renderer	access:private
worldToObject	Transformation.h	/^        Point worldToObject(const Point& point) const$/;"	f	class:Transformation	access:public	signature:(const Point& point) const
worldToObject	Transformation.h	/^        Vector worldToObject(const Vector& vector) const$/;"	f	class:Transformation	access:public	signature:(const Vector& vector) const
worldToObject	backup/Transformation.h	/^        Point worldToObject(const Point& point) const$/;"	f	class:Transformation	access:public	signature:(const Point& point) const
worldToObject	backup/Transformation.h	/^        Vector worldToObject(const Vector& vector) const$/;"	f	class:Transformation	access:public	signature:(const Vector& vector) const
writeRadiance	Film.cc	/^void Film::writeRadiance(unsigned int x, unsigned int y, Vector radiance)$/;"	f	class:Film	signature:(unsigned int x, unsigned int y, Vector radiance)
writeRadiance	Film.h	/^        void writeRadiance(unsigned int, unsigned int, Vector);$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int, Vector)
writeRadiance	backup/Film.cc	/^void Film::writeRadiance(unsigned int x, unsigned int y, Vector radiance)$/;"	f	class:Film	signature:(unsigned int x, unsigned int y, Vector radiance)
writeRadiance	backup/Film.h	/^        void writeRadiance(unsigned int, unsigned int, Vector);$/;"	p	class:Film	access:public	signature:(unsigned int, unsigned int, Vector)
x	Point.h	/^        myFloat x;$/;"	m	class:Point	access:public
x	Vector.h	/^        myFloat x;$/;"	m	class:Vector	access:public
x	backup/Point.h	/^        myFloat x;$/;"	m	class:Point	access:public
x	backup/Vector.h	/^        myFloat x;$/;"	m	class:Vector	access:public
x	test/Vector.h	/^        myFloat x;$/;"	m	class:Vector	access:private
xend	RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
xend	backup/RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
xstart	RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
xstart	backup/RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
y	Point.h	/^        myFloat y;$/;"	m	class:Point	access:public
y	Vector.h	/^        myFloat y;$/;"	m	class:Vector	access:public
y	backup/Point.h	/^        myFloat y;$/;"	m	class:Point	access:public
y	backup/Vector.h	/^        myFloat y;$/;"	m	class:Vector	access:public
y	test/Vector.h	/^        myFloat y;$/;"	m	class:Vector	access:private
yend	RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
yend	backup/RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
ystart	RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
ystart	backup/RectangleInfo.h	/^    unsigned int xstart, ystart, xend, yend;$/;"	m	struct:RectangleInfo	access:public
z	Point.h	/^        myFloat z;$/;"	m	class:Point	access:public
z	Vector.h	/^        myFloat z;$/;"	m	class:Vector	access:public
z	backup/Point.h	/^        myFloat z;$/;"	m	class:Point	access:public
z	backup/Vector.h	/^        myFloat z;$/;"	m	class:Vector	access:public
z	test/Vector.h	/^        myFloat z;$/;"	m	class:Vector	access:private
~Box	Box.cc	/^Box::~Box()$/;"	f	class:Box	signature:()
~Box	Box.h	/^        ~Box();$/;"	p	class:Box	access:public	signature:()
~Box	backup/Box.cc	/^Box::~Box()$/;"	f	class:Box	signature:()
~Box	backup/Box.h	/^        ~Box();$/;"	p	class:Box	access:public	signature:()
~Film	Film.cc	/^Film::~Film(void)$/;"	f	class:Film	signature:(void)
~Film	Film.h	/^        ~Film();$/;"	p	class:Film	access:public	signature:()
~Film	backup/Film.cc	/^Film::~Film(void)$/;"	f	class:Film	signature:(void)
~Film	backup/Film.h	/^        ~Film();$/;"	p	class:Film	access:public	signature:()
~KDTree	KDTree.cc	/^KDTree::~KDTree()$/;"	f	class:KDTree	signature:()
~KDTree	KDTree.h	/^        ~KDTree();$/;"	p	class:KDTree	access:public	signature:()
~KDTree	backup/KDTree.cc	/^KDTree::~KDTree()$/;"	f	class:KDTree	signature:()
~KDTree	backup/KDTree.h	/^        ~KDTree();$/;"	p	class:KDTree	access:public	signature:()
~Mesh	Mesh.h	/^        ~Mesh();$/;"	p	class:Mesh	access:public	signature:()
~Mesh	backup/Mesh.h	/^        ~Mesh();$/;"	p	class:Mesh	access:public	signature:()
~Object	Object.h	/^        virtual ~Object() $/;"	f	class:Object	access:public	signature:()
~Object	backup/Object.h	/^        virtual ~Object() $/;"	f	class:Object	access:public	signature:()
~Plane	Plane.cc	/^Plane::~Plane()$/;"	f	class:Plane	signature:()
~Plane	Plane.h	/^        ~Plane();$/;"	p	class:Plane	access:public	signature:()
~Plane	backup/Plane.cc	/^Plane::~Plane()$/;"	f	class:Plane	signature:()
~Plane	backup/Plane.h	/^        ~Plane();$/;"	p	class:Plane	access:public	signature:()
~RenderThread	RenderThread.cc	/^RenderThread::~RenderThread()$/;"	f	class:RenderThread	signature:()
~RenderThread	RenderThread.h	/^        ~RenderThread();$/;"	p	class:RenderThread	access:public	signature:()
~RenderThread	backup/RenderThread.cc	/^RenderThread::~RenderThread()$/;"	f	class:RenderThread	signature:()
~RenderThread	backup/RenderThread.h	/^        ~RenderThread();$/;"	p	class:RenderThread	access:public	signature:()
~Renderer	Renderer.cc	/^Renderer::~Renderer(void)$/;"	f	class:Renderer	signature:(void)
~Renderer	Renderer.h	/^        ~Renderer(void);$/;"	p	class:Renderer	access:public	signature:(void)
~Renderer	backup/Renderer.cc	/^Renderer::~Renderer(void)$/;"	f	class:Renderer	signature:(void)
~Renderer	backup/Renderer.h	/^        ~Renderer(void);$/;"	p	class:Renderer	access:public	signature:(void)
~SkyDome	SkyDome.cc	/^SkyDome::~SkyDome(void)$/;"	f	class:SkyDome	signature:(void)
~SkyDome	SkyDome.h	/^        ~SkyDome();$/;"	p	class:SkyDome	access:public	signature:()
~SkyDome	backup/SkyDome.cc	/^SkyDome::~SkyDome(void)$/;"	f	class:SkyDome	signature:(void)
~SkyDome	backup/SkyDome.h	/^        ~SkyDome();$/;"	p	class:SkyDome	access:public	signature:()
~Sphere	Sphere.cc	/^Sphere::~Sphere()$/;"	f	class:Sphere	signature:()
~Sphere	Sphere.h	/^        ~Sphere();$/;"	p	class:Sphere	access:public	signature:()
~Sphere	backup/Sphere.cc	/^Sphere::~Sphere()$/;"	f	class:Sphere	signature:()
~Sphere	backup/Sphere.h	/^        ~Sphere();$/;"	p	class:Sphere	access:public	signature:()
~Thread	Thread.h	/^        virtual ~Thread(void) {}$/;"	f	class:Thread	access:public	signature:(void)
~Thread	backup/Thread.h	/^        virtual ~Thread(void) {}$/;"	f	class:Thread	access:public	signature:(void)
~UIThread	UIThread.cc	/^UIThread::~UIThread()$/;"	f	class:UIThread	signature:()
~UIThread	UIThread.h	/^        ~UIThread();$/;"	p	class:UIThread	access:public	signature:()
~UIThread	backup/UIThread.cc	/^UIThread::~UIThread()$/;"	f	class:UIThread	signature:()
~UIThread	backup/UIThread.h	/^        ~UIThread();$/;"	p	class:UIThread	access:public	signature:()
~World	World.cc	/^World::~World()$/;"	f	class:World	signature:()
~World	World.h	/^        ~World();$/;"	p	class:World	access:public	signature:()
~World	backup/World.cc	/^World::~World()$/;"	f	class:World	signature:()
~World	backup/World.h	/^        ~World();$/;"	p	class:World	access:public	signature:()
~XWindow	XWindow.cc	/^XWindow::~XWindow(void)$/;"	f	class:XWindow	signature:(void)
~XWindow	XWindow.h	/^        ~XWindow(void);$/;"	p	class:XWindow	access:public	signature:(void)
~XWindow	backup/XWindow.cc	/^XWindow::~XWindow(void)$/;"	f	class:XWindow	signature:(void)
~XWindow	backup/XWindow.h	/^        ~XWindow(void);$/;"	p	class:XWindow	access:public	signature:(void)
~XWindow	test/XWindow.c++	/^XWindow::~XWindow(void)$/;"	f	class:XWindow	signature:(void)
~XWindow	test/XWindow.h	/^        ~XWindow(void);$/;"	p	class:XWindow	access:public	signature:(void)
